<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>数据类型 on Ther&#39;s Blog</title>
    <link>https://www.niuwx.cn/tags/%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</link>
    <description>Recent content in 数据类型 on Ther&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Sun, 14 Mar 2021 15:33:51 +0800</lastBuildDate><atom:link href="https://www.niuwx.cn/tags/%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Go语言基础之基本数据类型</title>
      <link>https://www.niuwx.cn/posts/golang/go%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80%E4%B9%8B%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</link>
      <pubDate>Sun, 14 Mar 2021 15:33:51 +0800</pubDate>
      
      <guid>https://www.niuwx.cn/posts/golang/go%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80%E4%B9%8B%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</guid>
      <description>数据类型</description>
      <content:encoded><![CDATA[<p>Go语言中有丰富的数据类型，除了基本的整型、浮点型、布尔型、字符串外，还有数组、切片、结构体、函数、map、通道（channel）等。Go 语言的基本类型和其他语言大同小异。</p>
<h3 id="基本数据类型">基本数据类型</h3>
<h4 id="整型">整型</h4>
<p>整数分为以下两个大类：</p>
<p>按长度分为：int8，int16，int64</p>
<p>对应的无符号整型：uint16，uint32，uint64</p>
<p>其中，<code>uint8</code>就是我们熟知的<code>byte</code>型，<code>int16</code>对应C语言中的<code>short</code>型，<code>int64</code>对应C语言中的<code>long</code>型。</p>
<h5 id="特殊整型">特殊整型</h5>
<table>
<thead>
<tr>
<th style="text-align:center">类型</th>
<th style="text-align:center">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">uint</td>
<td style="text-align:center">32位操作系统上就是<code>uint32</code>，64位操作系统上就是<code>uint64</code></td>
</tr>
<tr>
<td style="text-align:center">int</td>
<td style="text-align:center">32位操作系统上就是<code>int32</code>，64位操作系统上就是<code>int64</code></td>
</tr>
<tr>
<td style="text-align:center">uintptr</td>
<td style="text-align:center">无符号整型，用于存放一个指针</td>
</tr>
</tbody>
</table>
<h4 id="浮点型">浮点型</h4>
<p>Go语言支持两种浮点型数：<code>float32</code>和<code>float64</code>。这两种浮点型数据格式遵循<code>IEEE 754</code>标准： <code>float32</code> 的浮点数的最大范围约为 <code>3.4e38</code>，可以使用常量定义：<code>math.MaxFloat32</code>。 <code>float64</code> 的浮点数的最大范围约为 <code>1.8e308</code>，可以使用一个常量定义：<code>math.MaxFloat64</code>。</p>
<p>打印浮点数时，可以使用<code>fmt</code>包配合动词<code>%f</code>，代码如下：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-go" data-lang="go"><span style="color:#f92672">package</span> <span style="color:#a6e22e">main</span>
<span style="color:#f92672">import</span> (
        <span style="color:#e6db74">&#34;fmt&#34;</span>
        <span style="color:#e6db74">&#34;math&#34;</span>
)
<span style="color:#66d9ef">func</span> <span style="color:#a6e22e">main</span>() {
        <span style="color:#a6e22e">fmt</span>.<span style="color:#a6e22e">Printf</span>(<span style="color:#e6db74">&#34;%f\n&#34;</span>, <span style="color:#a6e22e">math</span>.<span style="color:#a6e22e">Pi</span>)
        <span style="color:#a6e22e">fmt</span>.<span style="color:#a6e22e">Printf</span>(<span style="color:#e6db74">&#34;%.2f\n&#34;</span>, <span style="color:#a6e22e">math</span>.<span style="color:#a6e22e">Pi</span>)
}
</code></pre></div><h4 id="复数">复数</h4>
<p><code>complex64</code>和<code>complex128</code></p>
<p>具体用法如下：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-go" data-lang="go"><span style="color:#66d9ef">var</span> <span style="color:#a6e22e">c1</span> <span style="color:#66d9ef">complex64</span>
<span style="color:#a6e22e">c1</span> = <span style="color:#ae81ff">1</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">2i</span>
<span style="color:#66d9ef">var</span> <span style="color:#a6e22e">c2</span> <span style="color:#66d9ef">complex128</span>
<span style="color:#a6e22e">c2</span> = <span style="color:#ae81ff">2</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">3i</span>
<span style="color:#a6e22e">fmt</span>.<span style="color:#a6e22e">Println</span>(<span style="color:#a6e22e">c1</span>)
<span style="color:#a6e22e">fmt</span>.<span style="color:#a6e22e">Println</span>(<span style="color:#a6e22e">c2</span>)
</code></pre></div><h4 id="布尔值">布尔值</h4>
<p>Go语言中以<code>bool</code>类型进行声明布尔型数据，布尔型数据只有<code>true（真）</code>和<code>false（假）</code>两个值。</p>
<p><strong>注意：</strong></p>
<ol>
<li>布尔类型变量的默认值为<code>false</code>。</li>
<li>Go 语言中不允许将整型强制转换为布尔型.</li>
<li>布尔型无法参与数值运算，也无法与其他类型进行转换。</li>
</ol>
<h4 id="字符串">字符串</h4>
<p>Go语言中的字符串以原生数据类型出现，使用字符串就像使用其他原生数据类型（int、bool、float32、float64 等）一样。 Go 语言里的字符串的内部实现使用<code>UTF-8</code>编码。 字符串的值为<code>双引号(&quot;)</code>中的内容，可以在Go语言的源码中直接添加非ASCII码字符，例如：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-go" data-lang="go"><span style="color:#a6e22e">s1</span> <span style="color:#f92672">:=</span> <span style="color:#e6db74">&#34;hello&#34;</span>
<span style="color:#a6e22e">s2</span> <span style="color:#f92672">:=</span> <span style="color:#e6db74">&#34;你好&#34;</span>
</code></pre></div><h5 id="转义字符">转义字符</h5>
<table>
<thead>
<tr>
<th style="text-align:center"><code>\r</code></th>
<th style="text-align:center">回车符（返回行首）</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center"><code>\n</code></td>
<td style="text-align:center">换行符（直接跳到下一行的同列位置）</td>
</tr>
<tr>
<td style="text-align:center"><code>\t</code></td>
<td style="text-align:center">制表符</td>
</tr>
<tr>
<td style="text-align:center"><code>\'</code></td>
<td style="text-align:center">单引号</td>
</tr>
<tr>
<td style="text-align:center"><code>\&quot;</code></td>
<td style="text-align:center">双引号</td>
</tr>
<tr>
<td style="text-align:center"><code>\\</code></td>
<td style="text-align:center">反斜杠</td>
</tr>
</tbody>
</table>
<p>例如，我们要打印Windows平台的文件路径</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-go" data-lang="go"><span style="color:#f92672">package</span> <span style="color:#a6e22e">main</span>
<span style="color:#f92672">import</span> (
    <span style="color:#e6db74">&#34;fmt&#34;</span>
)
<span style="color:#66d9ef">func</span> <span style="color:#a6e22e">main</span>() {
    <span style="color:#a6e22e">fmt</span>.<span style="color:#a6e22e">Println</span>(<span style="color:#e6db74">&#34;str := \&#34;c:\\Code\\lesson1\\go.exe\&#34;&#34;</span>)
}
</code></pre></div><h5 id="多行字符串">多行字符串</h5>
<p>Go语言中要定义一个多行字符串时，就必须使用<code>反引号</code>字符：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-go" data-lang="go"><span style="color:#a6e22e">s1</span> <span style="color:#f92672">:=</span> <span style="color:#e6db74">`第一行
</span><span style="color:#e6db74">第二行
</span><span style="color:#e6db74">第三行
</span><span style="color:#e6db74">`</span>
<span style="color:#a6e22e">fmt</span>.<span style="color:#a6e22e">Println</span>(<span style="color:#a6e22e">s1</span>)
</code></pre></div><p>反引号间换行将被作为字符串中的换行，但是所有的转义字符均无效，文本将会原样输出。</p>
<h5 id="字符串的常用操作">字符串的常用操作</h5>
<table>
<thead>
<tr>
<th style="text-align:center">len(str)</th>
<th style="text-align:center">求长度</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">+ 或 fmt.Sprintf</td>
<td style="text-align:center">拼接字符串</td>
</tr>
<tr>
<td style="text-align:center">strings.Split</td>
<td style="text-align:center">分割</td>
</tr>
<tr>
<td style="text-align:center">strings.contains</td>
<td style="text-align:center">判断是否包含</td>
</tr>
<tr>
<td style="text-align:center">strings.HasPrefix,strings.HasSuffix</td>
<td style="text-align:center">前缀/后缀判断</td>
</tr>
<tr>
<td style="text-align:center">strings.Index(),strings.LastIndex()</td>
<td style="text-align:center">子串出现的位置</td>
</tr>
</tbody>
</table>
<h5 id="byte和rune类型">byte和rune类型</h5>
<p>组成每个字符串的元素叫做“字符”，可以通过遍历或者单个获取字符串元素获得字符。 字符用单引号（'）包裹起来，如：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-go" data-lang="go"><span style="color:#66d9ef">var</span> <span style="color:#a6e22e">a</span> <span style="color:#f92672">:=</span> <span style="color:#e6db74">&#39;中&#39;</span>
<span style="color:#66d9ef">var</span> <span style="color:#a6e22e">b</span> <span style="color:#f92672">:=</span> <span style="color:#e6db74">&#39;x&#39;</span>
</code></pre></div><p>Go 语言的字符有以下两种：</p>
<ol>
<li><code>uint8</code>类型，或者叫 byte 型，代表了<code>ASCII码</code>的一个字符。</li>
<li><code>rune</code>类型，代表一个 <code>UTF-8字符</code>。</li>
</ol>
<p>当需要处理中文、日文或者其他复合字符时，则需要用到<code>rune</code>类型。<code>rune</code>类型实际是一个<code>int32</code>。</p>
<p>如下，可以知道rune和byte的区别：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-go" data-lang="go"><span style="color:#75715e">// 遍历字符串
</span><span style="color:#75715e"></span><span style="color:#66d9ef">func</span> <span style="color:#a6e22e">traversalString</span>() {
	<span style="color:#a6e22e">s</span> <span style="color:#f92672">:=</span> <span style="color:#e6db74">&#34;GO你好&#34;</span>
	<span style="color:#66d9ef">for</span> <span style="color:#a6e22e">i</span> <span style="color:#f92672">:=</span> <span style="color:#ae81ff">0</span>; <span style="color:#a6e22e">i</span> &lt; len(<span style="color:#a6e22e">s</span>); <span style="color:#a6e22e">i</span><span style="color:#f92672">++</span> { <span style="color:#75715e">//byte
</span><span style="color:#75715e"></span>		<span style="color:#a6e22e">fmt</span>.<span style="color:#a6e22e">Printf</span>(<span style="color:#e6db74">&#34;%v(%c) &#34;</span>, <span style="color:#a6e22e">s</span>[<span style="color:#a6e22e">i</span>], <span style="color:#a6e22e">s</span>[<span style="color:#a6e22e">i</span>])
	}
	<span style="color:#a6e22e">fmt</span>.<span style="color:#a6e22e">Println</span>()
	<span style="color:#66d9ef">for</span> <span style="color:#a6e22e">_</span>, <span style="color:#a6e22e">r</span> <span style="color:#f92672">:=</span> <span style="color:#66d9ef">range</span> <span style="color:#a6e22e">s</span> { <span style="color:#75715e">//rune
</span><span style="color:#75715e"></span>		<span style="color:#a6e22e">fmt</span>.<span style="color:#a6e22e">Printf</span>(<span style="color:#e6db74">&#34;%v(%c) &#34;</span>, <span style="color:#a6e22e">r</span>, <span style="color:#a6e22e">r</span>)
	}
	<span style="color:#a6e22e">fmt</span>.<span style="color:#a6e22e">Println</span>()
}
</code></pre></div><p>这是我们的输出结果</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-go" data-lang="go"><span style="color:#ae81ff">71</span>(<span style="color:#a6e22e">G</span>) <span style="color:#ae81ff">79</span>(<span style="color:#a6e22e">O</span>) <span style="color:#ae81ff">228</span>(<span style="color:#a6e22e">ä</span>) <span style="color:#ae81ff">189</span>(<span style="color:#960050;background-color:#1e0010">½</span>) <span style="color:#ae81ff">160</span>( ) <span style="color:#ae81ff">229</span>(<span style="color:#a6e22e">å</span>) <span style="color:#ae81ff">165</span>(<span style="color:#960050;background-color:#1e0010">¥</span>) <span style="color:#ae81ff">189</span>(<span style="color:#960050;background-color:#1e0010">½</span>) 
<span style="color:#ae81ff">71</span>(<span style="color:#a6e22e">G</span>) <span style="color:#ae81ff">79</span>(<span style="color:#a6e22e">O</span>) <span style="color:#ae81ff">20320</span>(<span style="color:#a6e22e">你</span>) <span style="color:#ae81ff">22909</span>(<span style="color:#a6e22e">好</span>) 
</code></pre></div><p>因为UTF8编码下一个中文汉字由3~4个字节组成，所以我们不能简单的按照字节去遍历一个包含中文的字符串，否则就会出现上面输出中第一行的结果。</p>
<p>字符串底层是一个byte数组，所以可以和<code>[]byte</code>类型相互转换。字符串是不能修改的 字符串是由byte字节组成，所以字符串的长度是byte字节的长度。 rune类型用来表示utf8字符，一个rune字符由一个或多个byte组成。</p>
<h5 id="修改字符串">修改字符串</h5>
<p>要修改字符串，需要先将其转换成<code>[]rune</code>或<code>[]byte</code>，完成后再转换为<code>string</code>。无论哪种转换，都会重新分配内存，并复制字节数组。</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-go" data-lang="go"><span style="color:#66d9ef">func</span> <span style="color:#a6e22e">changeString</span>() {
	<span style="color:#a6e22e">s1</span> <span style="color:#f92672">:=</span> <span style="color:#e6db74">&#34;big&#34;</span>
	<span style="color:#75715e">// 强制类型转换
</span><span style="color:#75715e"></span>	<span style="color:#a6e22e">byteS1</span> <span style="color:#f92672">:=</span> []byte(<span style="color:#a6e22e">s1</span>)
	<span style="color:#a6e22e">byteS1</span>[<span style="color:#ae81ff">0</span>] = <span style="color:#e6db74">&#39;p&#39;</span>
	<span style="color:#a6e22e">fmt</span>.<span style="color:#a6e22e">Println</span>(string(<span style="color:#a6e22e">byteS1</span>))

	<span style="color:#a6e22e">s2</span> <span style="color:#f92672">:=</span> <span style="color:#e6db74">&#34;白萝卜&#34;</span>
	<span style="color:#a6e22e">runeS2</span> <span style="color:#f92672">:=</span> []rune(<span style="color:#a6e22e">s2</span>)
	<span style="color:#a6e22e">runeS2</span>[<span style="color:#ae81ff">0</span>] = <span style="color:#e6db74">&#39;红&#39;</span>
	<span style="color:#a6e22e">fmt</span>.<span style="color:#a6e22e">Println</span>(string(<span style="color:#a6e22e">runeS2</span>))
}
</code></pre></div><h4 id="类型转化">类型转化</h4>
<p>强制类型转换的基本语法如下：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">T<span style="color:#f92672">(</span>表达式<span style="color:#f92672">)</span>
</code></pre></div><p>其中，T表示要转换的类型。表达式包括变量、复杂算子和函数返回值等</p>
<p>比如计算直角三角形的斜边长时使用math包的Sqrt()函数，该函数接收的是float64类型的参数，而变量a和b都是int类型的，这个时候就需要将a和b强制类型转换为<code>float64</code>类型</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-go" data-lang="go"><span style="color:#66d9ef">func</span> <span style="color:#a6e22e">sqrtDemo</span>() {
	<span style="color:#66d9ef">var</span> <span style="color:#a6e22e">a</span>, <span style="color:#a6e22e">b</span> = <span style="color:#ae81ff">3</span>, <span style="color:#ae81ff">4</span>
	<span style="color:#66d9ef">var</span> <span style="color:#a6e22e">c</span> <span style="color:#66d9ef">int</span>
	<span style="color:#75715e">// math.Sqrt()接收的参数是float64类型，需要强制转换
</span><span style="color:#75715e"></span>	<span style="color:#a6e22e">c</span> = int(<span style="color:#a6e22e">math</span>.<span style="color:#a6e22e">Sqrt</span>(float64(<span style="color:#a6e22e">a</span><span style="color:#f92672">*</span><span style="color:#a6e22e">a</span> <span style="color:#f92672">+</span> <span style="color:#a6e22e">b</span><span style="color:#f92672">*</span><span style="color:#a6e22e">b</span>)))
	<span style="color:#a6e22e">fmt</span>.<span style="color:#a6e22e">Println</span>(<span style="color:#a6e22e">c</span>)
}
</code></pre></div>]]></content:encoded>
    </item>
    
  </channel>
</rss>
