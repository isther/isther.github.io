<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>范式 on Ther&#39;s Blog</title>
    <link>https://www.niuwx.cn/tags/%E8%8C%83%E5%BC%8F/</link>
    <description>Recent content in 范式 on Ther&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Mon, 26 Jul 2021 10:31:51 +0800</lastBuildDate><atom:link href="https://www.niuwx.cn/tags/%E8%8C%83%E5%BC%8F/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>范式和表关系</title>
      <link>https://www.niuwx.cn/posts/mysql/%E8%8C%83%E5%BC%8F%E5%92%8C%E8%A1%A8%E5%85%B3%E7%B3%BB/</link>
      <pubDate>Mon, 26 Jul 2021 10:31:51 +0800</pubDate>
      
      <guid>https://www.niuwx.cn/posts/mysql/%E8%8C%83%E5%BC%8F%E5%92%8C%E8%A1%A8%E5%85%B3%E7%B3%BB/</guid>
      <description>简单介绍了一下范式和表关系</description>
      <content:encoded><![CDATA[<h3 id="关系型数据库设计范式">关系型数据库设计范式</h3>
<ul>
<li><code>Normal Format</code>，符合某一种级别的关系模式的集合，表示一个关系内部各个属性之间的联系的合理化程度</li>
<li>范式是离散数学的概念</li>
<li>范式目标是在满足组织和存储的前提下使数据结构冗余最小化</li>
<li>范式级别越高，表的级别就越标准</li>
<li>目前数据库应用的范式有以下几层
<ul>
<li>第一范式：1NF</li>
<li>第二范式：2NF</li>
<li>第三范式：3NF</li>
<li>逆规范化</li>
</ul>
</li>
</ul>
<h4 id="示例">示例</h4>
<ol>
<li>员工表
<table>
<thead>
<tr>
<th style="text-align:center">工号</th>
<th style="text-align:center">姓名</th>
<th style="text-align:center">部门</th>
<th style="text-align:center">入职时间</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">0001</td>
<td style="text-align:center">张三</td>
<td style="text-align:center">人事部</td>
<td style="text-align:center">2021-07-26</td>
</tr>
<tr>
<td style="text-align:center">0002</td>
<td style="text-align:center">李四</td>
<td style="text-align:center">运营部</td>
<td style="text-align:center">2021-07-26</td>
</tr>
</tbody>
</table>
</li>
</ol>
<p>每个员工都与部门挂钩，但是部门不可能有很多，所以上述表中会有很多数据重复，此时应该将部门单独维护出来，减少数据冗余。</p>
<table>
<thead>
<tr>
<th style="text-align:center">部门编号</th>
<th style="text-align:center">部门名称</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">1</td>
<td style="text-align:center">人事部</td>
</tr>
<tr>
<td style="text-align:center">2</td>
<td style="text-align:center">运营部</td>
</tr>
</tbody>
</table>
<table>
<thead>
<tr>
<th style="text-align:center">工号</th>
<th style="text-align:center">姓名</th>
<th style="text-align:center">部门</th>
<th style="text-align:center">入职时间</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">0001</td>
<td style="text-align:center">张三</td>
<td style="text-align:center">1</td>
<td style="text-align:center">2021-07-26</td>
</tr>
<tr>
<td style="text-align:center">0002</td>
<td style="text-align:center">李四</td>
<td style="text-align:center">2</td>
<td style="text-align:center">2021-07-26</td>
</tr>
</tbody>
</table>
<blockquote>
<p>范式一共有6层，但是数据库的设计通常只要求满足3层即可。</p>
</blockquote>
<h4 id="第一范式1nf">第一范式1NF</h4>
<ul>
<li><code>1NF</code>，数据字段设计时必须满足原子性</li>
<li><code>1NF</code>要求字段数据是不需要拆分就可以直接使用</li>
<li>如果数据使用的时候需要进行拆分那么就违背<code>1NF</code></li>
</ul>
<blockquote>
<p>步骤</p>
<ol>
<li>设计的字段是否在使用的时候还需要再拆分</li>
<li>将数据拆分到最小单位，设计字段</li>
<li>满足1NF</li>
</ol>
</blockquote>
<h5 id="示例-1">示例</h5>
<table>
<thead>
<tr>
<th style="text-align:center">姓名</th>
<th style="text-align:center">性别</th>
<th style="text-align:center">课程</th>
<th style="text-align:center">教室</th>
<th>成绩</th>
<th>学习时间</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">张三</td>
<td style="text-align:center">男</td>
<td style="text-align:center">C++</td>
<td style="text-align:center">101</td>
<td>100</td>
<td>2月1日-2月15日</td>
</tr>
<tr>
<td style="text-align:center">李四</td>
<td style="text-align:center">女</td>
<td style="text-align:center">C</td>
<td style="text-align:center">102</td>
<td>100</td>
<td>2月1日-2月15日</td>
</tr>
<tr>
<td style="text-align:center">王五</td>
<td style="text-align:center">男</td>
<td style="text-align:center">JAVA</td>
<td style="text-align:center">103</td>
<td>100</td>
<td>2月1日-2月15日</td>
</tr>
</tbody>
</table>
<p>当前表的学习时间在使用的时候肯定是基于开始时间和结束时间的，而这种设计会存在使用时的数据拆分，不满足原子性，同时也不满足<code>1NF</code>。</p>
<table>
<thead>
<tr>
<th style="text-align:center">姓名</th>
<th style="text-align:center">性别</th>
<th style="text-align:center">课程</th>
<th style="text-align:center">教室</th>
<th>成绩</th>
<th style="text-align:center">开始时间</th>
<th style="text-align:center">结束时间</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">张三</td>
<td style="text-align:center">男</td>
<td style="text-align:center">C++</td>
<td style="text-align:center">101</td>
<td>100</td>
<td style="text-align:center">2月1日</td>
<td style="text-align:center">2月15日</td>
</tr>
<tr>
<td style="text-align:center">李四</td>
<td style="text-align:center">女</td>
<td style="text-align:center">C</td>
<td style="text-align:center">102</td>
<td>100</td>
<td style="text-align:center">2月1日</td>
<td style="text-align:center">2月15日</td>
</tr>
<tr>
<td style="text-align:center">王五</td>
<td style="text-align:center">男</td>
<td style="text-align:center">JAVA</td>
<td style="text-align:center">103</td>
<td>100</td>
<td style="text-align:center">2月1日</td>
<td style="text-align:center">2月15日</td>
</tr>
</tbody>
</table>
<h4 id="第二范式2nf">第二范式2NF</h4>
<ul>
<li><code>2NF</code>，字段设计不能存在部分依赖</li>
<li>部份依赖：首先表存在复合主键，其次有的字段不是依赖整个主键，而只是依赖主键中的一部分</li>
<li>部份依赖解决：让所有非主属性都依赖一个候选关键字
<ul>
<li>最简单方式：取消复合主键（一般选用逻辑主键替代，但是本质依然是复合主键做主），所有非主属性都依赖主属性（逻辑主键）</li>
<li>正确方式：将部分依赖关系独立成表</li>
</ul>
</li>
</ul>
<h5 id="示例-2">示例</h5>
<p>学生成绩中学生和课程应该是决定性关系，因此属于主属性（主键）</p>
<table>
<thead>
<tr>
<th style="text-align:center">姓名(P)</th>
<th style="text-align:center">性别</th>
<th style="text-align:center">课程(P)</th>
<th style="text-align:center">教室</th>
<th>成绩</th>
<th style="text-align:center">开始时间</th>
<th style="text-align:center">结束时间</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">张三</td>
<td style="text-align:center">男</td>
<td style="text-align:center">C++</td>
<td style="text-align:center">101</td>
<td>100</td>
<td style="text-align:center">2月1日</td>
<td style="text-align:center">2月15日</td>
</tr>
<tr>
<td style="text-align:center">李四</td>
<td style="text-align:center">女</td>
<td style="text-align:center">C</td>
<td style="text-align:center">102</td>
<td>100</td>
<td style="text-align:center">2月1日</td>
<td style="text-align:center">2月15日</td>
</tr>
<tr>
<td style="text-align:center">王五</td>
<td style="text-align:center">男</td>
<td style="text-align:center">JAVA</td>
<td style="text-align:center">103</td>
<td>100</td>
<td style="text-align:center">2月1日</td>
<td style="text-align:center">2月15日</td>
</tr>
</tbody>
</table>
<ul>
<li>成绩是由<strong>学生</strong>和<strong>课程</strong>决定的，是完全依赖主属性</li>
<li>性别只依赖<strong>学生</strong>（部份依赖）</li>
<li>教室、开始时间和结束时间依赖<strong>课程</strong>（部份依赖）</li>
</ul>
<p>解决方案：将学生信息维护到一张表，课程信息维护到一张表，成绩表取两个表的主属性即可</p>
<p><strong>学生表</strong></p>
<table>
<thead>
<tr>
<th style="text-align:center">Stu_id(P)</th>
<th style="text-align:center">姓名</th>
<th style="text-align:center">性别</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">1</td>
<td style="text-align:center">张三</td>
<td style="text-align:center">男</td>
</tr>
<tr>
<td style="text-align:center">2</td>
<td style="text-align:center">李四</td>
<td style="text-align:center">女</td>
</tr>
<tr>
<td style="text-align:center">3</td>
<td style="text-align:center">王五</td>
<td style="text-align:center">男</td>
</tr>
</tbody>
</table>
<ul>
<li>Stu_id是姓名的代指属性（逻辑主键，本质主键是姓名）</li>
<li>性别只依赖主属性</li>
</ul>
<p><strong>课程表</strong></p>
<table>
<thead>
<tr>
<th style="text-align:center">Class_id(P)</th>
<th style="text-align:center">课程</th>
<th style="text-align:center">教室</th>
<th style="text-align:center">开始时间</th>
<th style="text-align:center">结束时间</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">1</td>
<td style="text-align:center">C++</td>
<td style="text-align:center">101</td>
<td style="text-align:center">2月1日</td>
<td style="text-align:center">2月15日</td>
</tr>
<tr>
<td style="text-align:center">2</td>
<td style="text-align:center">C</td>
<td style="text-align:center">102</td>
<td style="text-align:center">2月1日</td>
<td style="text-align:center">2月15日</td>
</tr>
<tr>
<td style="text-align:center">3</td>
<td style="text-align:center">JAVA</td>
<td style="text-align:center">103</td>
<td style="text-align:center">2月1日</td>
<td style="text-align:center">2月15日</td>
</tr>
</tbody>
</table>
<ul>
<li>Class_id是课程的代指属性（逻辑主键）</li>
<li>教室、开始时间和结束时间都依赖课程</li>
</ul>
<p><strong>成绩表</strong></p>
<table>
<thead>
<tr>
<th style="text-align:center">Stu_id(P)</th>
<th style="text-align:center">Class_id(P)</th>
<th style="text-align:center">成绩</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">1</td>
<td style="text-align:center">1</td>
<td style="text-align:center">100</td>
</tr>
<tr>
<td style="text-align:center">2</td>
<td style="text-align:center">2</td>
<td style="text-align:center">100</td>
</tr>
<tr>
<td style="text-align:center">3</td>
<td style="text-align:center">3</td>
<td style="text-align:center">100</td>
</tr>
</tbody>
</table>
<ul>
<li>Stu_id和Class_id共同组成主属性（复合主键）</li>
<li>成绩依赖Stu_id和Class_id本身，不存在部份依赖</li>
</ul>
<h4 id="第三范式3nf">第三范式3NF</h4>
<ul>
<li><code>3NF</code>，字段设计不能存在传递依赖</li>
<li>传递依赖：字段某个非主属性不直接依赖主属性，而是通过依赖某个其他非主属性而传递到主属性之上</li>
<li>传递依赖解决：让依赖非主属性的字段与依赖字段独立成表</li>
</ul>
<h5 id="示例-3">示例</h5>
<table>
<thead>
<tr>
<th style="text-align:center">学号(P)</th>
<th style="text-align:center">姓名</th>
<th style="text-align:center">专业编号</th>
<th style="text-align:center">专业名称</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">1</td>
<td style="text-align:center">张三</td>
<td style="text-align:center">0001001</td>
<td style="text-align:center">软件工程</td>
</tr>
<tr>
<td style="text-align:center">2</td>
<td style="text-align:center">李四</td>
<td style="text-align:center">0001002</td>
<td style="text-align:center">土木工程</td>
</tr>
</tbody>
</table>
<ul>
<li>姓名和专业编号都依赖于学号</li>
<li>专业名称依赖于专业编号</li>
<li>专业名称间接依赖学号：依赖传递</li>
<li>随着学生增加，专业名字会出现大量数据冗余</li>
</ul>
<p>解决方案：将存储传递依赖部分的字段独立成表，然后在需要使用相关信息的时候，引入即可。</p>
<p><strong>专业表</strong></p>
<table>
<thead>
<tr>
<th style="text-align:center">专业编号(P)</th>
<th style="text-align:center">专业名称</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">0001001</td>
<td style="text-align:center">软件工程</td>
</tr>
<tr>
<td style="text-align:center">0001002</td>
<td style="text-align:center">土木工程</td>
</tr>
</tbody>
</table>
<p><strong>学生表</strong></p>
<table>
<thead>
<tr>
<th style="text-align:center">学号(P)</th>
<th style="text-align:center">姓名</th>
<th style="text-align:center">专业编号</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">1</td>
<td style="text-align:center">张三</td>
<td style="text-align:center">0001001</td>
</tr>
<tr>
<td style="text-align:center">2</td>
<td style="text-align:center">李四</td>
<td style="text-align:center">0001002</td>
</tr>
</tbody>
</table>
<h4 id="逆规范化">逆规范化</h4>
<ul>
<li>为了提升数据查询的效率而刻意违背范式的规则</li>
<li>逆规范化的目标是为了提升数据访问效率</li>
<li>所谓逆规范化就是减少表之间的关联查询（效率降低），刻意增加数据冗余。</li>
</ul>
<h3 id="表关系">表关系</h3>
<ul>
<li>一个表代表一个实体，实体之间都有关联关系</li>
<li>根据范式的要求来设计表关系，减少数据冗余</li>
<li>根据实际需求来设计表关系，提升访问效率</li>
</ul>
<h5 id="示例-4">示例</h5>
<p>设计一个简单的新闻管理系统的数据库</p>
<ul>
<li>新闻信息表：id、标题、内容、发布时间、作者id（作者主属性）、分类id（分类表主属性）、阅读量、推荐数</li>
<li>作者表：id、作者名字、作者来源id（来源表）</li>
<li>来源表：id、来源名字、来源描述</li>
<li>分类表：id、分类名字、分类级别（父分类id）</li>
<li>评论表：id、评论人id（评论人表）、评论时间、评论内容</li>
<li>评论人表：id、评论人名字</li>
</ul>
<h4 id="一对一关系">一对一关系</h4>
<ul>
<li>一张表中的一条记录与另外一张表中有且仅有一条记录有关系</li>
<li>一对一关系通常是用来将一张原本就是议题的表拆分成两张表
<ul>
<li>频繁使用部分：常用字段</li>
<li>不常使用部分：生僻字段</li>
<li>使用相同的主键对应</li>
</ul>
</li>
<li>一对一关系设计较多使用在优化方面</li>
</ul>
<h5 id="示例-5">示例</h5>
<table>
<thead>
<tr>
<th style="text-align:center">学号(P)</th>
<th style="text-align:center">姓名</th>
<th style="text-align:center">性别</th>
<th style="text-align:center">年龄</th>
<th style="text-align:center">身高</th>
<th style="text-align:center">体重</th>
<th style="text-align:center">籍贯</th>
<th style="text-align:center">政治面貌</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">1</td>
<td style="text-align:center">张三</td>
<td style="text-align:center">男</td>
<td style="text-align:center">20</td>
<td style="text-align:center">185</td>
<td style="text-align:center">160</td>
<td style="text-align:center">山西</td>
<td style="text-align:center">农民</td>
</tr>
<tr>
<td style="text-align:center">2</td>
<td style="text-align:center">李四</td>
<td style="text-align:center">女</td>
<td style="text-align:center">21</td>
<td style="text-align:center">168</td>
<td style="text-align:center">110</td>
<td style="text-align:center">山西</td>
<td style="text-align:center">党员</td>
</tr>
</tbody>
</table>
<ul>
<li>姓名、性别、年龄属于常用字段，频繁查询</li>
</ul>
<p><strong>一对一关系设计</strong></p>
<ul>
<li>将常用字段取出，与学号组合成一张常用表</li>
<li>将不常用字段取出，与学号组成一张不常用表</li>
<li>表与表数据对应关系：基于学号（唯一）是一对一关系</li>
</ul>
<p><strong>常用表</strong></p>
<table>
<thead>
<tr>
<th style="text-align:center">学号(P)</th>
<th style="text-align:center">姓名</th>
<th style="text-align:center">性别</th>
<th style="text-align:center">年龄</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">1</td>
<td style="text-align:center">张三</td>
<td style="text-align:center">男</td>
<td style="text-align:center">20</td>
</tr>
<tr>
<td style="text-align:center">2</td>
<td style="text-align:center">李四</td>
<td style="text-align:center">女</td>
<td style="text-align:center">21</td>
</tr>
</tbody>
</table>
<p><strong>不常用表</strong></p>
<table>
<thead>
<tr>
<th style="text-align:center">学号(P)</th>
<th style="text-align:center">身高</th>
<th style="text-align:center">体重</th>
<th style="text-align:center">籍贯</th>
<th style="text-align:center">政治面貌</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">1</td>
<td style="text-align:center">185</td>
<td style="text-align:center">160</td>
<td style="text-align:center">山西</td>
<td style="text-align:center">农民</td>
</tr>
<tr>
<td style="text-align:center">2</td>
<td style="text-align:center">168</td>
<td style="text-align:center">110</td>
<td style="text-align:center">山西</td>
<td style="text-align:center">党员</td>
</tr>
</tbody>
</table>
<h4 id="一对多关系">一对多关系</h4>
<ul>
<li>
<p>又称多对一关系，一张表中的一条记录与另外一张表的多条记录对应，反过来另外一张表的多条记录只能对应当前表的一条记录</p>
</li>
<li>
<p>一对多关系是实体中非常常见的一种关系，实体设计时也应用非常多</p>
</li>
<li>
<p>一对多关系的核心解决方案是如何让记录能够正确匹配到另外表中的数据</p>
<ul>
<li>一表设计：一表记录在另外一张表中有多条记录，所在无法记录多个字段</li>
<li>多表设计：多表记录在另外一张表中只有一条记录，可以设置字段记录对应的主属性（通常主键）</li>
</ul>
</li>
</ul>
<h5 id="示例-6">示例</h5>
<p>老师与学科间的关系：一个老师只能教一个学科，但是一个学科可有多个老师来教。</p>
<p><strong>老师表</strong></p>
<table>
<thead>
<tr>
<th style="text-align:center">老师ID(P)</th>
<th style="text-align:center">姓名</th>
<th style="text-align:center">性别</th>
<th style="text-align:center">年龄</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">1</td>
<td style="text-align:center">张三</td>
<td style="text-align:center">男</td>
<td style="text-align:center">25</td>
</tr>
<tr>
<td style="text-align:center">2</td>
<td style="text-align:center">李四</td>
<td style="text-align:center">女</td>
<td style="text-align:center">26</td>
</tr>
<tr>
<td style="text-align:center">3</td>
<td style="text-align:center">王五</td>
<td style="text-align:center">男</td>
<td style="text-align:center">29</td>
</tr>
</tbody>
</table>
<p><strong>学科表</strong></p>
<table>
<thead>
<tr>
<th style="text-align:center">学科ID(P)</th>
<th style="text-align:center">学科名称</th>
<th style="text-align:center">课时长度</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">1</td>
<td style="text-align:center">C++</td>
<td style="text-align:center">600</td>
</tr>
<tr>
<td style="text-align:center">2</td>
<td style="text-align:center">JAVA</td>
<td style="text-align:center">800</td>
</tr>
</tbody>
</table>
<ul>
<li>以上两个实体没有体现彼此之间的关联关系</li>
<li>实际上讲师与学科之间肯定是有关联的</li>
</ul>
<p>在多表中增加字段维护一表</p>
<table>
<thead>
<tr>
<th style="text-align:center">老师ID(P)</th>
<th style="text-align:center">姓名</th>
<th style="text-align:center">性别</th>
<th style="text-align:center">年龄</th>
<th style="text-align:center">学科ID</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">1</td>
<td style="text-align:center">张三</td>
<td style="text-align:center">男</td>
<td style="text-align:center">25</td>
<td style="text-align:center">1</td>
</tr>
<tr>
<td style="text-align:center">2</td>
<td style="text-align:center">李四</td>
<td style="text-align:center">女</td>
<td style="text-align:center">26</td>
<td style="text-align:center">2</td>
</tr>
<tr>
<td style="text-align:center">3</td>
<td style="text-align:center">王五</td>
<td style="text-align:center">男</td>
<td style="text-align:center">29</td>
<td style="text-align:center">1</td>
</tr>
</tbody>
</table>
<h4 id="多对多关系">多对多关系</h4>
<ul>
<li>一张表中的一条记录对应另外一个表中多条记录，反过来一样</li>
<li>多对多关系在实体中是最常见的关系</li>
<li>多对多是无法在自身表中维护对应关系（违背1NF），需要通过第三方表来实现多对多关系变成多个多对一关系
<ul>
<li>设计一个中间表，记录两张表之间的对应关系（主属性）</li>
<li>中间表与其他表都是多对一关系</li>
</ul>
</li>
</ul>
<h5 id="示例-7">示例</h5>
<p>老师与学生之间的关系：一个老师教多个学生，一个学生也会被多个老师教，实体关系为多对多。</p>
<p><strong>老师表</strong></p>
<table>
<thead>
<tr>
<th style="text-align:center">老师ID(P)</th>
<th style="text-align:center">姓名</th>
<th style="text-align:center">性别</th>
<th style="text-align:center">年龄</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">1</td>
<td style="text-align:center">张老师</td>
<td style="text-align:center">男</td>
<td style="text-align:center">25</td>
</tr>
<tr>
<td style="text-align:center">2</td>
<td style="text-align:center">李老师</td>
<td style="text-align:center">女</td>
<td style="text-align:center">26</td>
</tr>
<tr>
<td style="text-align:center">3</td>
<td style="text-align:center">王老师</td>
<td style="text-align:center">男</td>
<td style="text-align:center">29</td>
</tr>
</tbody>
</table>
<p><strong>学生表</strong></p>
<table>
<thead>
<tr>
<th style="text-align:center">学生ID(P)</th>
<th style="text-align:center">姓名</th>
<th style="text-align:center">性别</th>
<th style="text-align:center">年龄</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">1</td>
<td style="text-align:center">张三</td>
<td style="text-align:center">男</td>
<td style="text-align:center">20</td>
</tr>
<tr>
<td style="text-align:center">2</td>
<td style="text-align:center">李四</td>
<td style="text-align:center">女</td>
<td style="text-align:center">21</td>
</tr>
<tr>
<td style="text-align:center">3</td>
<td style="text-align:center">王五</td>
<td style="text-align:center">男</td>
<td style="text-align:center">19</td>
</tr>
</tbody>
</table>
<ul>
<li>以上实体没有从结构上体现表之间的关系</li>
</ul>
<p>增加一个中间表</p>
<p><strong>中间表</strong></p>
<table>
<thead>
<tr>
<th style="text-align:center">ID(P)</th>
<th style="text-align:center">学生ID</th>
<th style="text-align:center">老师ID</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">1</td>
<td style="text-align:center">1</td>
<td style="text-align:center">1</td>
</tr>
<tr>
<td style="text-align:center">2</td>
<td style="text-align:center">1</td>
<td style="text-align:center">2</td>
</tr>
<tr>
<td style="text-align:center">3</td>
<td style="text-align:center">1</td>
<td style="text-align:center">3</td>
</tr>
<tr>
<td style="text-align:center">4</td>
<td style="text-align:center">2</td>
<td style="text-align:center">1</td>
</tr>
<tr>
<td style="text-align:center">5</td>
<td style="text-align:center">2</td>
<td style="text-align:center">2</td>
</tr>
<tr>
<td style="text-align:center">6</td>
<td style="text-align:center">2</td>
<td style="text-align:center">3</td>
</tr>
<tr>
<td style="text-align:center">7</td>
<td style="text-align:center">3</td>
<td style="text-align:center">1</td>
</tr>
<tr>
<td style="text-align:center">8</td>
<td style="text-align:center">3</td>
<td style="text-align:center">2</td>
</tr>
<tr>
<td style="text-align:center">9</td>
<td style="text-align:center">3</td>
<td style="text-align:center">3</td>
</tr>
</tbody>
</table>]]></content:encoded>
    </item>
    
  </channel>
</rss>
