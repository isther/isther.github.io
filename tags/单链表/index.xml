<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>单链表 on Ther&#39;s Blog 👋</title>
    <link>https://www.niuwx.cn/tags/%E5%8D%95%E9%93%BE%E8%A1%A8/</link>
    <description>Recent content in 单链表 on Ther&#39;s Blog 👋</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Sat, 30 Jan 2021 17:02:51 +0800</lastBuildDate><atom:link href="https://www.niuwx.cn/tags/%E5%8D%95%E9%93%BE%E8%A1%A8/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>单链表</title>
      <link>https://www.niuwx.cn/posts/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%8D%95%E9%93%BE%E8%A1%A8/</link>
      <pubDate>Sat, 30 Jan 2021 17:02:51 +0800</pubDate>
      
      <guid>https://www.niuwx.cn/posts/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%8D%95%E9%93%BE%E8%A1%A8/</guid>
      <description>简单介绍了一下单链表</description>
      <content:encoded><![CDATA[<p>链表是线性表的链式存储方式，逻辑上相邻的数据在计算机内的存储位置不一定相邻，可以给每个元素附加一个指针域，指向下一个元素的存储位置。</p>
<!-- raw HTML omitted -->
<p>每个结点都包括数据域和指针域，指针域存储下一个结点的地址，因此指针指向的类型也是结点类型。</p>
<p>在顺序表中，想找第i个元素，就可以立即通过L.elem[i-1]找到，称为<em>随机存取</em>方式，而在单链表中，没那么容易，必须从头开始，按顺序一个一个来，一直数到第i个元素，称为<em>顺序存取</em>方式。</p>
<h3 id="头指针和头节点">头指针和头节点</h3>
<h4 id="基本概念">基本概念</h4>
<h5 id="头指针">头指针</h5>
<p><strong>通常使用“头指针”来标识一个链表，如单链表L，头指针为NULL的时表示一个空链表。</strong></p>
<h5 id="头节点">头节点</h5>
<p><strong>在单链表的第一个结点之前附加一个结点，称为头结点。头结点的Data域可以不设任何信息，也可以记录表长等相关信息。</strong></p>
<p><strong>[注意]无论是否有头结点，头指针始终指向链表的第一个结点。如果有头结点，头指针就指向头结点。</strong></p>
<p>空链表
<img loading="lazy" src="https://cdn.jsdelivr.net/gh/28251536/cloudimg@master/img%e7%a9%ba%e9%93%be%e8%a1%a8.jpg" alt=""  />
</p>
<p>单链表
<img loading="lazy" src="https://cdn.jsdelivr.net/gh/28251536/cloudimg@master/img%e5%8d%95%e9%93%be%e8%a1%a8.jpg" alt=""  />
</p>
<h4 id="引入头结点的优势">引入头结点的优势</h4>
<p>链表可以没有头结点，但是必须要有头指针，因为要用头指针来标识一个链表。设链表的头指针为pHead。除了头结点之外，还需要一个指向链表一般元素的指针pNode（因为pHead只能指向表头，不能指向其他元素，故需要另设指针）。</p>
<h5 id="优势1第一个位置的插入删除特别方便">优势1：第一个位置的插入删除特别方便</h5>
<p>若使用头结点，则第1个位置的插入和删除都是对p—&gt;next进行操作，而不用动p本身，而且减少了if else分支，具体的流程为：</p>
<h6 id="插入操作如下">插入操作如下</h6>
<ol>
<li>p指向要插入结点的前驱结点，若要插入的结点为第1个位置，则其前驱结点就是头结点，此时p指向头结点。</li>
<li>让新结点s的next指向p的next，即s—&gt;next = p—&gt;next;</li>
<li>让p—&gt;next指向s，即p—&gt;next = s;</li>
</ol>
<h6 id="删除操作如下">删除操作如下</h6>
<ol>
<li>p指向要删除结点的前驱结点，若要删除的结点为第1个位置，则其前驱结点就是头结点，此时p指向头结点。</li>
<li>让临时指针q指向要删除的结点，即q = p—&gt;next；</li>
<li>让p的next指向要删除结点的下一个结点，即p—&gt;next = q—&gt;next；</li>
<li>释放q的空间，即free(q);</li>
</ol>
<hr>
<p>若没有头结点，在第1个位置插入或删除时，需要动头指针。</p>
<h6 id="插入操作如下-1">插入操作如下</h6>
<ol>
<li>判断要插入的是否是第1个位置，若是需要特殊处理。</li>
<li>若是第1个位置，让新结点s的next指向头指针PtrL。</li>
<li>return s，此时s作为链表的头指针。此时的更新了链表的头指针。</li>
<li>若不是第1个位置，首先找到要插入结点的前驱结点，让p指向这个前驱结点。</li>
<li>让新结点s的next指向p的next，即s—&gt;next = p—&gt;next;</li>
<li>让p—&gt;next指向s，即p—&gt;next = s;</li>
<li>return PtrL，此时PtrL还是作为链表的头指针，没有被修改，但考虑到一致性需要这样写。</li>
</ol>
<h6 id="删除操作如下-1">删除操作如下</h6>
<ol>
<li>判断要删除的是否是第1个位置，若是需要特殊处理。</li>
<li>若是第1个位置，让s指向要删除的结点。首先判断PtrL是否为空，若是直接return NULL;若不为空，则将链表的头结点挪到下一个位置，即PtrL = PtrL—&gt;next；</li>
<li>free(s);然后return PtrL</li>
<li>若不是第1个位置，首先找到要删除结点的前驱结点，让p指向这个前驱结点。</li>
<li>让临时指针q指向要删除的结点，即q = p—&gt;next；</li>
<li>让p的next指向要删除结点的下一个结点，即p—&gt;next = q—&gt;next；</li>
<li>释放q的空间，即free(q);</li>
<li>return PtrL</li>
</ol>
<h5 id="优势2统一空表和非空表的处理">优势2：统一空表和非空表的处理</h5>
<p>若使用头结点，<em>无论表是否为空，头指针都指向头结点，也就是</em>LNode类型*，对于空表和非空表的操作是一致的。</p>
<p>若不使用头结点，<em>当表非空时，头指针指向第1个结点的地址，即</em>LNode类型，但是对于空表，头指针指向的是NULL*，此时空表和非空表的操作是不一致的。</p>
<h3 id="链表的建立">链表的建立</h3>
<h4 id="有头结点链表的建立">有头结点链表的建立</h4>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c" data-lang="c"><span style="color:#75715e">#include</span><span style="color:#75715e">&lt;stdio.h&gt;</span><span style="color:#75715e">
</span><span style="color:#75715e">#include</span><span style="color:#75715e">&lt;stdlib.h&gt;</span><span style="color:#75715e">
</span><span style="color:#75715e">#define OK 1
</span><span style="color:#75715e">#define ERROR 0
</span><span style="color:#75715e"></span><span style="color:#66d9ef">typedef</span> <span style="color:#66d9ef">int</span> elem;
<span style="color:#66d9ef">typedef</span> <span style="color:#66d9ef">int</span> Status;


<span style="color:#66d9ef">typedef</span> <span style="color:#66d9ef">struct</span> LNode{
    elem data;          <span style="color:#75715e">//数据域
</span><span style="color:#75715e"></span>    <span style="color:#66d9ef">struct</span> LNode<span style="color:#f92672">*</span> next; <span style="color:#75715e">//指针域
</span><span style="color:#75715e"></span>}Node, <span style="color:#f92672">*</span>List;
</code></pre></div><hr>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c" data-lang="c">List <span style="color:#a6e22e">HeadCreatList</span>(<span style="color:#66d9ef">int</span> n){<span style="color:#75715e">//带头结点_头插法
</span><span style="color:#75715e"></span>    Node <span style="color:#f92672">*</span>s;
    List head <span style="color:#f92672">=</span> (List)malloc(<span style="color:#66d9ef">sizeof</span>(Node));<span style="color:#75715e">//生成头结点
</span><span style="color:#75715e"></span>    head<span style="color:#f92672">-&gt;</span>next <span style="color:#f92672">=</span> NULL;
    <span style="color:#66d9ef">for</span> (<span style="color:#66d9ef">int</span> i <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>; i <span style="color:#f92672">&lt;</span> n; i<span style="color:#f92672">++</span>){
        s <span style="color:#f92672">=</span> (List)malloc(<span style="color:#66d9ef">sizeof</span>(Node));
        s<span style="color:#f92672">-&gt;</span>data <span style="color:#f92672">=</span> i;
        s<span style="color:#f92672">-&gt;</span>next <span style="color:#f92672">=</span> head<span style="color:#f92672">-&gt;</span>next;
        head<span style="color:#f92672">-&gt;</span>next <span style="color:#f92672">=</span> s;<span style="color:#75715e">//头结点的指针域next指向s结点，使得s成为结点
</span><span style="color:#75715e"></span>    }   
    <span style="color:#66d9ef">return</span> head;
}
</code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c" data-lang="c">List <span style="color:#a6e22e">TailCreatList</span>(<span style="color:#66d9ef">int</span> n){<span style="color:#75715e">//带头结点_尾插法
</span><span style="color:#75715e"></span>    Node <span style="color:#f92672">*</span>s, <span style="color:#f92672">*</span>r;
    List head <span style="color:#f92672">=</span> (List)malloc(<span style="color:#66d9ef">sizeof</span>(Node));
    head<span style="color:#f92672">-&gt;</span>next <span style="color:#f92672">=</span> NULL;
    r <span style="color:#f92672">=</span> head;
    <span style="color:#66d9ef">for</span> (<span style="color:#66d9ef">int</span> i <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>; i <span style="color:#f92672">&lt;</span> n; i<span style="color:#f92672">++</span>){
        s <span style="color:#f92672">=</span> (List)malloc(<span style="color:#66d9ef">sizeof</span>(Node));
        s<span style="color:#f92672">-&gt;</span>data <span style="color:#f92672">=</span> i;
        r<span style="color:#f92672">-&gt;</span>next <span style="color:#f92672">=</span> s;
        r <span style="color:#f92672">=</span> s;
    }

    <span style="color:#66d9ef">if</span>(r<span style="color:#f92672">-&gt;</span>next <span style="color:#f92672">!=</span> NULL){
        r<span style="color:#f92672">-&gt;</span>next <span style="color:#f92672">=</span> NULL;
    }
    
    <span style="color:#66d9ef">return</span> head;
}
</code></pre></div><hr>
<p>下面这个是建立头结点与建立链表分离</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c" data-lang="c">List <span style="color:#a6e22e">CreatHNode</span>(){<span style="color:#75715e">//建立头结点
</span><span style="color:#75715e"></span>    Node <span style="color:#f92672">*</span>s, <span style="color:#f92672">*</span>r;
    List head <span style="color:#f92672">=</span> (List)malloc(<span style="color:#66d9ef">sizeof</span>(Node));
    head<span style="color:#f92672">-&gt;</span>next <span style="color:#f92672">=</span> NULL;
    <span style="color:#66d9ef">return</span> head;
}
</code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c" data-lang="c">Status <span style="color:#a6e22e">HeadList</span>(List head, <span style="color:#66d9ef">int</span> n){<span style="color:#75715e">//头插法
</span><span style="color:#75715e"></span>    Node <span style="color:#f92672">*</span>s;
    <span style="color:#66d9ef">for</span> (<span style="color:#66d9ef">int</span> i <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>; i <span style="color:#f92672">&lt;</span> n; i<span style="color:#f92672">++</span>){
        s <span style="color:#f92672">=</span> (List)malloc(<span style="color:#66d9ef">sizeof</span>(Node));
        s<span style="color:#f92672">-&gt;</span>data <span style="color:#f92672">=</span> i;
        s<span style="color:#f92672">-&gt;</span>next <span style="color:#f92672">=</span> head<span style="color:#f92672">-&gt;</span>next;
        head<span style="color:#f92672">-&gt;</span>next <span style="color:#f92672">=</span> s;<span style="color:#75715e">//头结点的指针域next指向s结点，使得s成为结点
</span><span style="color:#75715e"></span>    }   
    <span style="color:#66d9ef">return</span> OK;
}
</code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c" data-lang="c">Status <span style="color:#a6e22e">TailList</span>(List head, <span style="color:#66d9ef">int</span> n){<span style="color:#75715e">//尾插法
</span><span style="color:#75715e"></span>    Node <span style="color:#f92672">*</span>s, <span style="color:#f92672">*</span>r;
    r <span style="color:#f92672">=</span> head;
    <span style="color:#66d9ef">for</span> (<span style="color:#66d9ef">int</span> i <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>; i <span style="color:#f92672">&lt;</span> n; i<span style="color:#f92672">++</span>){
        s <span style="color:#f92672">=</span> (List)malloc(<span style="color:#66d9ef">sizeof</span>(Node));
        s<span style="color:#f92672">-&gt;</span>data <span style="color:#f92672">=</span> i;
        r<span style="color:#f92672">-&gt;</span>next <span style="color:#f92672">=</span> s;
        r <span style="color:#f92672">=</span> s;
    }

    <span style="color:#66d9ef">if</span>(r<span style="color:#f92672">-&gt;</span>next <span style="color:#f92672">!=</span> NULL){
        r<span style="color:#f92672">-&gt;</span>next <span style="color:#f92672">=</span> NULL;
    }
    <span style="color:#66d9ef">return</span> OK;
}
</code></pre></div><p>为了方便测试，先写出遍历并打印链表的函数</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c" data-lang="c">Status <span style="color:#a6e22e">PrintList</span>(List head){<span style="color:#75715e">//打印链表数据
</span><span style="color:#75715e"></span>    Node <span style="color:#f92672">*</span>t <span style="color:#f92672">=</span> head<span style="color:#f92672">-&gt;</span>next;
    <span style="color:#66d9ef">while</span> (t <span style="color:#f92672">!=</span> NULL){
        printf(<span style="color:#e6db74">&#34;%d &#34;</span>,t<span style="color:#f92672">-&gt;</span>data);
        t <span style="color:#f92672">=</span> t<span style="color:#f92672">-&gt;</span>next;
    }
    printf(<span style="color:#e6db74">&#34;</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>);
    
    <span style="color:#66d9ef">return</span> OK;
}
</code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c" data-lang="c"><span style="color:#66d9ef">void</span> <span style="color:#a6e22e">test</span>(){<span style="color:#75715e">//测试
</span><span style="color:#75715e"></span>    List head;
    <span style="color:#75715e">//head = HeadCreatList(10);
</span><span style="color:#75715e"></span>    head <span style="color:#f92672">=</span> TailCreatList(<span style="color:#ae81ff">10</span>);
    <span style="color:#75715e">//head = CreatHNode();
</span><span style="color:#75715e"></span>    <span style="color:#75715e">//HeadList(head, 10);
</span><span style="color:#75715e"></span>    <span style="color:#75715e">//TailList(head, 10);
</span><span style="color:#75715e"></span>    PrintList(head);

    system(<span style="color:#e6db74">&#34;pause&#34;</span>);
    <span style="color:#66d9ef">return</span>;
}
</code></pre></div><h4 id="无头结点链表的建立">无头结点链表的建立</h4>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c" data-lang="c">List <span style="color:#a6e22e">HeadCreatList</span>(<span style="color:#66d9ef">int</span> n){<span style="color:#75715e">//头插法
</span><span style="color:#75715e"></span>	List head <span style="color:#f92672">=</span> NULL;
	Node <span style="color:#f92672">*</span>p;
	<span style="color:#66d9ef">while</span>(n<span style="color:#f92672">--</span>){
		p <span style="color:#f92672">=</span> (List)malloc(<span style="color:#66d9ef">sizeof</span>(Node));
		p<span style="color:#f92672">-&gt;</span>data <span style="color:#f92672">=</span> n;
		<span style="color:#66d9ef">if</span>(head <span style="color:#f92672">==</span> NULL){
			p<span style="color:#f92672">-&gt;</span>next <span style="color:#f92672">=</span> NULL;
			head <span style="color:#f92672">=</span> p;
		}
		<span style="color:#66d9ef">else</span>{
			p<span style="color:#f92672">-&gt;</span>next <span style="color:#f92672">=</span> head;
			head <span style="color:#f92672">=</span> p;
		}
	}
	<span style="color:#66d9ef">return</span> head;
}

</code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c" data-lang="c">List <span style="color:#a6e22e">TailCreatList</span>(<span style="color:#66d9ef">int</span> n){<span style="color:#75715e">//尾插法
</span><span style="color:#75715e"></span>	List head <span style="color:#f92672">=</span> NULL;
	Node <span style="color:#f92672">*</span>p, <span style="color:#f92672">*</span>q;
	<span style="color:#66d9ef">while</span>(n<span style="color:#f92672">--</span>){
		p <span style="color:#f92672">=</span> (List)malloc(<span style="color:#66d9ef">sizeof</span>(Node));
		p<span style="color:#f92672">-&gt;</span>data <span style="color:#f92672">=</span> n;
		<span style="color:#66d9ef">if</span>(head <span style="color:#f92672">==</span> NULL){
			head <span style="color:#f92672">=</span> p;
		}
		<span style="color:#66d9ef">else</span>{
			q<span style="color:#f92672">-&gt;</span>next <span style="color:#f92672">=</span> p;
		}
		p<span style="color:#f92672">-&gt;</span>next <span style="color:#f92672">=</span> NULL;
		q <span style="color:#f92672">=</span> p;
	}
	<span style="color:#66d9ef">return</span> head;
}
</code></pre></div><p>为了测试，先写出打印链表的函数</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c" data-lang="c">Status <span style="color:#a6e22e">PrintList</span>(List head){<span style="color:#75715e">//打印链表元素
</span><span style="color:#75715e"></span>	<span style="color:#66d9ef">if</span>(head <span style="color:#f92672">==</span> NULL){
		<span style="color:#66d9ef">return</span> ERROR;
    }
    Node <span style="color:#f92672">*</span>t <span style="color:#f92672">=</span> head;
    <span style="color:#66d9ef">while</span>(t <span style="color:#f92672">!=</span> NULL){
        printf(<span style="color:#e6db74">&#34;%d&#34;</span>, t<span style="color:#f92672">-&gt;</span>data);		
        t <span style="color:#f92672">=</span> t<span style="color:#f92672">-&gt;</span>next;
    }
    printf(<span style="color:#e6db74">&#34;%d&#34;</span>);
	<span style="color:#66d9ef">return</span> OK;
}
</code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c" data-lang="c"><span style="color:#66d9ef">void</span> <span style="color:#a6e22e">test</span>(){<span style="color:#75715e">//测试
</span><span style="color:#75715e"></span>	List head;
	<span style="color:#75715e">//head = HeadCreatList(10);
</span><span style="color:#75715e"></span>	head <span style="color:#f92672">=</span> TailCreatList(<span style="color:#ae81ff">10</span>);
	PrintList(head);
	<span style="color:#66d9ef">return</span> ;
}
</code></pre></div><h3 id="链表的各个功能的实现有头结点">链表的各个功能的实现（有头结点）</h3>
<p>上面介绍了有无头结点对于功能实现的影响，接下来先使用有头结点的链表进行</p>
<h4 id="链表元素的添加">链表元素的添加</h4>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c" data-lang="c"><span style="color:#75715e">//链表添加元素（插头）
</span><span style="color:#75715e"></span>Status <span style="color:#a6e22e">HeadInsertList</span>(List head,Node a){
    Node <span style="color:#f92672">*</span>p <span style="color:#f92672">=</span> (List)malloc(<span style="color:#66d9ef">sizeof</span>(Node));
    p<span style="color:#f92672">-&gt;</span>data <span style="color:#f92672">=</span> a.data;
    p<span style="color:#f92672">-&gt;</span>next <span style="color:#f92672">=</span> head<span style="color:#f92672">-&gt;</span>next;
    head<span style="color:#f92672">-&gt;</span>next <span style="color:#f92672">=</span> p;
    <span style="color:#66d9ef">return</span> OK;
}
</code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c" data-lang="c"><span style="color:#75715e">//链表添加元素（插尾）
</span><span style="color:#75715e"></span>Status <span style="color:#a6e22e">TailInsertList</span>(List head,Node a){
    Node <span style="color:#f92672">*</span>p, <span style="color:#f92672">*</span>t, <span style="color:#f92672">*</span>s;
    t <span style="color:#f92672">=</span> head<span style="color:#f92672">-&gt;</span>next;
    p <span style="color:#f92672">=</span> (List)malloc(<span style="color:#66d9ef">sizeof</span>(Node));
    p<span style="color:#f92672">-&gt;</span>data <span style="color:#f92672">=</span> a.data;
    <span style="color:#66d9ef">while</span>(t<span style="color:#f92672">!=</span> NULL){
        s <span style="color:#f92672">=</span> t;
        t <span style="color:#f92672">=</span> t<span style="color:#f92672">-&gt;</span>next;
    }
    s<span style="color:#f92672">-&gt;</span>next <span style="color:#f92672">=</span> p;
    p<span style="color:#f92672">-&gt;</span>next <span style="color:#f92672">=</span> NULL;
    <span style="color:#66d9ef">return</span> OK;
}
</code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c" data-lang="c"><span style="color:#66d9ef">void</span> <span style="color:#a6e22e">test</span>(){<span style="color:#75715e">//测试
</span><span style="color:#75715e"></span>    List head;
    Node a;
    a.data <span style="color:#f92672">=</span> <span style="color:#ae81ff">666</span>;
    head <span style="color:#f92672">=</span> HeadCreatList(<span style="color:#ae81ff">10</span>);

    PrintList(head);

    <span style="color:#75715e">//HeadInsertList(head, a);
</span><span style="color:#75715e"></span>    TailInsertList(head, a);

    PrintList(head);

    system(<span style="color:#e6db74">&#34;pause&#34;</span>);
    <span style="color:#66d9ef">return</span>;
}
</code></pre></div><h4 id="链表元素的插入">链表元素的插入</h4>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c" data-lang="c"><span style="color:#75715e">//链表的插入（插在之前）
</span><span style="color:#75715e"></span>Status <span style="color:#a6e22e">InsertIndexFront</span>(List head,<span style="color:#66d9ef">int</span> i){
    Node <span style="color:#f92672">*</span>p, <span style="color:#f92672">*</span>q, <span style="color:#f92672">*</span>r;
    <span style="color:#66d9ef">int</span> j <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>;
    p <span style="color:#f92672">=</span> head;
    <span style="color:#66d9ef">while</span>(p <span style="color:#f92672">&amp;&amp;</span> j <span style="color:#f92672">&lt;</span> i){
        r <span style="color:#f92672">=</span> p;
        p <span style="color:#f92672">=</span> p<span style="color:#f92672">-&gt;</span>next;
        j<span style="color:#f92672">++</span>;
    }

    <span style="color:#66d9ef">if</span>(<span style="color:#f92672">!</span>p <span style="color:#f92672">||</span> j<span style="color:#f92672">&gt;</span>i){
        <span style="color:#66d9ef">return</span> ERROR;
    }

    q <span style="color:#f92672">=</span> (List)malloc(<span style="color:#66d9ef">sizeof</span>(Node));
    scanf(<span style="color:#e6db74">&#34;%d&#34;</span>,<span style="color:#f92672">&amp;</span>q<span style="color:#f92672">-&gt;</span>data);
    q<span style="color:#f92672">-&gt;</span>next <span style="color:#f92672">=</span> p;
    r<span style="color:#f92672">-&gt;</span>next <span style="color:#f92672">=</span> q;

    <span style="color:#66d9ef">return</span> OK;
}
</code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c" data-lang="c"><span style="color:#75715e">//链表的插入（插在之后）
</span><span style="color:#75715e"></span>Status <span style="color:#a6e22e">InsertIndexBack</span>(List head,<span style="color:#66d9ef">int</span> i){
    Node <span style="color:#f92672">*</span>p,<span style="color:#f92672">*</span>q;
    <span style="color:#66d9ef">int</span> j <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>;
    p <span style="color:#f92672">=</span> head;
    <span style="color:#66d9ef">while</span>(p <span style="color:#f92672">&amp;&amp;</span> j <span style="color:#f92672">&lt;</span> i){
        p <span style="color:#f92672">=</span> p<span style="color:#f92672">-&gt;</span>next;
        j<span style="color:#f92672">++</span>;
    }

    <span style="color:#66d9ef">if</span>(<span style="color:#f92672">!</span>p <span style="color:#f92672">||</span> j <span style="color:#f92672">&gt;</span> i){
        <span style="color:#66d9ef">return</span> ERROR;
    }

    q <span style="color:#f92672">=</span> (List)malloc(<span style="color:#66d9ef">sizeof</span>(Node));
    scanf(<span style="color:#e6db74">&#34;%d&#34;</span>,<span style="color:#f92672">&amp;</span>q<span style="color:#f92672">-&gt;</span>data);
    q<span style="color:#f92672">-&gt;</span>next <span style="color:#f92672">=</span> p<span style="color:#f92672">-&gt;</span>next;
    p<span style="color:#f92672">-&gt;</span>next <span style="color:#f92672">=</span> q;

    <span style="color:#66d9ef">return</span> OK;
}
</code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c" data-lang="c">oid <span style="color:#a6e22e">test</span>(){<span style="color:#75715e">//测试
</span><span style="color:#75715e"></span>        List head;
    head <span style="color:#f92672">=</span> HeadCreatList(<span style="color:#ae81ff">10</span>);

    PrintList(head);

    InsertIndexFront(head,<span style="color:#ae81ff">2</span>);
    <span style="color:#75715e">//InsertIndexBack(head,2);
</span><span style="color:#75715e"></span>
    PrintList(head);

    system(<span style="color:#e6db74">&#34;pause&#34;</span>);
    <span style="color:#66d9ef">return</span>;
}
</code></pre></div><h4 id="链表元素的查找">链表元素的查找</h4>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c" data-lang="c"><span style="color:#75715e">//链表元素的查找
</span><span style="color:#75715e"></span>elem <span style="color:#a6e22e">GetElem</span>(List head, <span style="color:#66d9ef">int</span> index){<span style="color:#75715e">//按序号查找
</span><span style="color:#75715e"></span>    <span style="color:#66d9ef">int</span> j;
    Node<span style="color:#f92672">*</span> p;
    p <span style="color:#f92672">=</span> head<span style="color:#f92672">-&gt;</span>next; <span style="color:#75715e">//p指向第一个数据结点
</span><span style="color:#75715e"></span>    j <span style="color:#f92672">=</span> <span style="color:#ae81ff">1</span>; <span style="color:#75715e">//j为计数器
</span><span style="color:#75715e"></span>    <span style="color:#66d9ef">while</span> (p <span style="color:#f92672">&amp;&amp;</span> j <span style="color:#f92672">&lt;</span> index ){ <span style="color:#75715e">//顺着链表向后扫描，直到p指向第i个元素或p为空
</span><span style="color:#75715e"></span>        p<span style="color:#f92672">=</span>p<span style="color:#f92672">-&gt;</span>next; <span style="color:#75715e">//p指向下一个结点
</span><span style="color:#75715e"></span>        j<span style="color:#f92672">++</span>; <span style="color:#75715e">//计数器j相应加1
</span><span style="color:#75715e"></span>    }
    <span style="color:#66d9ef">if</span> (<span style="color:#f92672">!</span>p <span style="color:#f92672">||</span> j <span style="color:#f92672">&gt;</span> index)
        <span style="color:#66d9ef">return</span> <span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>; <span style="color:#75715e">//i值不合法i＞n或i&lt;=0
</span><span style="color:#75715e"></span>    <span style="color:#66d9ef">return</span> p<span style="color:#f92672">-&gt;</span>data;<span style="color:#75715e">//返回第i个结点的数据域
</span><span style="color:#75715e"></span>
}
</code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c" data-lang="c">elem <span style="color:#a6e22e">GetIndex</span>(List head, <span style="color:#66d9ef">int</span> e) {<span style="color:#75715e">//按值查找
</span><span style="color:#75715e"></span>    <span style="color:#75715e">//在带头结点的单链表L中查找值为e的元素
</span><span style="color:#75715e"></span>    Node<span style="color:#f92672">*</span> p;
    <span style="color:#66d9ef">int</span> index <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>;
    p <span style="color:#f92672">=</span> head<span style="color:#f92672">-&gt;</span>next;

    <span style="color:#66d9ef">while</span> (p <span style="color:#f92672">&amp;&amp;</span> p<span style="color:#f92672">-&gt;</span>data<span style="color:#f92672">!=</span>e){
        <span style="color:#75715e">//顺链域向后扫描，直到p为空或p所指结点的数据域等于e
</span><span style="color:#75715e"></span>        p<span style="color:#f92672">=</span>p<span style="color:#f92672">-&gt;</span>next; <span style="color:#75715e">//p指向下一个结点
</span><span style="color:#75715e"></span>        <span style="color:#f92672">++</span>index;
    }
    <span style="color:#66d9ef">if</span>(<span style="color:#f92672">!</span>p)
        <span style="color:#66d9ef">return</span> <span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>; <span style="color:#75715e">//查找失败p为NULL
</span><span style="color:#75715e"></span>
    <span style="color:#66d9ef">return</span> index;
}
</code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c" data-lang="c"><span style="color:#66d9ef">void</span> <span style="color:#a6e22e">test</span>(){
    List head;
    Node a;
    a.data <span style="color:#f92672">=</span> <span style="color:#ae81ff">666</span>;
    head <span style="color:#f92672">=</span> HeadCreatList(<span style="color:#ae81ff">10</span>);

    PrintList(head);

    printf(<span style="color:#e6db74">&#34;%d</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>,GetElem(head,<span style="color:#ae81ff">6</span>));
    printf(<span style="color:#e6db74">&#34;%d</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>,GetIndex(head,<span style="color:#ae81ff">6</span>));

    system(<span style="color:#e6db74">&#34;pause&#34;</span>);
    <span style="color:#66d9ef">return</span>;
}
</code></pre></div><h4 id="链表元素的删除">链表元素的删除</h4>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c" data-lang="c">Status <span style="color:#a6e22e">DeleteList</span>(List head, <span style="color:#66d9ef">int</span> index) {<span style="color:#75715e">//单链表的删除
</span><span style="color:#75715e"></span>    <span style="color:#75715e">//在带头结点的单链表L中，删除第i个位置
</span><span style="color:#75715e"></span>    Node <span style="color:#f92672">*</span>p, <span style="color:#f92672">*</span>q;
    <span style="color:#66d9ef">int</span> j;
    p <span style="color:#f92672">=</span> head;
    j <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>;
    <span style="color:#66d9ef">while</span>((p<span style="color:#f92672">-&gt;</span>next)<span style="color:#f92672">&amp;&amp;</span>(j <span style="color:#f92672">&lt;</span> index <span style="color:#f92672">-</span> <span style="color:#ae81ff">1</span>)) {<span style="color:#75715e">//查找第i-1个结点，p指向该结点
</span><span style="color:#75715e"></span>        p<span style="color:#f92672">=</span>p<span style="color:#f92672">-&gt;</span>next;
        j<span style="color:#f92672">++</span>;
    }
    <span style="color:#66d9ef">if</span> (<span style="color:#f92672">!</span>(p<span style="color:#f92672">-&gt;</span>next)<span style="color:#f92672">||</span>(j <span style="color:#f92672">&gt;</span> index <span style="color:#f92672">-</span> <span style="color:#ae81ff">1</span>))<span style="color:#75715e">//当i&gt;n或i&lt;1时，删除位置不合理
</span><span style="color:#75715e"></span>        <span style="color:#66d9ef">return</span> ERROR;
    q <span style="color:#f92672">=</span> p<span style="color:#f92672">-&gt;</span>next; <span style="color:#75715e">//临时保存被删结点的地址以备释放空间
</span><span style="color:#75715e"></span>    p<span style="color:#f92672">-&gt;</span>next <span style="color:#f92672">=</span> q<span style="color:#f92672">-&gt;</span>next; <span style="color:#75715e">//改变删除结点前驱结点的指针域
</span><span style="color:#75715e"></span>    free(q); <span style="color:#75715e">//释放被删除结点的空间
</span><span style="color:#75715e"></span>    <span style="color:#66d9ef">return</span> OK;
}
</code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c" data-lang="c"><span style="color:#66d9ef">void</span> <span style="color:#a6e22e">test</span>(){<span style="color:#75715e">//测试
</span><span style="color:#75715e"></span>    List head;
    Node a;
    a.data <span style="color:#f92672">=</span> <span style="color:#ae81ff">666</span>;
    head <span style="color:#f92672">=</span> HeadCreatList(<span style="color:#ae81ff">10</span>);

    PrintList(head);

    DeleteList(head,<span style="color:#ae81ff">4</span>);

    PrintList(head);

    system(<span style="color:#e6db74">&#34;pause&#34;</span>);
    <span style="color:#66d9ef">return</span>;
}
</code></pre></div><h4 id="链表元素的修改">链表元素的修改</h4>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c" data-lang="c"><span style="color:#75715e">//链表元素的修改
</span><span style="color:#75715e"></span>Status <span style="color:#a6e22e">ReverseElem</span>(List head, <span style="color:#66d9ef">int</span> index,<span style="color:#66d9ef">int</span> e){
    <span style="color:#66d9ef">int</span> j;
    Node<span style="color:#f92672">*</span> p;
    p <span style="color:#f92672">=</span> head<span style="color:#f92672">-&gt;</span>next; <span style="color:#75715e">//p指向第一个数据结点
</span><span style="color:#75715e"></span>    j <span style="color:#f92672">=</span> <span style="color:#ae81ff">1</span>; <span style="color:#75715e">//j为计数器
</span><span style="color:#75715e"></span>    <span style="color:#66d9ef">while</span> (p <span style="color:#f92672">&amp;&amp;</span> j <span style="color:#f92672">&lt;</span> index ){ <span style="color:#75715e">//顺着链表向后扫描，直到p指向第i个元素或p为空
</span><span style="color:#75715e"></span>        p<span style="color:#f92672">=</span>p<span style="color:#f92672">-&gt;</span>next; <span style="color:#75715e">//p指向下一个结点
</span><span style="color:#75715e"></span>        j<span style="color:#f92672">++</span>; <span style="color:#75715e">//计数器j相应加1
</span><span style="color:#75715e"></span>    }
    <span style="color:#66d9ef">if</span> (<span style="color:#f92672">!</span>p <span style="color:#f92672">||</span> j <span style="color:#f92672">&gt;</span> index)
        <span style="color:#66d9ef">return</span> ERROR; <span style="color:#75715e">//i值不合法i＞n或i&lt;=0
</span><span style="color:#75715e"></span>    p<span style="color:#f92672">-&gt;</span>data <span style="color:#f92672">=</span> e;
    <span style="color:#66d9ef">return</span> OK;<span style="color:#75715e">//返回第i个结点的数据域
</span><span style="color:#75715e"></span>}
</code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c" data-lang="c"><span style="color:#66d9ef">void</span> <span style="color:#a6e22e">test</span>(){<span style="color:#75715e">//测试
</span><span style="color:#75715e"></span>    List head;
    Node a;
    a.data <span style="color:#f92672">=</span> <span style="color:#ae81ff">666</span>;
    head <span style="color:#f92672">=</span> HeadCreatList(<span style="color:#ae81ff">10</span>);

    PrintList(head);

    ReverseElem(head,<span style="color:#ae81ff">4</span>,<span style="color:#ae81ff">999</span>);

    PrintList(head);

    system(<span style="color:#e6db74">&#34;pause&#34;</span>);
    <span style="color:#66d9ef">return</span>;
}
</code></pre></div><h4 id="链表元素的清空">链表元素的清空</h4>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c" data-lang="c"><span style="color:#75715e">//清空链表
</span><span style="color:#75715e"></span>Status <span style="color:#a6e22e">ClearList</span>(List head)  
{  
    Node<span style="color:#f92672">*</span>p,<span style="color:#f92672">*</span>q;
    <span style="color:#66d9ef">if</span>(head <span style="color:#f92672">==</span> NULL)  
        <span style="color:#66d9ef">return</span> ERROR;  
    p <span style="color:#f92672">=</span> head<span style="color:#f92672">-&gt;</span>next;  
    <span style="color:#66d9ef">while</span>(p<span style="color:#f92672">!=</span>NULL)  
    {  
        q<span style="color:#f92672">=</span>p<span style="color:#f92672">-&gt;</span>next;  
        free(p);  
        p<span style="color:#f92672">=</span>q;  
    }  
    head<span style="color:#f92672">-&gt;</span>next<span style="color:#f92672">=</span>NULL;  
    <span style="color:#66d9ef">return</span> OK;  
}
</code></pre></div><h4 id="链表元素的排序">链表元素的排序</h4>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c" data-lang="c">Status <span style="color:#a6e22e">SwapElem</span>(<span style="color:#66d9ef">int</span> <span style="color:#f92672">*</span>i, <span style="color:#66d9ef">int</span> <span style="color:#f92672">*</span>j){<span style="color:#75715e">//交换数据
</span><span style="color:#75715e"></span>    <span style="color:#66d9ef">int</span>  temp <span style="color:#f92672">=</span> <span style="color:#f92672">*</span>i;
    <span style="color:#f92672">*</span>i <span style="color:#f92672">=</span> <span style="color:#f92672">*</span>j;
    <span style="color:#f92672">*</span>j <span style="color:#f92672">=</span> temp;
    <span style="color:#66d9ef">return</span> OK;
}

<span style="color:#66d9ef">void</span> <span style="color:#a6e22e">SortList</span>(List head){<span style="color:#75715e">//冒泡排序
</span><span style="color:#75715e"></span>    Node<span style="color:#f92672">*</span> p <span style="color:#f92672">=</span> NULL;
    Node<span style="color:#f92672">*</span> q <span style="color:#f92672">=</span> NULL;
    Node<span style="color:#f92672">*</span> t <span style="color:#f92672">=</span> NULL;
    <span style="color:#66d9ef">if</span>(head<span style="color:#f92672">-&gt;</span>next <span style="color:#f92672">==</span> NULL){
        <span style="color:#66d9ef">return</span> ;
    }

    <span style="color:#66d9ef">for</span> ( p <span style="color:#f92672">=</span> head<span style="color:#f92672">-&gt;</span>next; p <span style="color:#f92672">!=</span> NULL; p <span style="color:#f92672">=</span> p<span style="color:#f92672">-&gt;</span>next){
        <span style="color:#66d9ef">for</span> ( q <span style="color:#f92672">=</span> head<span style="color:#f92672">-&gt;</span>next; q<span style="color:#f92672">-&gt;</span>next <span style="color:#f92672">!=</span> NULL; q <span style="color:#f92672">=</span> q<span style="color:#f92672">-&gt;</span>next){
            <span style="color:#66d9ef">if</span>(q<span style="color:#f92672">-&gt;</span>data <span style="color:#f92672">&gt;</span> q<span style="color:#f92672">-&gt;</span>next<span style="color:#f92672">-&gt;</span>data){
                SwapElem(<span style="color:#f92672">&amp;</span>q<span style="color:#f92672">-&gt;</span>data, <span style="color:#f92672">&amp;</span>q<span style="color:#f92672">-&gt;</span>next<span style="color:#f92672">-&gt;</span>data);
            }
        }
    }
}
</code></pre></div><h4 id="无头结点链表的功能实现就不在此赘述所有源码都在githubhttpsgithubcom28251536datanote">无头结点链表的功能实现就不在此赘述，所有源码都在<a href="https://github.com/28251536/DataNote">Github</a></h4>
]]></content:encoded>
    </item>
    
  </channel>
</rss>
