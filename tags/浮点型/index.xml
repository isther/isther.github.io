<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>浮点型 on Ther&#39;s Blog</title>
    <link>https://www.niuwx.cn/tags/%E6%B5%AE%E7%82%B9%E5%9E%8B/</link>
    <description>Recent content in 浮点型 on Ther&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Tue, 20 Jul 2021 10:31:51 +0800</lastBuildDate><atom:link href="https://www.niuwx.cn/tags/%E6%B5%AE%E7%82%B9%E5%9E%8B/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>字段</title>
      <link>https://www.niuwx.cn/posts/mysql/%E5%AD%97%E6%AE%B5/</link>
      <pubDate>Tue, 20 Jul 2021 10:31:51 +0800</pubDate>
      
      <guid>https://www.niuwx.cn/posts/mysql/%E5%AD%97%E6%AE%B5/</guid>
      <description>简单介绍了一下字符集校对集</description>
      <content:encoded><![CDATA[<h3 id="字段类型">字段类型</h3>
<ul>
<li>字段类型在定义表结构时设定</li>
<li>设定好字段类型后，插入数据时必须与字段类型对应，否则数据错误</li>
<li>MySQL有四大数据类型
<ul>
<li>整数类型</li>
<li>小数类型</li>
<li>字符串类型</li>
<li>时间日期类型</li>
</ul>
</li>
</ul>
<h4 id="整数类型">整数类型</h4>
<ul>
<li>MySQL中为了数据空间的有效使用，设定了五种整数类型
<ul>
<li>迷你整型：<code>tinyint</code>，使用<strong>1个字节</strong>存储整数，最多存储256个整数(-128~127)</li>
<li>短整型：<code>smallint</code>，使用<strong>2个字节</strong>存储整数</li>
<li>中整型：<code>mediumint</code>，使用<strong>3个字节</strong>存储整数</li>
<li>标准整型：<code>int</code>，使用<strong>4个字节</strong>存储整数</li>
<li>大整型：<code>bigint</code>，使用<strong>8个字节</strong>存储整数</li>
</ul>
</li>
<li>数值型存储在MySQL中分为有符号（有负数）和无符号（纯正数）</li>
</ul>
<blockquote>
<p>步骤</p>
<ol>
<li>确定数据的格式是存储整数</li>
<li>预估整数的范围，选择合适的整数类型</li>
<li>确定整数是否需要符号（负数区间）</li>
</ol>
</blockquote>
<h5 id="示例">示例</h5>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-mysql" data-lang="mysql"><span style="color:#75715e"># 年龄：无负数，正常年龄不会超过256，迷你整型
</span><span style="color:#75715e"></span><span style="color:#66d9ef">create</span> <span style="color:#66d9ef">table</span> <span style="color:#a6e22e">t1</span>(
	age <span style="color:#66d9ef">tinyint</span> <span style="color:#66d9ef">unsigned</span> <span style="color:#75715e">#unsigned修饰整数，表示无符号
</span><span style="color:#75715e"></span>)<span style="color:#66d9ef">charset</span> utf8;
</code></pre></div><h4 id="显示宽度">显示宽度</h4>
<ul>
<li>显示宽度一般是该整数类型能表示的最大值对应的数字个数（通过desc查看字段表显示）</li>
<li>显示宽度包括符号（如果允许为负数，<code>-</code>负号会增加一个宽度）</li>
<li>显示宽度可以主动控制</li>
<li>显示宽度不会影响类型能表示的最大数值</li>
<li>可以通过<code>zerofill</code>让不够宽度的数值补充到对应宽度：在字段类型后使用<code>zerofill</code></li>
</ul>
<h5 id="示例-1">示例</h5>
<ol>
<li>
<p>有符号和无符号对应的宽度不一样</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-mysql" data-lang="mysql"><span style="color:#66d9ef">create</span> <span style="color:#66d9ef">table</span> <span style="color:#a6e22e">t1</span>(
	a <span style="color:#66d9ef">tinyint</span>,
    b <span style="color:#66d9ef">tinyint</span> <span style="color:#66d9ef">unsigned</span>
)<span style="color:#66d9ef">charset</span> utf8;
</code></pre></div></li>
<li>
<p>可以主动控制显示宽度</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-mysql" data-lang="mysql"><span style="color:#66d9ef">alter</span> <span style="color:#66d9ef">table</span> t1 <span style="color:#66d9ef">add</span> c <span style="color:#66d9ef">tinyint</span>(<span style="color:#ae81ff">2</span>) <span style="color:#66d9ef">unsigned</span>;
</code></pre></div></li>
<li>
<p>显示宽度不影响数据的大小</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-mysql" data-lang="mysql"><span style="color:#66d9ef">insert</span> <span style="color:#66d9ef">into</span> t1 <span style="color:#66d9ef">values</span>(<span style="color:#ae81ff">1</span>,<span style="color:#ae81ff">1</span>,<span style="color:#ae81ff">1</span>);
<span style="color:#66d9ef">insert</span> <span style="color:#66d9ef">into</span> t1 <span style="color:#66d9ef">values</span>(<span style="color:#ae81ff">100</span>,<span style="color:#ae81ff">100</span>,<span style="color:#ae81ff">100</span>);
</code></pre></div></li>
<li>
<p>可以通过<code>zerofill</code>让小于显示宽度的数值前置补充0到显示宽度</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-mysql" data-lang="mysql"><span style="color:#66d9ef">alter</span> <span style="color:#66d9ef">table</span> t1 <span style="color:#66d9ef">add</span> d <span style="color:#66d9ef">tinyint</span>(<span style="color:#ae81ff">2</span>) <span style="color:#66d9ef">zerofill</span>; <span style="color:#75715e"># 0填充只能针对正数
</span><span style="color:#75715e"></span><span style="color:#66d9ef">insert</span> <span style="color:#66d9ef">into</span> t1 <span style="color:#66d9ef">values</span>(<span style="color:#ae81ff">1</span>,<span style="color:#ae81ff">1</span>,<span style="color:#ae81ff">1</span>,<span style="color:#ae81ff">1</span>);
</code></pre></div></li>
</ol>
<h4 id="小数类型浮点型">小数类型（浮点型）</h4>
<ul>
<li>
<p>无法保证精度</p>
</li>
<li>
<p>浮点数又称为精度数据，分为两种</p>
<ul>
<li>单精度：<code>float</code>，使用4个字节存储，精度范围为7~8位有效数字</li>
<li>双精度：<code>double</code>，使用8个字节存储，精度范围位15~16位有效数字</li>
</ul>
</li>
<li>
<p>浮点数超过精度范围会自动进行<strong>四舍五入</strong></p>
</li>
<li>
<p>精度可以指定整数部分和小数部分</p>
<ul>
<li>默认不指定，整数部分不超过最大值，小数部分保留2位</li>
<li>可以指定：float/double（总长度，小数部分长度）</li>
</ul>
</li>
<li>
<p>可以使用科学计数法插入数据</p>
</li>
</ul>
<blockquote>
<p>步骤</p>
<ol>
<li>确定当前设计的字段的数据为不精确型数据（或者小数）</li>
<li>确定数据的大小或者精度的要求范围
<ul>
<li>6~7位有效数字使用float</li>
<li>14~15位有效数字使用double</li>
</ul>
</li>
<li>确定精度的分布：整数部分和小数部分</li>
</ol>
</blockquote>
<h5 id="示例-2">示例</h5>
<ol>
<li>
<p>记录商品的价格</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-mysql" data-lang="mysql"><span style="color:#66d9ef">create</span> <span style="color:#66d9ef">table</span> <span style="color:#a6e22e">t1</span>(
	goods_name <span style="color:#66d9ef">varchar</span>(<span style="color:#ae81ff">20</span>),
    goods_price <span style="color:#66d9ef">float</span>
)<span style="color:#66d9ef">charset</span> utf8;

<span style="color:#66d9ef">insert</span> <span style="color:#66d9ef">into</span> t1 <span style="color:#66d9ef">values</span>(<span style="color:#e6db74">&#34;lala&#34;</span>,<span style="color:#ae81ff">19</span>.<span style="color:#ae81ff">99</span>);  <span style="color:#75715e">#正常保留
</span><span style="color:#75715e"></span><span style="color:#66d9ef">insert</span> <span style="color:#66d9ef">into</span> t1 <span style="color:#66d9ef">values</span>(<span style="color:#e6db74">&#34;haha&#34;</span>,<span style="color:#ae81ff">1999</span>.<span style="color:#ae81ff">9999</span>);   <span style="color:#75715e">#四舍五入成2000
</span></code></pre></div></li>
</ol>
<h4 id="小数类型定点型">小数类型（定点型）</h4>
<ul>
<li>可以保证精度</li>
<li>不固定存储空间存储</li>
<li>每9个数字使用4个字节存储</li>
<li>定点型可以指定整数部分长度和小数部分长度
<ul>
<li>默认不指定：10位有效整数，0位小数</li>
<li>可以指定：decimal(有效数位，小数部分数位)</li>
<li>有效数位不超过65个</li>
</ul>
</li>
<li>数据规范
<ul>
<li>整数部分超出报错</li>
<li>小数部分超出四舍五入</li>
</ul>
</li>
</ul>
<blockquote>
<p>步骤</p>
<ol>
<li>确定小数是否需要保证精度</li>
<li>确定有效数位长度</li>
</ol>
</blockquote>
<h5 id="示例-3">示例</h5>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-mysql" data-lang="mysql"><span style="color:#75715e"># 资产和负债应该都是精确的，小数部分可以到分
</span><span style="color:#75715e"></span><span style="color:#66d9ef">create</span> <span style="color:#66d9ef">table</span> <span style="color:#a6e22e">t1</span>(
	money <span style="color:#66d9ef">decimal</span>(<span style="color:#ae81ff">14</span>,<span style="color:#ae81ff">2</span>),
	bet <span style="color:#66d9ef">decimal</span>(<span style="color:#ae81ff">10</span>,<span style="color:#ae81ff">2</span>)
)<span style="color:#66d9ef">charset</span> utf8;

<span style="color:#66d9ef">insert</span> <span style="color:#66d9ef">into</span> t1 <span style="color:#66d9ef">values</span>(<span style="color:#ae81ff">1111111111</span>.<span style="color:#ae81ff">12</span>,<span style="color:#ae81ff">1111111</span>.<span style="color:#ae81ff">99</span>); 
<span style="color:#66d9ef">insert</span> <span style="color:#66d9ef">into</span> t1 <span style="color:#66d9ef">values</span>(<span style="color:#ae81ff">1111111111</span>.<span style="color:#ae81ff">12</span>,<span style="color:#ae81ff">111111111111111</span>.<span style="color:#ae81ff">99</span>)<span style="color:#75715e"># 整数部分超出报错
</span><span style="color:#75715e"></span><span style="color:#66d9ef">insert</span> <span style="color:#66d9ef">into</span> t1 <span style="color:#66d9ef">values</span>(<span style="color:#ae81ff">1111111111</span>.<span style="color:#ae81ff">12</span>,<span style="color:#ae81ff">1111111</span>.<span style="color:#ae81ff">999</span>)<span style="color:#75715e"># 四舍五入
</span><span style="color:#75715e"></span><span style="color:#66d9ef">insert</span> <span style="color:#66d9ef">into</span> t1 <span style="color:#66d9ef">values</span>(<span style="color:#ae81ff">1111111111</span>.<span style="color:#ae81ff">12</span>,<span style="color:#ae81ff">99999999</span>.<span style="color:#ae81ff">999</span>)<span style="color:#75715e"># 四舍五入导致整数部分超出报错
</span></code></pre></div><h4 id="字符串类型定长型">字符串类型（定长型）</h4>
<ul>
<li>定长型：char(L)，指定固定长度的存储空间存储字符串</li>
<li>定长是指定存储长度</li>
<li>定长的长度是字符数量而不是字节
<ul>
<li>L的最大值是255</li>
<li>实际存储空间：$L字符数*字符集对应字节数$</li>
</ul>
</li>
<li>定长里存储的数据不能超过指定长度</li>
<li>字符串数据使用单引号或者双引号包裹</li>
</ul>
<blockquote>
<p>步骤</p>
<ol>
<li>确定数据类型为字符串（或不能用整数存储的超长数字符号）</li>
<li>确定数据长度基本一致（定长占用固定空间）</li>
<li>确定具体长度</li>
</ol>
</blockquote>
<h5 id="示例-4">示例</h5>
<p>记录个人信息：身份证信息和手机号码</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-mysql" data-lang="mysql"><span style="color:#75715e"># 身份证为固定长度18为
</span><span style="color:#75715e"># 手机号码为11位固定长度
</span><span style="color:#75715e"></span><span style="color:#66d9ef">create</span> <span style="color:#66d9ef">table</span> <span style="color:#a6e22e">t1</span>(
	id_number <span style="color:#66d9ef">char</span>(<span style="color:#ae81ff">18</span>),
    phone_number <span style="color:#66d9ef">char</span>(<span style="color:#ae81ff">11</span>)
)<span style="color:#66d9ef">charset</span> utf8;

<span style="color:#66d9ef">insert</span> <span style="color:#66d9ef">into</span> t1 <span style="color:#66d9ef">values</span>(<span style="color:#e6db74">&#39;142629190001016666&#39;</span>,<span style="color:#e6db74">&#39;12345678910&#39;</span>);
</code></pre></div><h4 id="字符串类型变长型">字符串类型（变长型）</h4>
<ul>
<li>变长型：varchar(L)，根据实际存储的数据变化存储空间</li>
<li>变长型的存储空间是由实际存储数据决定的</li>
<li>变长型的L也是指字符而不是字节
<ul>
<li>L指定的是最大存储的数据长度</li>
<li>L最大值理论是65535</li>
<li>变长需要额外产生1-2个字节，用来记录实际数据的长度
<ul>
<li>数据长度小于256，多1个字节</li>
<li>数据长度大于256，多2个字节</li>
</ul>
</li>
<li>实际存储空间：$实际字符数*字符集对应字节数+记录长度$</li>
</ul>
</li>
<li>变长数据不能超过定义的最大长度</li>
</ul>
<blockquote>
<p>步骤</p>
<ol>
<li>确定数据类型为字符串</li>
<li>确定数据是不规则的数据</li>
<li>确定最大长度</li>
</ol>
</blockquote>
<h5 id="示例-5">示例</h5>
<p>记录个人信息：用户名、密码、姓名、身份证</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-mysql" data-lang="mysql"><span style="color:#75715e"># 用户名不确定长度，最长不超过50个字符
</span><span style="color:#75715e"># 密码不确定长度，最长不超过16个字符
</span><span style="color:#75715e"># 姓名不确定长度，最长不超过10个字符
</span><span style="color:#75715e"># 身份证固定长度，18个字符
</span><span style="color:#75715e"></span><span style="color:#66d9ef">create</span> <span style="color:#66d9ef">table</span> <span style="color:#a6e22e">t1</span>(
	<span style="color:#f92672">`</span>username<span style="color:#f92672">`</span> <span style="color:#66d9ef">varchar</span>(<span style="color:#ae81ff">50</span>),
	<span style="color:#f92672">`</span>password<span style="color:#f92672">`</span> <span style="color:#66d9ef">varchar</span>(<span style="color:#ae81ff">16</span>),
 	<span style="color:#f92672">`</span>name<span style="color:#f92672">`</span> <span style="color:#66d9ef">varchar</span>(<span style="color:#ae81ff">10</span>),
    <span style="color:#f92672">`</span>id_number<span style="color:#f92672">`</span> <span style="color:#66d9ef">char</span>(<span style="color:#ae81ff">18</span>)
)<span style="color:#66d9ef">charset</span> utf8;
<span style="color:#75715e"># 使用``包括字段名，防止字段名与关键字重名导致报错
</span><span style="color:#75715e"></span>
<span style="color:#66d9ef">insert</span> <span style="color:#66d9ef">into</span> t1 <span style="color:#66d9ef">values</span>(<span style="color:#e6db74">&#39;username&#39;</span>,<span style="color:#e6db74">&#39;password&#39;</span>,<span style="color:#e6db74">&#39;name&#39;</span>,<span style="color:#e6db74">&#39;14262919000101666&#39;</span>);
</code></pre></div><h4 id="字符串类型文本字符串">字符串类型（文本字符串）</h4>
<ul>
<li><code>test/blob</code>，专门用来存储较长的文本</li>
<li>文本字符串包含两大类
<ul>
<li><code>test</code>：普通字符
<ul>
<li><code>tinytext</code>：迷你文本，不超过$2^8-1$个字符</li>
<li><code>text</code>：普通文本，不超过$2^{16}-1$个字符</li>
<li><code>mediumtext</code>：中型文本，不超过$2^{24}-1$个字符</li>
<li><code>longtext</code>：长文本，不超过$2^{32}-1$个字符（4G）</li>
</ul>
</li>
<li><code>blob</code>：二进制字符（与text类似）
<ul>
<li><code>tinyblob</code></li>
<li><code>blob</code></li>
<li><code>mediumblob</code></li>
<li><code>longblob</code></li>
</ul>
</li>
</ul>
</li>
<li>文本字符串会自动根据文本长度选择合适的具体类型</li>
<li>一般在文本超过255个字符时，都会使用text（blob现在极少使用）</li>
</ul>
<blockquote>
<p>步骤</p>
<ol>
<li>确定类型为文本文件</li>
<li>确定数据长度可能超过255个字符</li>
<li>使用text</li>
</ol>
</blockquote>
<h5 id="示例-6">示例</h5>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-mysql" data-lang="mysql"><span style="color:#75715e"># 标题一般不会超过50个字符，varchar
</span><span style="color:#75715e"># 作者一般不会超过10个字符，varchar
</span><span style="color:#75715e"># 内容通常都很长，使用text
</span><span style="color:#75715e"></span><span style="color:#66d9ef">create</span> <span style="color:#66d9ef">table</span> <span style="color:#a6e22e">t1</span>(
	author <span style="color:#66d9ef">varchar</span>(<span style="color:#ae81ff">10</span>),
    title <span style="color:#66d9ef">varchar</span>(<span style="color:#ae81ff">50</span>),
    content <span style="color:#66d9ef">text</span>
)<span style="color:#66d9ef">charset</span> utf8;

<span style="color:#66d9ef">insert</span> <span style="color:#66d9ef">into</span> t1 <span style="color:#66d9ef">values</span>(<span style="color:#e6db74">&#39;佚名&#39;</span>,<span style="color:#e6db74">&#39;给家长的一封信&#39;</span>,<span style="color:#e6db74">&#39;某某某的爸爸/妈妈...您好...&#39;</span>);
</code></pre></div><h4 id="字符串类型枚举">字符串类型（枚举）</h4>
<ul>
<li>一种映射存储方式，以较小的空间存储较多的数据</li>
<li>枚举是在定义时确定可能出现的问题</li>
<li>枚举在定义后数据只能出现定义时其中的一种</li>
<li>枚举类似一种单选框</li>
<li>枚举使用1-2个字节存储，最多可以设计65535个选项</li>
<li>枚举实际存储是使用数值，映射对应的元素数据，从1开始</li>
<li>枚举语法：<code>enum(元素1,元素2....元素N)</code></li>
</ul>
<blockquote>
<p>步骤</p>
<ol>
<li>确定数据是固定的几种数据之一</li>
<li>使用枚举穷举相应的元素</li>
<li>数据存储只能选择穷举中的元素之一</li>
</ol>
</blockquote>
<h5 id="示例-7">示例</h5>
<ol>
<li>
<p>记录人群类型：小朋友，少年，青年，中年，老年，每个人只属于一种类型题</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-mysql" data-lang="mysql"><span style="color:#66d9ef">create</span> <span style="color:#66d9ef">table</span> <span style="color:#a6e22e">t1</span>(
	type <span style="color:#66d9ef">enum</span>(<span style="color:#e6db74">&#39;小朋友&#39;</span>,<span style="color:#e6db74">&#39;少年&#39;</span>,<span style="color:#e6db74">&#39;青年&#39;</span>,<span style="color:#e6db74">&#39;中年&#39;</span>,<span style="color:#e6db74">&#39;老年&#39;</span>)
)<span style="color:#66d9ef">charset</span> utf8;

<span style="color:#66d9ef">insert</span> <span style="color:#66d9ef">into</span> t1 <span style="color:#66d9ef">values</span>(<span style="color:#e6db74">&#39;少年&#39;</span>);
<span style="color:#66d9ef">insert</span> <span style="color:#66d9ef">into</span> t1 <span style="color:#66d9ef">values</span>(<span style="color:#e6db74">&#39;神仙&#39;</span>);<span style="color:#75715e"># error 不存在的数据不能插入
</span></code></pre></div></li>
<li>
<p><code>enum</code>是建立映射关系，然后实际存储是数字，数值是按照元素顺序从1开始</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-mysql" data-lang="mysql"><span style="color:#75715e"># 可以使用字段 + 0来判断数据具体的效果（字符串转数值为0）
</span><span style="color:#75715e"></span><span style="color:#66d9ef">select</span> type,type <span style="color:#f92672">+</span> <span style="color:#ae81ff">0</span> <span style="color:#66d9ef">from</span> t1;
<span style="color:#66d9ef">insert</span> <span style="color:#66d9ef">into</span> t1 <span style="color:#66d9ef">values</span>(<span style="color:#ae81ff">5</span>);
</code></pre></div></li>
</ol>
<h4 id="字符串类型集合">字符串类型（集合）</h4>
<ul>
<li><code>set</code>，一种映射存储方式，以较小的空间存储较多的数据</li>
<li>集合是在定义时确定可能出现的元素进行穷举</li>
<li>集合在定义后数据只能出现定义时其中的元素（可以是多个）</li>
<li>集合类似一种多选框</li>
<li>集合使用1-8个字节存储数据，最多可以设计64个元素</li>
<li>集合实际存储是使用数值（二进制位），映射对应的元素数据，每个元素对应一个比特位</li>
<li>集合语法：<code>set(元素1,元素2,.....元素N)</code></li>
</ul>
<blockquote>
<p>步骤</p>
<ol>
<li>确定数据是固定的几种数据集合</li>
<li>使用集合穷极相应的元素</li>
<li>数据存储只能选择穷举中的元素组合</li>
</ol>
</blockquote>
<h5 id="示例-8">示例</h5>
<ol>
<li>
<p>记录个人的球类爱好，有篮球，足球，羽毛球，网球，乒乓球，排球，台球，冰球</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-mysql" data-lang="mysql"><span style="color:#75715e"># 爱好可以使多种
</span><span style="color:#75715e"></span><span style="color:#66d9ef">create</span> <span style="color:#66d9ef">table</span> <span style="color:#a6e22e">t1</span>(
	hobby <span style="color:#66d9ef">set</span>(<span style="color:#e6db74">&#39;足球&#39;</span>,<span style="color:#e6db74">&#39;篮球&#39;</span>,<span style="color:#e6db74">&#39;羽毛球&#39;</span>,<span style="color:#e6db74">&#39;网球&#39;</span>,<span style="color:#e6db74">&#39;乒乓球&#39;</span>,<span style="color:#e6db74">&#39;排球&#39;</span>,<span style="color:#e6db74">&#39;台球&#39;</span>,<span style="color:#e6db74">&#39;冰球&#39;</span>)
)<span style="color:#66d9ef">charset</span> utf8;

<span style="color:#66d9ef">insert</span> <span style="color:#66d9ef">into</span> t1 <span style="color:#66d9ef">values</span>(<span style="color:#e6db74">&#39;足球&#39;</span>);
<span style="color:#66d9ef">insert</span> <span style="color:#66d9ef">into</span> t1 <span style="color:#66d9ef">values</span>(<span style="color:#e6db74">&#39;足球,台球,篮球&#39;</span>);
</code></pre></div></li>
<li>
<p>集合建立的也是映射关系，映射方式是每个元素对应一个字节的比特位， 从左边开始第一个对应字节从右边开始的第一位</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-mysql" data-lang="mysql"><span style="color:#75715e"># 可以通过字段 + 0的方式查看存储的具体数值
</span><span style="color:#75715e"></span><span style="color:#66d9ef">select</span> hobby,hobby <span style="color:#f92672">+</span> <span style="color:#ae81ff">0</span> <span style="color:#66d9ef">from</span> t1;

<span style="color:#75715e"># 可以通过插入数值来组合元素，但是需要确定对应的十进制转换成二进制有对应的元素对应
</span><span style="color:#75715e"></span><span style="color:#66d9ef">insert</span> <span style="color:#66d9ef">into</span> t1 <span style="color:#a6e22e">value</span>(<span style="color:#ae81ff">8</span>); <span style="color:#75715e"># 网球
</span></code></pre></div></li>
</ol>
<h4 id="时间如期类型年">时间如期类型（年）</h4>
<ul>
<li><code>year</code>，MySQL中用来存储年份的类型</li>
<li>MySQL中使用1个字节存储年份</li>
<li><code>year</code>能够表示的范围是1901-2155（256年）
<ul>
<li>year的特殊值是0000</li>
</ul>
</li>
<li><code>year</code>允许用户是用两种方式设计（效果一样）
<ul>
<li><code>year</code></li>
<li><code>year(4)</code></li>
</ul>
</li>
</ul>
<blockquote>
<p>步骤</p>
<ol>
<li>确定存储的数据是年份</li>
<li>确定年份的区间在1901-2155之间</li>
<li>使用year类型</li>
</ol>
</blockquote>
<h5 id="示例-9">示例</h5>
<ol>
<li>
<p>记录个人的出生年份</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-mysql" data-lang="mysql"><span style="color:#66d9ef">create</span> <span style="color:#66d9ef">table</span> <span style="color:#a6e22e">t1</span>(
	y1 <span style="color:#66d9ef">year</span>,
    y2 <span style="color:#66d9ef">year</span>(<span style="color:#ae81ff">4</span>)
)<span style="color:#66d9ef">charset</span> utf8;

<span style="color:#66d9ef">insert</span> <span style="color:#66d9ef">into</span> t1 <span style="color:#66d9ef">values</span>(<span style="color:#ae81ff">1901</span>,<span style="color:#ae81ff">2155</span>);
<span style="color:#66d9ef">insert</span> <span style="color:#66d9ef">into</span> t1 <span style="color:#66d9ef">values</span>(<span style="color:#ae81ff">1800</span>); <span style="color:#75715e"># error 不在范围内
</span></code></pre></div></li>
<li>
<p>year类型允许使用2位数来插入，系统自动匹配对应的年份</p>
<ul>
<li>69以前：系统默认加2000</li>
<li>69以后：系统默认加1900</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-mysql" data-lang="mysql"><span style="color:#66d9ef">insert</span> <span style="color:#66d9ef">into</span> t1 <span style="color:#66d9ef">values</span>(<span style="color:#ae81ff">69</span>,<span style="color:#ae81ff">70</span>);
<span style="color:#66d9ef">insert</span> <span style="color:#66d9ef">into</span> t1 <span style="color:#66d9ef">values</span>(<span style="color:#ae81ff">68</span>,<span style="color:#ae81ff">71</span>);
</code></pre></div></li>
<li>
<p>year类型的特殊值是0000，可以使用00或者0000插入</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-mysql" data-lang="mysql"><span style="color:#66d9ef">insert</span> <span style="color:#66d9ef">into</span> <span style="color:#a6e22e">t1</span>(<span style="color:#ae81ff">00</span>,<span style="color:#ae81ff">0000</span>);
</code></pre></div></li>
</ol>
<h4 id="时间日期类型时间戳">时间日期类型（时间戳）</h4>
<ul>
<li><code>timestamp</code>，基于格林威治时间的时间记录</li>
<li>MySQL中时间戳表现形式不是秒数，而是年月日时分秒格式
<ul>
<li>YYYY-MM-DD HH:II::SS</li>
<li>YYYYMMDDHHIISS</li>
</ul>
</li>
<li>timestamp使用4个字节存储</li>
<li>timestamp的特点是所对应的记录不论哪个字段被更新，该字段都会更新到当前时间</li>
</ul>
<blockquote>
<p>步骤</p>
<ol>
<li>确定类型需要使用年月日时分秒格式</li>
<li>确定当前字段需要记录数据的最近更新时间</li>
<li>使用timestamp时间戳</li>
</ol>
</blockquote>
<h5 id="示例-10">示例</h5>
<ol>
<li>
<p>记录商品库存的最后更新时间</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-mysql" data-lang="mysql"><span style="color:#66d9ef">create</span> <span style="color:#66d9ef">table</span> <span style="color:#a6e22e">t1</span>(
	goods_name <span style="color:#66d9ef">varchar</span>(<span style="color:#ae81ff">10</span>),
    goods_inventory <span style="color:#66d9ef">int</span> <span style="color:#66d9ef">unsigned</span>,
    change_time <span style="color:#66d9ef">timestamp</span>
)<span style="color:#66d9ef">charset</span> utf8;

<span style="color:#66d9ef">insert</span> <span style="color:#66d9ef">into</span> t1 <span style="color:#66d9ef">values</span>(<span style="color:#e6db74">&#39;大白菜&#39;</span>,<span style="color:#ae81ff">100</span>,<span style="color:#e6db74">&#39;1971-01-01 00:00:00&#39;</span>);
<span style="color:#66d9ef">insert</span> <span style="color:#66d9ef">into</span> t1 <span style="color:#66d9ef">values</span>(<span style="color:#e6db74">&#39;小白菜&#39;</span>,<span style="color:#ae81ff">100</span>,<span style="color:#e6db74">&#39;19700101000000&#39;</span>);
</code></pre></div></li>
<li>
<p>timestamp会在自己所在的记录任何位置被修改时自动更新时间</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-mysql" data-lang="mysql"><span style="color:#66d9ef">update</span> t1 <span style="color:#66d9ef">set</span> goods_inventory <span style="color:#f92672">=</span> <span style="color:#ae81ff">90</span>;
</code></pre></div><p>在MySQL8后，取消了timestamp的默认自动更新，如果需要使用，需要额外使用属性：<code>on update current_timestamp</code></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-mysql" data-lang="mysql"><span style="color:#66d9ef">alter</span> <span style="color:#66d9ef">table</span> t1 <span style="color:#66d9ef">add</span> c_time <span style="color:#66d9ef">timestamp</span> <span style="color:#66d9ef">on</span> <span style="color:#66d9ef">update</span> <span style="color:#66d9ef">current_timestamp</span>
<span style="color:#66d9ef">update</span> t1 <span style="color:#66d9ef">set</span> goods_inventory <span style="color:#f92672">=</span> <span style="color:#ae81ff">80</span>;
</code></pre></div></li>
</ol>
<h4 id="时间日期类型日期">时间日期类型（日期）</h4>
<ul>
<li><code>date</code>，用来记录年月日信息</li>
<li>使用3 个字节存储数据</li>
<li>存储日期的格式为：<code>YYYY-MM-DD</code></li>
<li>存储的范围是：<code>1001-01-01</code>到<code>9999-12-31</code> 目前来说，还够用</li>
</ul>
<blockquote>
<p>步骤</p>
<ol>
<li>确定存储的数据格式为日期格式</li>
<li>确定数据格式为YYYY-MM-DD</li>
<li>使用date类型</li>
</ol>
</blockquote>
<h5 id="示例-11">示例</h5>
<p>记录个人生日</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-mysql" data-lang="mysql"><span style="color:#66d9ef">create</span> <span style="color:#66d9ef">table</span> <span style="color:#a6e22e">t1</span>(
	<span style="color:#f92672">`</span>name<span style="color:#f92672">`</span> <span style="color:#66d9ef">varchar</span>(<span style="color:#ae81ff">10</span>),
	birth <span style="color:#66d9ef">date</span>
)<span style="color:#66d9ef">charset</span> utf8;

<span style="color:#66d9ef">insert</span> <span style="color:#66d9ef">into</span> t1 <span style="color:#66d9ef">values</span>(<span style="color:#e6db74">&#39;张三&#39;</span>,<span style="color:#e6db74">&#39;2000-01-01&#39;</span>);
<span style="color:#66d9ef">insert</span> <span style="color:#66d9ef">into</span> t1 <span style="color:#66d9ef">values</span>(<span style="color:#e6db74">&#39;李四&#39;</span>,<span style="color:#e6db74">&#39;2021-07-23&#39;</span>);
</code></pre></div><h4 id="时间日期类型日期时间">时间日期类型（日期时间）</h4>
<ul>
<li><code>datetime</code>，用来综合存储日期和时间</li>
<li>存储格式为：<code>YYYY-MM-DD HH:II:SS</code></li>
<li>存储区间为：<code>1000-01-01 00:00:00</code>到<code>9999-12-31 23:59:59</code></li>
</ul>
<blockquote>
<p>步骤</p>
<ol>
<li>确定存储的时间格式包含日期</li>
<li>确定存储格式为：YYYY-MM-DD HH:II:SS</li>
<li>使用datetime</li>
</ol>
</blockquote>
<h5 id="示例-12">示例</h5>
<p>记录个人具体的出生时间</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-mysql" data-lang="mysql"><span style="color:#66d9ef">create</span> <span style="color:#66d9ef">table</span> <span style="color:#a6e22e">t1</span>(
	<span style="color:#f92672">`</span>name<span style="color:#f92672">`</span> <span style="color:#66d9ef">varchar</span>(<span style="color:#ae81ff">10</span>),
	birth <span style="color:#66d9ef">datetime</span>
)<span style="color:#66d9ef">charset</span> utf8;

<span style="color:#66d9ef">insert</span> <span style="color:#66d9ef">into</span> t1
</code></pre></div><h4 id="时间日期类型时间">时间日期类型（时间）</h4>
<ul>
<li><code>time</code>，用来记录时间或者时间段</li>
<li>数据范围是：<code>-838:59:59</code>-<code>838:59:59</code></li>
<li>数据插入的格式分为两种
<ul>
<li>时间格式：HH:II:SS</li>
<li>时间段格式：D HH:II:SS</li>
</ul>
</li>
</ul>
<blockquote>
<p>步骤</p>
<ol>
<li>确定要存储的类型是时间格式</li>
<li>确定格式类型为time能表示的格式</li>
<li>使用time存储</li>
</ol>
</blockquote>
<h5 id="示例-13">示例</h5>
<p>记录用户登录的具体时间</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-mysql" data-lang="mysql"><span style="color:#75715e"># 具体登录时间可以使用时间戳（包含年月日时分秒信息）
</span><span style="color:#75715e"># 也可以使用时间datetime格式，或者date+time双字段格式
</span><span style="color:#75715e"></span><span style="color:#66d9ef">create</span> <span style="color:#66d9ef">table</span> <span style="color:#a6e22e">t1</span>(
	login_time1 <span style="color:#66d9ef">int</span> <span style="color:#66d9ef">unsigned</span>,
    login_time2 <span style="color:#66d9ef">datetime</span>,
    login_date <span style="color:#66d9ef">date</span>,
    login_time3 <span style="color:#66d9ef">time</span>
)<span style="color:#66d9ef">charset</span> utf8;

<span style="color:#66d9ef">insert</span> <span style="color:#66d9ef">into</span> t1 <span style="color:#66d9ef">values</span>(<span style="color:#ae81ff">12345678</span>,<span style="color:#e6db74">&#39;2000-12-12 12:12:12&#39;</span>,<span style="color:#e6db74">&#39;2000-12-12&#39;</span>,<span style="color:#e6db74">&#39;12:12:12&#39;</span>);
<span style="color:#66d9ef">insert</span> <span style="color:#66d9ef">into</span> t1 <span style="color:#66d9ef">values</span>(<span style="color:#ae81ff">1234567</span>,<span style="color:#e6db74">&#39;2000-12-12 12:12:12&#39;</span>,<span style="color:#e6db74">&#39;2000-12-12&#39;</span>,<span style="color:#e6db74">&#39;3 12:12:12&#39;</span>);
</code></pre></div><h3 id="属性">属性</h3>
<h4 id="属性作用">属性作用</h4>
<ul>
<li>建立在字段类型之后，对字段除类型之外的其他约束</li>
<li>属性是在定义表字段的时候针对每个字段进行属性设定</li>
<li>设定好的属性可以通过查看表字段desc进行查看</li>
<li>数据在进行增删改（写）操作时需要在满足字段要求的同时满足属性的要求</li>
</ul>
<h5 id="示例-14">示例</h5>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-mysql" data-lang="mysql"><span style="color:#66d9ef">desc</span> t1;

<span style="color:#75715e"># Field: 字段名字
</span><span style="color:#75715e"># Type: 数据类型
</span><span style="color:#75715e"># Null: 是否为空（属性）
</span><span style="color:#75715e"># Key: 索引类型（属性）
</span><span style="color:#75715e"># Default: 默认值（属性）
</span><span style="color:#75715e"># Extra: 额外属性
</span></code></pre></div><h4 id="null属性">NULL属性</h4>
<ul>
<li>NULL：数据是否允许为空</li>
<li>不为空设计： Not Null</li>
<li>数据为空一般不具备运算和分析价值，所以通常数据都需要设定Not Null（不区分大小写）</li>
</ul>
<blockquote>
<p>步骤</p>
<ol>
<li>数据类型确定</li>
<li>数据是否为空确定
<ul>
<li>允许为空：不考虑Null属性</li>
<li>不允许为空：Not Null</li>
</ul>
</li>
</ol>
</blockquote>
<h5 id="示例-15">示例</h5>
<ol>
<li>
<p>用户信息表：用户名、密码、姓名、年龄、注册时间</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-mysql" data-lang="mysql"><span style="color:#66d9ef">create</span> <span style="color:#66d9ef">table</span> <span style="color:#a6e22e">t1</span>(
	<span style="color:#f92672">`</span>username<span style="color:#f92672">`</span> <span style="color:#66d9ef">varchar</span>(<span style="color:#ae81ff">50</span>) <span style="color:#66d9ef">not</span> <span style="color:#66d9ef">null</span>,
	<span style="color:#f92672">`</span>password<span style="color:#f92672">`</span> <span style="color:#66d9ef">char</span>(<span style="color:#ae81ff">32</span>) <span style="color:#66d9ef">not</span> <span style="color:#66d9ef">null</span>,
	name <span style="color:#66d9ef">varchar</span>(<span style="color:#ae81ff">20</span>),
	age <span style="color:#66d9ef">tinyint</span> <span style="color:#66d9ef">unsigned</span>,
	reg_time <span style="color:#66d9ef">int</span> <span style="color:#66d9ef">unsigned</span> <span style="color:#66d9ef">not</span> <span style="color:#66d9ef">null</span>
)<span style="color:#66d9ef">charset</span> utf8;
</code></pre></div></li>
<li>
<p>如果字段不能为空（Not Null），那么数据就必须满足条件：插入时不能为空的字段就需要主动提供值</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-mysql" data-lang="mysql"><span style="color:#66d9ef">insert</span> <span style="color:#66d9ef">into</span> t1 <span style="color:#66d9ef">values</span>(<span style="color:#e6db74">&#39;username&#39;</span>,<span style="color:#e6db74">&#39;password&#39;</span>,<span style="color:#e6db74">&#39;张三&#39;</span>,<span style="color:#ae81ff">20</span>,<span style="color:#ae81ff">123456789</span>);

<span style="color:#75715e"># 错误操作，reg_time不能为空，而默认为空，
</span><span style="color:#75715e"></span><span style="color:#66d9ef">insert</span> <span style="color:#66d9ef">into</span> <span style="color:#a6e22e">t1</span> (<span style="color:#f92672">`</span>username<span style="color:#f92672">`</span>,<span style="color:#f92672">`</span>password<span style="color:#f92672">`</span>) <span style="color:#66d9ef">values</span>(<span style="color:#e6db74">&#39;username&#39;</span>,<span style="color:#e6db74">&#39;password&#39;</span>);
</code></pre></div></li>
</ol>
<h4 id="defaule属性">Defaule属性</h4>
<ul>
<li><code>defaule</code>，在设计表字段的时候给定默认数据，在后续字段操作（数据新增）的时候系统没有检测到字段有数据的时候自动使用的值</li>
<li>默认值在字段设计的时候使用（默认值需要满足数据类型规范）</li>
<li>默认值通常设计的字段容易出现的数据
<ul>
<li>一般字段的默认值默认是Null</li>
</ul>
</li>
<li>默认值触发
<ul>
<li>在系统进行数据插入时自动检测触发</li>
<li>主动使用<code>default</code>关键字触发默认值</li>
</ul>
</li>
</ul>
<blockquote>
<p>步骤</p>
<ol>
<li>确定字段的数据类型</li>
<li>确定字段可能出现的数据会是某个经常出现的值</li>
<li>设定默认值</li>
<li>触发默认值
<ul>
<li>自动触发：数据插入时不给字段复制</li>
<li>手动触发：数据插入时主动使用default关键字</li>
</ul>
</li>
</ol>
</blockquote>
<h5 id="示例-16">示例</h5>
<ol>
<li>
<p>用户开户：银行卡账号、身份证号码、姓名、账户余额</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-mysql" data-lang="mysql"><span style="color:#66d9ef">create</span> <span style="color:#66d9ef">table</span> <span style="color:#a6e22e">t1</span>(
	account <span style="color:#66d9ef">varchar</span>(<span style="color:#ae81ff">19</span>) <span style="color:#66d9ef">not</span> <span style="color:#66d9ef">null</span>,
	id_card <span style="color:#66d9ef">char</span>(<span style="color:#ae81ff">18</span>) <span style="color:#66d9ef">not</span> <span style="color:#66d9ef">null</span>,
    <span style="color:#f92672">`</span>name<span style="color:#f92672">`</span> <span style="color:#66d9ef">varchar</span>(<span style="color:#ae81ff">20</span>) <span style="color:#66d9ef">not</span> <span style="color:#66d9ef">null</span>,
    money <span style="color:#66d9ef">decimal</span>(<span style="color:#ae81ff">16</span>,<span style="color:#ae81ff">2</span>) <span style="color:#66d9ef">default</span> <span style="color:#ae81ff">0</span>.<span style="color:#ae81ff">00</span> <span style="color:#66d9ef">not</span> <span style="color:#66d9ef">null</span>
)<span style="color:#66d9ef">charset</span> utf8;
</code></pre></div></li>
<li>
<p>默认值触发</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-mysql" data-lang="mysql"><span style="color:#75715e"># 默认触发
</span><span style="color:#75715e"></span><span style="color:#66d9ef">insert</span> <span style="color:#66d9ef">into</span> <span style="color:#a6e22e">t1</span> (account,id_card,name)
<span style="color:#66d9ef">values</span>(<span style="color:#e6db74">&#39;123456789101112131&#39;</span>,<span style="color:#e6db74">&#39;142629200001011010&#39;</span>,<span style="color:#e6db74">&#39;张三&#39;</span>);

<span style="color:#75715e"># 主动触发
</span><span style="color:#75715e"></span><span style="color:#66d9ef">insert</span> <span style="color:#66d9ef">into</span> t1 <span style="color:#66d9ef">values</span>(<span style="color:#e6db74">&#39;123456789101112131&#39;</span>,<span style="color:#e6db74">&#39;142629200001010101&#39;</span>,<span style="color:#e6db74">&#39;李四&#39;</span>,<span style="color:#66d9ef">default</span>);
</code></pre></div></li>
</ol>
<h4 id="主键">主键</h4>
<ul>
<li><code>primary key</code>，用来保证整张表中对应的字段永远不会出现重复数据</li>
<li>主键在一张表中只能有一个</li>
<li>主键的另外一个特性是能够提升主键字段作为查询条件的效率(索引)</li>
<li>主键不能为空：Not Null(默认)</li>
<li>逻辑主键：数据没有具体业务意义，纯粹是一种数值数据
<ul>
<li>逻辑主键通常是整数：int</li>
<li>逻辑主键目的是方便检索和数据安全（不暴露数据真实信息）</li>
</ul>
</li>
<li>复合主键：多个字段共同组成不能重复的数据
<ul>
<li><code>primary key(字段1,字段2,...)</code></li>
<li>联合主键使用不多，一般也不会超过2个字段</li>
</ul>
</li>
</ul>
<blockquote>
<p>步骤</p>
<ol>
<li>确定字段数据具有唯一性</li>
<li>确定数据不允许为空</li>
<li>确定数据会经常用于数据检索</li>
<li>使用主键<code>primary key</code></li>
<li>一般每张表都会使用一个逻辑主键(id)</li>
</ol>
</blockquote>
<h5 id="示例-17">示例</h5>
<ol>
<li>
<p>银行账户信息：账户、姓名、余额</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-mysql" data-lang="mysql"><span style="color:#75715e"># 银行账户具有唯一性，不可重复，不可为空
</span><span style="color:#75715e"></span><span style="color:#66d9ef">create</span> <span style="color:#66d9ef">table</span> <span style="color:#a6e22e">t1</span>(
	account <span style="color:#66d9ef">varchar</span>(<span style="color:#ae81ff">17</span>) <span style="color:#66d9ef">primary</span> <span style="color:#66d9ef">key</span>,
	<span style="color:#f92672">`</span>name<span style="color:#f92672">`</span> <span style="color:#66d9ef">varchar</span>(<span style="color:#ae81ff">20</span>) <span style="color:#66d9ef">not</span> <span style="color:#66d9ef">null</span>,
	money <span style="color:#66d9ef">decimal</span>(<span style="color:#ae81ff">16</span>,<span style="color:#ae81ff">2</span>) <span style="color:#66d9ef">not</span> <span style="color:#66d9ef">null</span> <span style="color:#66d9ef">default</span> <span style="color:#ae81ff">0</span>.<span style="color:#ae81ff">00</span>
)<span style="color:#66d9ef">charset</span> utf8;

<span style="color:#75715e"># 复合主键
</span><span style="color:#75715e"></span><span style="color:#66d9ef">create</span> <span style="color:#66d9ef">table</span> <span style="color:#a6e22e">t2</span>(
	account <span style="color:#66d9ef">varchar</span>(<span style="color:#ae81ff">17</span>),
	<span style="color:#f92672">`</span>name<span style="color:#f92672">`</span> <span style="color:#66d9ef">varchar</span>(<span style="color:#ae81ff">20</span>),
	money <span style="color:#66d9ef">decimal</span>(<span style="color:#ae81ff">16</span>,<span style="color:#ae81ff">2</span>) <span style="color:#66d9ef">not</span> <span style="color:#66d9ef">null</span> <span style="color:#66d9ef">default</span> <span style="color:#ae81ff">0</span>.<span style="color:#ae81ff">00</span>,
	<span style="color:#66d9ef">primary</span> <span style="color:#66d9ef">key</span>(account,<span style="color:#f92672">`</span>name<span style="color:#f92672">`</span>)
)<span style="color:#66d9ef">charset</span> utf8;

<span style="color:#75715e"># 一般使用逻辑主键
</span><span style="color:#75715e"></span><span style="color:#66d9ef">create</span> <span style="color:#66d9ef">table</span> <span style="color:#a6e22e">t3</span>(
	id <span style="color:#66d9ef">int</span> <span style="color:#66d9ef">unsigned</span> <span style="color:#66d9ef">primary</span> <span style="color:#66d9ef">key</span>,
	account <span style="color:#66d9ef">varchar</span>(<span style="color:#ae81ff">17</span>) <span style="color:#66d9ef">not</span> <span style="color:#66d9ef">null</span>,
	<span style="color:#f92672">`</span>name<span style="color:#f92672">`</span> <span style="color:#66d9ef">varchar</span>(<span style="color:#ae81ff">20</span>) <span style="color:#66d9ef">not</span> <span style="color:#66d9ef">null</span>,
	money <span style="color:#66d9ef">decimal</span>(<span style="color:#ae81ff">16</span>,<span style="color:#ae81ff">2</span>) <span style="color:#66d9ef">not</span> <span style="color:#66d9ef">null</span> <span style="color:#66d9ef">default</span> <span style="color:#ae81ff">0</span>.<span style="color:#ae81ff">00</span>
)<span style="color:#66d9ef">charset</span> utf8;
</code></pre></div></li>
<li>
<p>主键数据不允许重复</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-mysql" data-lang="mysql"><span style="color:#66d9ef">insert</span> <span style="color:#66d9ef">into</span> t3 <span style="color:#66d9ef">values</span>(<span style="color:#ae81ff">1</span>,<span style="color:#e6db74">&#39;123456&#39;</span>,<span style="color:#e6db74">&#39;1&#39;</span>,<span style="color:#66d9ef">default</span>);

<span style="color:#75715e"># 错误 主键1已经存在
</span><span style="color:#75715e"></span><span style="color:#66d9ef">insert</span> <span style="color:#66d9ef">into</span> t3 <span style="color:#66d9ef">values</span>(<span style="color:#ae81ff">1</span>,<span style="color:#e6db74">&#39;456789&#39;</span>,<span style="color:#e6db74">&#39;2&#39;</span>,<span style="color:#66d9ef">default</span>);

<span style="color:#75715e"># 联合主键就是联合字段加起来不重复即可
</span><span style="color:#75715e"></span><span style="color:#66d9ef">insert</span> <span style="color:#66d9ef">into</span> t2 <span style="color:#66d9ef">values</span>(<span style="color:#e6db74">&#39;123456&#39;</span>,<span style="color:#e6db74">&#39;Tom&#39;</span>,<span style="color:#66d9ef">default</span>);
<span style="color:#66d9ef">insert</span> <span style="color:#66d9ef">into</span> t2 <span style="color:#66d9ef">values</span>(<span style="color:#e6db74">&#39;456789&#39;</span>,<span style="color:#e6db74">&#39;Tom&#39;</span>,<span style="color:#66d9ef">default</span>);
</code></pre></div></li>
</ol>
<h4 id="主键管理">主键管理</h4>
<ul>
<li>在创建表并且已经有数据后的维护</li>
<li>删除主键</li>
<li>追加主键</li>
<li>修改主键（先删后增）</li>
</ul>
<h5 id="示例-18">示例</h5>
<ol>
<li>
<p>删除主键：主键只有一个，所以删除语法也比较特殊</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-mysql" data-lang="mysql"><span style="color:#66d9ef">alter</span> <span style="color:#66d9ef">table</span> t1 <span style="color:#66d9ef">drop</span> <span style="color:#66d9ef">primary</span> <span style="color:#66d9ef">key</span>;
</code></pre></div></li>
<li>
<p>后期新增主键：如果是针对业务主键需要保证字段数据没有Null数据且没有数据重复（一般主键都会在表创建时维护好）</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-mysql" data-lang="mysql"><span style="color:#66d9ef">alter</span> <span style="color:#66d9ef">table</span> t1 <span style="color:#66d9ef">add</span> <span style="color:#66d9ef">primary</span> <span style="color:#66d9ef">key</span>(account,name);
</code></pre></div></li>
</ol>
<h4 id="自增长属性">自增长属性</h4>
<ul>
<li><code>auto_increment</code>，被修饰的字段在新增时，自动增长的数据</li>
<li>自增长数据可以理解为一种默认值，如果主动给值，那么自动增长不会触发</li>
<li>自增长有两个变量控制
<ul>
<li>初始值：<code>auto_increment_offset</code>，默认为1</li>
<li>步长：<code>auto_increment_increment</code>，默认为1</li>
<li>查看自增长控制：<code>show variables like 'auto_increment'</code></li>
</ul>
</li>
</ul>
<blockquote>
<p>步骤</p>
<ol>
<li>确定数据类型为整形</li>
<li>确定数据需要有规则的变化
<ul>
<li>从1开始</li>
<li>每次增长1</li>
<li>可以调整，但是通常有固定规则</li>
</ul>
</li>
<li>必须有索引字段（索引主键）</li>
<li>使用<code>auto_increment</code></li>
</ol>
</blockquote>
<h5 id="示例-19">示例</h5>
<ol>
<li>
<p>记录学生信息：学号和姓名</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-mysql" data-lang="mysql"><span style="color:#75715e"># 学生信息：学号自动增长
</span><span style="color:#75715e"></span><span style="color:#66d9ef">create</span> <span style="color:#66d9ef">table</span> <span style="color:#a6e22e">t1</span>(
	id <span style="color:#66d9ef">int</span> <span style="color:#66d9ef">primary</span> <span style="color:#66d9ef">key</span> <span style="color:#66d9ef">auto_increment</span>,
	stu_no <span style="color:#66d9ef">int</span>(<span style="color:#ae81ff">8</span>) <span style="color:#66d9ef">zerofill</span> <span style="color:#66d9ef">not</span> <span style="color:#66d9ef">null</span>,
	stu_name <span style="color:#66d9ef">varchar</span>(<span style="color:#ae81ff">20</span>) <span style="color:#66d9ef">not</span> <span style="color:#66d9ef">null</span>
)<span style="color:#66d9ef">charset</span> utf8;
</code></pre></div></li>
<li>
<p>触发自增长</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-mysql" data-lang="mysql"><span style="color:#75715e"># 使用自增长 可以使用NULL或者default触发
</span><span style="color:#75715e"></span><span style="color:#66d9ef">insert</span> <span style="color:#66d9ef">into</span> t1 <span style="color:#66d9ef">values</span>(<span style="color:#66d9ef">null</span>,<span style="color:#ae81ff">1</span>,<span style="color:#e6db74">&#39;Jim&#39;</span>);
<span style="color:#66d9ef">insert</span> <span style="color:#66d9ef">into</span> t1 <span style="color:#66d9ef">values</span>(<span style="color:#66d9ef">default</span>,<span style="color:#ae81ff">2</span>,<span style="color:#e6db74">&#39;Tom&#39;</span>);

<span style="color:#75715e">#主动控制：自增长的值会从当前最大的值开始自动增长
</span><span style="color:#75715e"></span><span style="color:#66d9ef">insert</span> <span style="color:#66d9ef">into</span> t1 <span style="color:#66d9ef">values</span>(<span style="color:#ae81ff">5</span>,<span style="color:#ae81ff">3</span>,<span style="color:#e6db74">&#39;张三&#39;</span>);
<span style="color:#66d9ef">insert</span> <span style="color:#66d9ef">into</span> <span style="color:#a6e22e">t1</span> (stu_no,stu_name) <span style="color:#66d9ef">values</span>(<span style="color:#ae81ff">4</span>,<span style="color:#e6db74">&#39;李四&#39;</span>);
</code></pre></div></li>
</ol>
<h4 id="自增长管理">自增长管理</h4>
<ul>
<li>修改表中自增长的值：让下次自增长按照指定的值开始</li>
<li>修改自增长的控制：调整自增长的变化</li>
</ul>
<h5 id="示例-20">示例</h5>
<ol>
<li>
<p>修改表中自增长的值，跳过一些值，直接从下次开始按照新的目标出现</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-mysql" data-lang="mysql"><span style="color:#66d9ef">alter</span> <span style="color:#66d9ef">table</span> t1 <span style="color:#66d9ef">auto_increment</span> <span style="color:#f92672">=</span> <span style="color:#ae81ff">50</span>;
<span style="color:#66d9ef">insert</span> <span style="color:#66d9ef">into</span> <span style="color:#a6e22e">t1</span> (stu_no,stu_name) <span style="color:#66d9ef">values</span>(<span style="color:#ae81ff">1</span>,<span style="color:#e6db74">&#39;测试1&#39;</span>);

<span style="color:#75715e"># 奇数保留原值，偶数自动加一（可能）  由于数据不稳定
</span></code></pre></div></li>
<li>
<p>修改自增长控制：步长和起始值（修改针对的是整个数据库，而非单张表）</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-mysql" data-lang="mysql"><span style="color:#66d9ef">set</span> auto_increment_increment <span style="color:#f92672">=</span> <span style="color:#ae81ff">2</span>;<span style="color:#75715e"># 当前用户当前连接有效（局部）
</span><span style="color:#75715e"></span><span style="color:#66d9ef">set</span> <span style="color:#f92672">@@</span>auto_increment_incremtn <span style="color:#f92672">=</span> <span style="color:#ae81ff">2</span>;<span style="color:#75715e"># 所有用户一定有效（全局）
</span></code></pre></div></li>
</ol>
<h4 id="唯一键">唯一键</h4>
<ul>
<li><code>unique key</code>，用来维护数据的唯一性</li>
<li>一个表中可以有多个唯一键</li>
<li>唯一键与主键的区别在于唯一键允许数据为Null（且数量不限）</li>
<li>唯一键与主键一样，可以提升字段数据当做条件查询的效率（索引）</li>
<li>复合唯一键：多个字段共同组成
<ul>
<li><code>unique key(字段1,字段2,字段3,...)</code></li>
<li>一般不会出现，最多2个字段组成</li>
</ul>
</li>
</ul>
<blockquote>
<p>步骤</p>
<ol>
<li>确定数据列具有唯一性</li>
<li>确定数据列不用作为主键</li>
<li>确定数据会经常用于检索条件</li>
<li>该字段是否允许数据为空</li>
<li>使用唯一键</li>
</ol>
</blockquote>
<h5 id="示例-21">示例</h5>
<ol>
<li>
<p>用户表：用户名唯一，而且经常作为查询条件</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-mysql" data-lang="mysql"><span style="color:#66d9ef">create</span> <span style="color:#66d9ef">table</span> <span style="color:#a6e22e">t1</span>(
    id <span style="color:#66d9ef">int</span> <span style="color:#66d9ef">primary</span> <span style="color:#66d9ef">key</span> <span style="color:#66d9ef">auto_increment</span>,
    <span style="color:#f92672">`</span>username<span style="color:#f92672">`</span> <span style="color:#66d9ef">varchar</span>(<span style="color:#ae81ff">50</span>) <span style="color:#66d9ef">unique</span>,
    <span style="color:#f92672">`</span>password<span style="color:#f92672">`</span> <span style="color:#66d9ef">char</span>(<span style="color:#ae81ff">32</span>) <span style="color:#66d9ef">not</span> <span style="color:#66d9ef">null</span>
)<span style="color:#66d9ef">charset</span> utf8;

<span style="color:#66d9ef">insert</span> <span style="color:#66d9ef">into</span> t1 <span style="color:#66d9ef">values</span>(<span style="color:#66d9ef">null</span>,<span style="color:#e6db74">&#39;username&#39;</span>,<span style="color:#e6db74">&#39;password&#39;</span>);
<span style="color:#66d9ef">insert</span> <span style="color:#66d9ef">into</span> t1 <span style="color:#66d9ef">values</span>(<span style="color:#66d9ef">null</span>,<span style="color:#66d9ef">Null</span>,<span style="color:#e6db74">&#39;password&#39;</span>);
<span style="color:#66d9ef">insert</span> <span style="color:#66d9ef">into</span> t1 <span style="color:#66d9ef">values</span>(<span style="color:#66d9ef">null</span>,<span style="color:#66d9ef">Null</span>,<span style="color:#e6db74">&#39;password&#39;</span>);

<span style="color:#75715e"># 错误
</span><span style="color:#75715e"></span><span style="color:#66d9ef">insert</span> <span style="color:#66d9ef">into</span> t1 <span style="color:#66d9ef">values</span>(<span style="color:#66d9ef">null</span>,<span style="color:#e6db74">&#39;username&#39;</span>,<span style="color:#e6db74">&#39;password&#39;</span>);
</code></pre></div></li>
<li>
<p>学生成绩表：一个学生只能有一个学科成绩，但是可以有多个学科</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-mysql" data-lang="mysql"><span style="color:#75715e"># 学号和学科编号共同组成唯一
</span><span style="color:#75715e"></span><span style="color:#66d9ef">create</span> <span style="color:#66d9ef">table</span> <span style="color:#a6e22e">t1</span>(
	id <span style="color:#66d9ef">int</span> <span style="color:#66d9ef">primary</span> <span style="color:#66d9ef">key</span> <span style="color:#66d9ef">auto_increment</span>,
    stu_name <span style="color:#66d9ef">varchar</span>(<span style="color:#ae81ff">20</span>) <span style="color:#66d9ef">not</span> <span style="color:#66d9ef">null</span>,
    course <span style="color:#66d9ef">varchar</span>(<span style="color:#ae81ff">20</span>) <span style="color:#66d9ef">not</span> <span style="color:#66d9ef">null</span>,
    score <span style="color:#66d9ef">decimal</span> (<span style="color:#ae81ff">5</span>,<span style="color:#ae81ff">2</span>),
    <span style="color:#66d9ef">unique</span> <span style="color:#66d9ef">key</span>(stu_name,course)
)<span style="color:#66d9ef">charset</span> utf8;

<span style="color:#66d9ef">insert</span> <span style="color:#66d9ef">into</span> t1 <span style="color:#66d9ef">values</span>(<span style="color:#66d9ef">null</span>,<span style="color:#e6db74">&#39;Jim&#39;</span>,<span style="color:#e6db74">&#39;Math&#39;</span>,<span style="color:#ae81ff">60</span>);
<span style="color:#66d9ef">insert</span> <span style="color:#66d9ef">into</span> t1 <span style="color:#66d9ef">values</span>(<span style="color:#66d9ef">null</span>,<span style="color:#e6db74">&#39;Jim&#39;</span>,<span style="color:#e6db74">&#39;English&#39;</span>,<span style="color:#ae81ff">60</span>);
</code></pre></div></li>
</ol>
<h4 id="唯一键管理">唯一键管理</h4>
<ul>
<li>删除唯一键：一张表中不止一个唯一键，所以删除方式相对麻烦：<code>alter table 表名 drop index 唯一键名字</code></li>
<li>新增唯一键：<code>alter table 表名 add unique key(字段列表)</code></li>
</ul>
<h5 id="示例-22">示例</h5>
<ol>
<li>
<p>删除表中已有的唯一键</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-mysql" data-lang="mysql"><span style="color:#66d9ef">alter</span> <span style="color:#66d9ef">table</span> t1 <span style="color:#66d9ef">drop</span> <span style="color:#66d9ef">index</span> <span style="color:#f92672">`</span>stu_name<span style="color:#f92672">`</span>;
</code></pre></div></li>
<li>
<p>追加唯一键</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-mysql" data-lang="mysql"><span style="color:#66d9ef">alter</span> <span style="color:#66d9ef">table</span> t1 <span style="color:#66d9ef">add</span> <span style="color:#66d9ef">unique</span> <span style="color:#66d9ef">key</span> <span style="color:#f92672">`</span>stu_course<span style="color:#f92672">`</span> (stu_name,course);
</code></pre></div></li>
</ol>
<h4 id="comment-属性">comment 属性</h4>
<ul>
<li><code>comment</code>，是用文字描述字段的作用的</li>
<li>comment代表的内容是对字段的描述
<ul>
<li>方便以后自己了解字段的作用</li>
<li>方便团队了解字段的作用</li>
</ul>
</li>
<li>描述如果涉及到字符集（中文）一定要在创建表之前设计好客户端字符集（否则会出现乱码）</li>
</ul>
<h5 id="示例-23">示例</h5>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-mysql" data-lang="mysql"><span style="color:#66d9ef">create</span> <span style="color:#66d9ef">table</span> <span style="color:#a6e22e">t1</span>(
	id <span style="color:#66d9ef">int</span> <span style="color:#66d9ef">primary</span> <span style="color:#66d9ef">key</span> <span style="color:#66d9ef">auto_increment</span> comment <span style="color:#e6db74">&#39;id逻辑主键自增长&#39;</span>
)<span style="color:#66d9ef">charset</span> utf8;
</code></pre></div><h3 id="数据库记录长度">数据库记录长度</h3>
<ul>
<li>MySQL中规定一条记录所占用的存储长度最长不超过65535个字节</li>
<li>记录长度是表中所有字段预计占用的长度之和</li>
<li>所有字段只要允许Null存在，系统就会一个字节存储Null</li>
<li>因为MySQL记录长度的存在，varchar永远达不到理论长度</li>
<li>一般数据长度超过255个字符都会使用<code>text/blob</code>进行存储</li>
</ul>]]></content:encoded>
    </item>
    
  </channel>
</rss>
