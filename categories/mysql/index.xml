<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>MySQL on Ther&#39;s Blog</title>
    <link>https://www.niuwx.cn/categories/mysql/</link>
    <description>Recent content in MySQL on Ther&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Fri, 30 Jul 2021 10:02:51 +0800</lastBuildDate><atom:link href="https://www.niuwx.cn/categories/mysql/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>MySQL安全管理</title>
      <link>https://www.niuwx.cn/posts/mysql/mysql%E5%AE%89%E5%85%A8%E7%AE%A1%E7%90%86/</link>
      <pubDate>Fri, 30 Jul 2021 10:02:51 +0800</pubDate>
      
      <guid>https://www.niuwx.cn/posts/mysql/mysql%E5%AE%89%E5%85%A8%E7%AE%A1%E7%90%86/</guid>
      <description>简单介绍了一下数据库</description>
      <content:encoded><![CDATA[<p>结构-&gt;执行-&gt;管理-&gt;用户</p>
<h3 id="外键约束">外键约束</h3>
<p><strong>概念</strong>：<code>foreign key</code>，表中<strong>指向外部主键</strong>的字段</p>
<ul>
<li>外键必须要通过语法指定才能称之为外键
<ul>
<li><code>[constraint 外键名] foreign key (当前表字段名) references 外部表(主键字段)</code></li>
</ul>
</li>
<li>外键构成条件
<ul>
<li>外键字段必须与对应表的主键字段类型一致</li>
<li>外键字段本身要求是一个索引（创建外键会自动生成一个索引）</li>
</ul>
</li>
</ul>
<h5 id="示例">示例</h5>
<ol>
<li>
<p>创建专业表和学生表，学生表中的专业id指向专业表id</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-mysql" data-lang="mysql"><span style="color:#75715e"># 专业表
</span><span style="color:#75715e"></span><span style="color:#66d9ef">CREATE</span> <span style="color:#66d9ef">table</span> <span style="color:#a6e22e">t1</span> (
	id <span style="color:#66d9ef">int</span> <span style="color:#66d9ef">primary</span> <span style="color:#66d9ef">key</span> <span style="color:#66d9ef">AUTO_INCREMENT</span>,
	name <span style="color:#66d9ef">varchar</span>(<span style="color:#ae81ff">50</span>) <span style="color:#66d9ef">not</span> <span style="color:#66d9ef">null</span> <span style="color:#66d9ef">unique</span>
) <span style="color:#66d9ef">charset</span> utf8;

<span style="color:#75715e"># 学生表
</span><span style="color:#75715e"></span><span style="color:#66d9ef">create</span> <span style="color:#66d9ef">table</span> <span style="color:#a6e22e">t2</span>(
	id <span style="color:#66d9ef">int</span> <span style="color:#66d9ef">primary</span> <span style="color:#66d9ef">key</span> <span style="color:#66d9ef">AUTO_INCREMENT</span>,
	name <span style="color:#66d9ef">varchar</span>(<span style="color:#ae81ff">50</span>) <span style="color:#66d9ef">not</span> <span style="color:#66d9ef">null</span>,
	c_id <span style="color:#66d9ef">int</span> comment <span style="color:#e6db74">&#39;指向专业表t1的主键&#39;</span>
	<span style="color:#66d9ef">constraint</span> <span style="color:#f92672">`</span>c_id<span style="color:#f92672">`</span> <span style="color:#66d9ef">FOREIGN</span> <span style="color:#66d9ef">KEY</span>(c_id) <span style="color:#66d9ef">REFERENCES</span> <span style="color:#a6e22e">t1</span>(id)
) <span style="color:#66d9ef">charset</span> utf8;
</code></pre></div><p>外键可以不指定名字，系统会自动生成</p>
</li>
</ol>
<h4 id="外键约束-1">外键约束</h4>
<ul>
<li>当表建立外键关系后，外键就会对主表和子表里的数据产生约束效果</li>
<li>外键约束的是写操作（默认操作）
<ul>
<li>新增：子表插入的数据对应的外键必须在主表存在</li>
<li>修改：主表的记录如果在子表存在，那么主表的主键不能修改（其他字段可修改）</li>
<li>删除：主表的记录如果在子表存在，那么主表的主键不能删除</li>
</ul>
</li>
<li>外键约束控制：外键可以定义时控制外键的约束作用
<ul>
<li>控制类型
<ul>
<li><code>on update</code>：父表更新时子表的表现</li>
<li><code>on delete</code>：父表删除时子表的表现</li>
</ul>
</li>
<li>控制方式
<ul>
<li><code>cascade</code>：级联操作，父表操作后自编跟随操作</li>
<li><code>set null</code>：置空操作，父表操作后，子表关联的外键字段置空</li>
<li><code>restrict/no action</code>：严格模式，不允许父表操作（默认）</li>
</ul>
</li>
</ul>
</li>
</ul>
<h5 id="示例-1">示例</h5>
<ol>
<li>
<p>子表不能插入主表不存在的数据</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-mysql" data-lang="mysql"><span style="color:#66d9ef">insert</span> <span style="color:#66d9ef">into</span> t2 <span style="color:#66d9ef">values</span>(<span style="color:#66d9ef">null</span>,<span style="color:#e6db74">&#39;Tony&#39;</span>,<span style="color:#ae81ff">2</span>);<span style="color:#75715e"># 此时父表中还没有id=2的记录，错误
</span><span style="color:#75715e"></span>
<span style="color:#66d9ef">insert</span> <span style="color:#66d9ef">into</span> t1 <span style="color:#66d9ef">values</span>(<span style="color:#66d9ef">null</span>,<span style="color:#e6db74">&#39;English&#39;</span>);
<span style="color:#66d9ef">insert</span> <span style="color:#66d9ef">into</span> t2 <span style="color:#66d9ef">values</span>(<span style="color:#66d9ef">null</span>,<span style="color:#e6db74">&#39;Peny&#39;</span>,<span style="color:#ae81ff">1</span>);
</code></pre></div></li>
<li>
<p>默认的外键产生后，主键不能更新被关联的主键字段或者删除被关联的主键记录</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-mysql" data-lang="mysql"><span style="color:#75715e"># 错误
</span><span style="color:#75715e"></span><span style="color:#66d9ef">update</span> t1 <span style="color:#66d9ef">set</span> id <span style="color:#f92672">=</span> <span style="color:#ae81ff">2</span>;
<span style="color:#66d9ef">delete</span> <span style="color:#66d9ef">from</span> t1 <span style="color:#66d9ef">where</span> id <span style="color:#f92672">=</span> <span style="color:#ae81ff">1</span>;
</code></pre></div></li>
<li>
<p>限制外键约束，一般使用更新级联，删除置空</p>
<ul>
<li><code>on update cascade</code>：更新级联</li>
<li><code>on delete set null</code>：删除置空</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-mysql" data-lang="mysql"><span style="color:#66d9ef">create</span> <span style="color:#66d9ef">table</span> <span style="color:#a6e22e">t3</span>(
    id <span style="color:#66d9ef">int</span> <span style="color:#66d9ef">primary</span> <span style="color:#66d9ef">key</span> <span style="color:#66d9ef">AUTO_INCREMENT</span>,
    name <span style="color:#66d9ef">varchar</span>(<span style="color:#ae81ff">50</span>) <span style="color:#66d9ef">not</span> <span style="color:#66d9ef">null</span> <span style="color:#66d9ef">unique</span>
)<span style="color:#66d9ef">charset</span> utf8;

<span style="color:#66d9ef">create</span> <span style="color:#66d9ef">table</span> <span style="color:#a6e22e">t4</span>(
    id <span style="color:#66d9ef">int</span> <span style="color:#66d9ef">primary</span> <span style="color:#66d9ef">key</span> <span style="color:#66d9ef">AUTO_INCREMENT</span>,
    name <span style="color:#66d9ef">varchar</span>(<span style="color:#ae81ff">50</span>) <span style="color:#66d9ef">not</span> <span style="color:#66d9ef">null</span>,
    c_id <span style="color:#66d9ef">int</span> , <span style="color:#75715e"># 如果允许置空，就不能not null
</span><span style="color:#75715e"></span>    <span style="color:#66d9ef">FOREIGN</span> <span style="color:#66d9ef">KEY</span>(c_id) <span style="color:#66d9ef">references</span> <span style="color:#a6e22e">t3</span>(id) <span style="color:#66d9ef">on</span> <span style="color:#66d9ef">update</span> <span style="color:#66d9ef">cascade</span> <span style="color:#66d9ef">on</span> <span style="color:#66d9ef">delete</span> <span style="color:#66d9ef">set</span> <span style="color:#66d9ef">null</span>
)<span style="color:#66d9ef">charset</span> utf8;

<span style="color:#66d9ef">insert</span> <span style="color:#66d9ef">into</span> t3 <span style="color:#66d9ef">values</span>(<span style="color:#66d9ef">null</span>,<span style="color:#e6db74">&#39;Chinese&#39;</span>),(<span style="color:#66d9ef">null</span>,<span style="color:#e6db74">&#39;Computer&#39;</span>);
<span style="color:#66d9ef">insert</span> <span style="color:#66d9ef">into</span> t4 <span style="color:#66d9ef">values</span>(<span style="color:#66d9ef">null</span>,<span style="color:#e6db74">&#39;Tony&#39;</span>,<span style="color:#ae81ff">1</span>),(<span style="color:#66d9ef">null</span>,<span style="color:#e6db74">&#39;Lily&#39;</span>,<span style="color:#ae81ff">2</span>);
</code></pre></div><ul>
<li>子表依然不允许插入父表不存在的外键</li>
<li>但是可以插入外键为Null的数据</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-mysql" data-lang="mysql"><span style="color:#75715e"># 错误
</span><span style="color:#75715e"></span><span style="color:#66d9ef">insert</span> <span style="color:#66d9ef">into</span> t2 <span style="color:#66d9ef">values</span>(<span style="color:#66d9ef">null</span>,<span style="color:#e6db74">&#39;Lilei&#39;</span>,<span style="color:#ae81ff">3</span>);

<span style="color:#66d9ef">insert</span> <span style="color:#66d9ef">into</span> t2 <span style="color:#a6e22e">vlaues</span>(<span style="color:#66d9ef">null</span>,<span style="color:#e6db74">&#39;Lilei&#39;</span>,<span style="color:#66d9ef">null</span>);
</code></pre></div><ul>
<li>父表的更新（主键）会让关联的外键自动级联更新</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-mysql" data-lang="mysql"><span style="color:#66d9ef">update</span> t1 <span style="color:#66d9ef">set</span> id  <span style="color:#f92672">=</span> <span style="color:#ae81ff">3</span> <span style="color:#66d9ef">where</span> id <span style="color:#f92672">=</span> <span style="color:#ae81ff">1</span>;
</code></pre></div></li>
</ol>
<h4 id="外键管理">外键管理</h4>
<ul>
<li>
<p>在表创建后期维护外键</p>
</li>
<li>
<p>新增外键</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-mysql" data-lang="mysql"><span style="color:#66d9ef">alter</span> <span style="color:#66d9ef">table</span> <span style="color:#960050;background-color:#1e0010">表名</span> <span style="color:#66d9ef">add</span> [<span style="color:#66d9ef">constraint</span> <span style="color:#f92672">`</span><span style="color:#960050;background-color:#1e0010">外键名</span><span style="color:#f92672">`</span>] <span style="color:#66d9ef">foreign</span> <span style="color:#66d9ef">key</span>(<span style="color:#960050;background-color:#1e0010">外键字段</span>) <span style="color:#66d9ef">references</span> <span style="color:#960050;background-color:#1e0010">表名</span>(<span style="color:#960050;background-color:#1e0010">主键</span>) [<span style="color:#66d9ef">on</span> <span style="color:#960050;background-color:#1e0010">外键约束</span>]
</code></pre></div></li>
<li>
<p>删除外键</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-mysql" data-lang="mysql"><span style="color:#66d9ef">alter</span> <span style="color:#66d9ef">table</span> <span style="color:#960050;background-color:#1e0010">表名</span> <span style="color:#66d9ef">drop</span> <span style="color:#66d9ef">foreign</span> <span style="color:#66d9ef">key</span> <span style="color:#960050;background-color:#1e0010">外键名</span>;
</code></pre></div></li>
<li>
<p>更新外键：先删除后新增</p>
</li>
</ul>
<h3 id="事务安全">事务安全</h3>
<p><strong>事务</strong>：要做的某个事情</p>
<ul>
<li>
<p>计算机中的事务是指某个程序执行单元（写操作）</p>
</li>
<li>
<p>事务安全：当事务执行后，保障事务的执行是有效的，而不会导致数据错乱</p>
</li>
<li>
<p>事务安全通常针对的是一连串的操作（多个事务）而产生的统一结果</p>
</li>
<li>
<p>MySQL中默认的写操作是直接写入的</p>
<ul>
<li>执行写操作SQL</li>
<li>同步到数据表</li>
</ul>
</li>
</ul>
<h5 id="示例-2">示例</h5>
<p>银行转账</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-mysql" data-lang="mysql"><span style="color:#66d9ef">create</span> <span style="color:#66d9ef">table</span> <span style="color:#a6e22e">t1</span>(
	id <span style="color:#66d9ef">int</span> <span style="color:#66d9ef">primary</span> <span style="color:#66d9ef">key</span> <span style="color:#66d9ef">auto_increment</span>,
	<span style="color:#f92672">`</span>name<span style="color:#f92672">`</span> <span style="color:#66d9ef">varchar</span>(<span style="color:#ae81ff">50</span>) <span style="color:#66d9ef">not</span> <span style="color:#66d9ef">null</span>,
	account <span style="color:#66d9ef">decimal</span>(<span style="color:#ae81ff">10</span>,<span style="color:#ae81ff">2</span>) <span style="color:#66d9ef">default</span> <span style="color:#ae81ff">0</span>.<span style="color:#ae81ff">00</span>
)<span style="color:#66d9ef">charset</span> utf8;

<span style="color:#66d9ef">insert</span> <span style="color:#66d9ef">into</span> t1 <span style="color:#66d9ef">values</span>(<span style="color:#66d9ef">null</span>,<span style="color:#e6db74">&#39;Tom&#39;</span>,<span style="color:#ae81ff">10000</span>),(<span style="color:#66d9ef">null</span>,<span style="color:#e6db74">&#39;Lucy&#39;</span>,<span style="color:#ae81ff">100</span>);

<span style="color:#75715e"># Tom扣钱
</span><span style="color:#75715e"></span><span style="color:#66d9ef">update</span> t1 <span style="color:#66d9ef">set</span> account <span style="color:#f92672">=</span> account <span style="color:#f92672">-</span> <span style="color:#ae81ff">100</span> <span style="color:#66d9ef">where</span> id <span style="color:#f92672">=</span> <span style="color:#ae81ff">1</span>;
<span style="color:#75715e"># Lucy收钱
</span><span style="color:#75715e"></span><span style="color:#66d9ef">update</span> t1 <span style="color:#66d9ef">set</span> account <span style="color:#f92672">=</span> account <span style="color:#f92672">+</span> <span style="color:#ae81ff">1000</span>;
</code></pre></div><ul>
<li>扣钱，收钱两步都成功转账才叫成功</li>
<li>为了保障两步都成功才能叫事务安全</li>
</ul>
<h4 id="事务处理">事务处理</h4>
<ul>
<li>利用手动或者手动方式实现事务管理</li>
<li>自动事务处理：系统默认，操作结束直接同步到数据表（事务关闭状态）
<ul>
<li>系统控制：变量<code>autocommit</code>（值为ON，自动提交）</li>
</ul>
</li>
<li>手动事务处理
<ul>
<li>开启事务：<code>start transaction</code></li>
<li>关闭事务：
<ul>
<li>提交事务：<code>commit</code>，同步到数据表，同时清空日志数据</li>
<li>回滚事务：<code>rollback</code> 只清空日志数据</li>
</ul>
</li>
</ul>
</li>
<li>事务回滚：在长事务执行中，可以在某个已经成功的节点设置回滚点，后续回滚的可以回到某个成功点
<ul>
<li>设置回滚点：<code>savepoint 回滚点名字</code></li>
<li>回滚到回滚点：<code>rollback to 回滚点名字</code></li>
</ul>
</li>
</ul>
<h5 id="示例-3">示例</h5>
<ol>
<li>
<p>手动事务：启用事务转账，成功提交事务</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-mysql" data-lang="mysql"><span style="color:#75715e"># 开启事务
</span><span style="color:#75715e"></span>start transaction;

<span style="color:#75715e"># Tom扣钱
</span><span style="color:#75715e"></span><span style="color:#66d9ef">update</span> t1 <span style="color:#66d9ef">set</span> account <span style="color:#f92672">=</span> account <span style="color:#f92672">-</span> <span style="color:#ae81ff">1000</span>;

<span style="color:#75715e"># Lucy收钱
</span><span style="color:#75715e"></span><span style="color:#66d9ef">update</span> t1 <span style="color:#66d9ef">set</span> account <span style="color:#f92672">=</span> account <span style="color:#f92672">+</span> <span style="color:#ae81ff">1000</span>;

<span style="color:#75715e"># 提交事务
</span><span style="color:#75715e"></span>commit;
</code></pre></div></li>
<li>
<p>手动事务：启用事务转账，成功提交事务（回滚点）</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-mysql" data-lang="mysql"><span style="color:#75715e"># 开启事务
</span><span style="color:#75715e"></span>start transaction;

<span style="color:#75715e"># Tom扣钱
</span><span style="color:#75715e"></span><span style="color:#66d9ef">update</span> t1 <span style="color:#66d9ef">set</span> account <span style="color:#f92672">=</span> account <span style="color:#f92672">-</span> <span style="color:#ae81ff">1000</span> <span style="color:#66d9ef">where</span> id <span style="color:#f92672">=</span> <span style="color:#ae81ff">1</span>;

<span style="color:#75715e"># 设置回滚点
</span><span style="color:#75715e"></span>savepoint spl;

<span style="color:#75715e"># Lucy收钱
</span><span style="color:#75715e"></span><span style="color:#66d9ef">update</span> t1 <span style="color:#66d9ef">set</span> account <span style="color:#f92672">=</span> account <span style="color:#f92672">+</span> <span style="color:#ae81ff">1000</span> <span style="color:#66d9ef">where</span> id <span style="color:#f92672">=</span> <span style="color:#ae81ff">2</span>;

<span style="color:#75715e"># 操作失败回到回滚点
</span><span style="color:#75715e"></span>rollback spl;

<span style="color:#66d9ef">update</span> t1 <span style="color:#66d9ef">set</span> account <span style="color:#f92672">=</span> account <span style="color:#f92672">-</span> <span style="color:#ae81ff">1000</span> <span style="color:#66d9ef">where</span> id <span style="color:#f92672">=</span> <span style="color:#ae81ff">2</span>;

<span style="color:#75715e"># 提交事务
</span><span style="color:#75715e"></span>commit;
</code></pre></div></li>
<li>
<p>自动事务</p>
<ul>
<li>MySQL默认自动提交事务，事务一旦发生就会立即写入数据表</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-mysql" data-lang="mysql"><span style="color:#66d9ef">show</span> variables <span style="color:#66d9ef">like</span> <span style="color:#e6db74">&#39;autucommit&#39;</span>;
</code></pre></div><ul>
<li>关闭自动提交事务（当前设置级别用户级：当前用户当此连接有效）</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-mysql" data-lang="mysql"><span style="color:#66d9ef">set</span> autocommit <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>;
</code></pre></div><ul>
<li>手动提交事务</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-mysql" data-lang="mysql"><span style="color:#66d9ef">insert</span> <span style="color:#66d9ef">into</span> t1 <span style="color:#66d9ef">values</span>(<span style="color:#66d9ef">null</span>,<span style="color:#e6db74">&#39;Liu&#39;</span>,<span style="color:#ae81ff">1000</span>);
commit;
</code></pre></div></li>
</ol>
<h4 id="事务特点">事务特点</h4>
<ul>
<li>ACID四大特性</li>
<li>原子性(Atomicity)：一个事务操作是一个整体，不可拆分，要么都成功，要么都失败</li>
<li>一致性(Consistency)：事务执行之前和执行之后都必须处于一致性状态，数据的完整性没有被破坏（事务逻辑的准确性）</li>
<li>隔离性(Isolation)：事务操作过程中，其他事务不可见</li>
<li>持久性(Durability)：事务一旦提交，结果不可改变</li>
</ul>
<h3 id="预处理">预处理</h3>
<p><strong>预处理</strong>：prepare statement，一种预先编译SQL指令的方式</p>
<ul>
<li>预处理不同于直接处理，是将要执行的SQL指令先发送给服务器编译，然后通过指令执行
<ul>
<li>发送预处理：<code>prepare 预处理名字 from '要执行的SQL指令'</code></li>
<li>执行预处理：<code>execute 预处理名字</code></li>
</ul>
</li>
<li>预处理管理
<ul>
<li>预处理属于会话级别：即当前用户当次连接有效（断开会被服务器清理掉）</li>
<li>删除预处理：<code>deallocate | drop 预处理名字</code></li>
</ul>
</li>
</ul>
<h5 id="示例-4">示例</h5>
<p>查询学生的SQL指令需要重复执行很多次</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-mysql" data-lang="mysql"><span style="color:#75715e"># 普通操作
</span><span style="color:#75715e"></span><span style="color:#66d9ef">select</span> <span style="color:#f92672">*</span> <span style="color:#66d9ef">from</span> t1;

<span style="color:#75715e"># 预处理操作：发送预处理
</span><span style="color:#75715e"></span>prepare pl <span style="color:#66d9ef">from</span> <span style="color:#e6db74">&#39;select * from t1&#39;</span>;

<span style="color:#75715e"># 预处理操作：执行预处理
</span><span style="color:#75715e"></span>execute pl;
 
<span style="color:#75715e"># 删除预处理
</span><span style="color:#75715e"></span>deallocate <span style="color:#f92672">|</span> <span style="color:#66d9ef">drop</span> pl;
</code></pre></div><h4 id="预处理传参">预处理传参</h4>
<ul>
<li>
<p>在执行预处理的时候传入预处理需要的可变数据</p>
</li>
<li>
<p>一般预处理都不会是固定死的SQL指令，而是具有一些数据可变的执行（条件）</p>
<ul>
<li>
<p>可变数据的位置使用占位符<code>?</code>占位</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-mysql" data-lang="mysql">prepare <span style="color:#960050;background-color:#1e0010">预处理名字</span> <span style="color:#66d9ef">from</span> <span style="color:#e6db74">&#39;预处理指令  变化部分使用?代替&#39;</span>
</code></pre></div></li>
</ul>
</li>
<li>
<p>在执行预处理的时候将实际数据传进去代替占位符执行SQL</p>
<ul>
<li>
<p>数据存储到变量（预处理传入的值必须是变量保存的）</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-mysql" data-lang="mysql"><span style="color:#66d9ef">set</span> <span style="color:#f92672">@</span><span style="color:#960050;background-color:#1e0010">变量名</span> <span style="color:#f92672">=</span> <span style="color:#960050;background-color:#1e0010">值</span>
</code></pre></div></li>
<li>
<p>使用using关键字传参</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-mysql" data-lang="mysql">execute <span style="color:#960050;background-color:#1e0010">预处理名字</span> <span style="color:#66d9ef">using</span> <span style="color:#f92672">@</span><span style="color:#960050;background-color:#1e0010">变量名</span>
</code></pre></div></li>
<li>
<p>数据传入的顺序与预处理中占位符的顺序一致</p>
</li>
</ul>
</li>
</ul>
<h5 id="示例-5">示例</h5>
<p>向表中插入数据</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-mysql" data-lang="mysql"><span style="color:#75715e"># 准备预处理：涉及参数
</span><span style="color:#75715e"></span>prepare t1 <span style="color:#66d9ef">insert</span> <span style="color:#66d9ef">from</span> <span style="color:#e6db74">&#39;insert into t1 values(null,?,?,?,?)&#39;</span>;

<span style="color:#75715e"># 设置变量并传入参数
</span><span style="color:#75715e"></span><span style="color:#66d9ef">set</span> <span style="color:#f92672">@</span>name <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;药师兜&#39;</span>;
<span style="color:#66d9ef">set</span> <span style="color:#f92672">@</span>gender <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;男&#39;</span>;
<span style="color:#66d9ef">set</span> <span style="color:#f92672">@</span>age <span style="color:#f92672">=</span> <span style="color:#ae81ff">23</span>;
<span style="color:#66d9ef">set</span> <span style="color:#f92672">@</span>class_name <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;木叶1班&#39;</span>;

<span style="color:#75715e">#执行预处理
</span><span style="color:#75715e"></span>execute t1 <span style="color:#66d9ef">insert</span> <span style="color:#66d9ef">using</span> <span style="color:#f92672">@</span>name,<span style="color:#f92672">@</span>gender,<span style="color:#f92672">@</span>age,<span style="color:#f92672">@@</span>class_name;
</code></pre></div><h3 id="视图">视图</h3>
<p><strong>视图</strong>：view，一种由select指令组成的虚拟表</p>
<ul>
<li>
<p>视图时虚拟表，可以使用表管理（结构管理）</p>
<ul>
<li>为视图提供数据的表叫做基表</li>
</ul>
</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-mysql" data-lang="mysql"><span style="color:#75715e"># 创建视图
</span><span style="color:#75715e"></span><span style="color:#66d9ef">create</span> view <span style="color:#960050;background-color:#1e0010">视图名字</span> <span style="color:#66d9ef">as</span> select指令;

<span style="color:#75715e"># 访问视图：一般都是查询
</span><span style="color:#75715e"></span><span style="color:#66d9ef">select</span> <span style="color:#f92672">*/</span><span style="color:#960050;background-color:#1e0010">字段名</span> <span style="color:#66d9ef">from</span> <span style="color:#960050;background-color:#1e0010">视图名字</span>;
</code></pre></div><ul>
<li>
<p>视图有结构，但不存储数据</p>
<ul>
<li>结构：select选择的字段</li>
<li>数据：访问视图时执行的select指令</li>
</ul>
</li>
<li>
<p>对外部系统提供数据支撑(保护基表数据)</p>
</li>
</ul>
<h5 id="示例-6">示例</h5>
<ol>
<li>
<p>需要对外提供一个学生详情的数据，经常使用，可以利用视图实现</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-mysql" data-lang="mysql"><span style="color:#75715e"># 对外提供数据，要保护数据本身的安全
</span><span style="color:#75715e"># 需要长期使用
</span><span style="color:#75715e"></span>
<span style="color:#75715e"># 创建视图
</span><span style="color:#75715e"></span><span style="color:#66d9ef">create</span> view v_student_info <span style="color:#66d9ef">as</span> <span style="color:#66d9ef">select</span> <span style="color:#f92672">*</span> <span style="color:#66d9ef">from</span> t1 <span style="color:#66d9ef">left</span> <span style="color:#66d9ef">join</span> t2 <span style="color:#66d9ef">using</span>(c_id);

<span style="color:#75715e"># 使用视图：像表一样使用
</span><span style="color:#75715e"></span><span style="color:#66d9ef">select</span> <span style="color:#f92672">*</span> <span style="color:#66d9ef">from</span> v_student_info;
</code></pre></div></li>
<li>
<p>有些复杂的SQL又是经常用到的，如多张表的连表操作：可以利用视图实现</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-mysql" data-lang="mysql"><span style="color:#75715e"># 院系表
</span><span style="color:#75715e"></span><span style="color:#66d9ef">create</span> <span style="color:#66d9ef">table</span> <span style="color:#a6e22e">t1</span>(
	id <span style="color:#66d9ef">int</span> <span style="color:#66d9ef">primary</span> <span style="color:#66d9ef">key</span> <span style="color:#66d9ef">auto_increment</span>,
	<span style="color:#f92672">`</span>name<span style="color:#f92672">`</span> <span style="color:#66d9ef">varchar</span>(<span style="color:#ae81ff">50</span>) <span style="color:#66d9ef">not</span> <span style="color:#66d9ef">null</span>
)<span style="color:#66d9ef">charset</span> utf8;

<span style="color:#66d9ef">insert</span> <span style="color:#66d9ef">into</span> t1 <span style="color:#66d9ef">values</span>(<span style="color:#66d9ef">null</span>,<span style="color:#e6db74">&#39;语言系&#39;</span>),(<span style="color:#66d9ef">null</span>,<span style="color:#e6db74">&#39;考古系&#39;</span>);

<span style="color:#75715e"># 专业表
</span><span style="color:#75715e"></span><span style="color:#66d9ef">create</span> <span style="color:#66d9ef">table</span> <span style="color:#a6e22e">t2</span>(
	id <span style="color:#66d9ef">int</span> <span style="color:#66d9ef">primary</span> <span style="color:#66d9ef">key</span> <span style="color:#66d9ef">auto_increment</span>,
	<span style="color:#f92672">`</span>name<span style="color:#f92672">`</span> <span style="color:#66d9ef">varchar</span>(<span style="color:#ae81ff">50</span>) <span style="color:#66d9ef">not</span> <span style="color:#66d9ef">null</span>,
	s_id <span style="color:#66d9ef">int</span> <span style="color:#66d9ef">not</span> <span style="color:#66d9ef">null</span> comment <span style="color:#e6db74">&#39;学院id&#39;</span>
)<span style="color:#66d9ef">charset</span> utf8;

<span style="color:#66d9ef">insert</span> <span style="color:#66d9ef">into</span> t2 <span style="color:#66d9ef">values</span>(<span style="color:#66d9ef">null</span>,<span style="color:#e6db74">&#39;English&#39;</span>,<span style="color:#ae81ff">1</span>),(<span style="color:#66d9ef">null</span>,<span style="color:#e6db74">&#39;Chinese&#39;</span>,<span style="color:#ae81ff">1</span>);

<span style="color:#75715e"># 学生表
</span><span style="color:#75715e"></span><span style="color:#66d9ef">create</span> <span style="color:#66d9ef">table</span> <span style="color:#a6e22e">t3</span>(
	id <span style="color:#66d9ef">int</span> <span style="color:#66d9ef">primary</span> <span style="color:#66d9ef">key</span> <span style="color:#66d9ef">auto_increment</span>,
	<span style="color:#f92672">`</span>name<span style="color:#f92672">`</span> <span style="color:#66d9ef">varchar</span>(<span style="color:#ae81ff">50</span>) <span style="color:#66d9ef">not</span> <span style="color:#66d9ef">null</span>,
	s_id <span style="color:#66d9ef">int</span> <span style="color:#66d9ef">not</span> <span style="color:#66d9ef">null</span> comment <span style="color:#e6db74">&#39;专业id&#39;</span>
)<span style="color:#66d9ef">charset</span> utf8;

<span style="color:#66d9ef">insert</span> <span style="color:#66d9ef">into</span> t3 <span style="color:#66d9ef">values</span>(<span style="color:#66d9ef">null</span>,<span style="color:#e6db74">&#39;Lilei&#39;</span>,<span style="color:#ae81ff">2</span>),(<span style="color:#66d9ef">null</span>,<span style="color:#e6db74">&#39;Hanmeimei&#39;</span>,<span style="color:#ae81ff">2</span>),(<span style="color:#66d9ef">null</span>,<span style="color:#e6db74">&#39;Tony&#39;</span>,<span style="color:#ae81ff">1</span>);


<span style="color:#75715e"># 获取所有学生的明细信息
</span><span style="color:#75715e"></span><span style="color:#66d9ef">select</span> stu.<span style="color:#f92672">*</span>,sub.name <span style="color:#66d9ef">as</span> sub_name,sub.s_id <span style="color:#66d9ef">as</span> sch_id,sch.name <span style="color:#66d9ef">as</span> sch_name <span style="color:#66d9ef">from</span> t3 <span style="color:#66d9ef">as</span> stu <span style="color:#66d9ef">left</span> <span style="color:#66d9ef">join</span> t2 sub <span style="color:#66d9ef">on</span> stu.s_id <span style="color:#f92672">=</span> sub.id <span style="color:#66d9ef">left</span> <span style="color:#66d9ef">join</span> t1 sch <span style="color:#66d9ef">on</span> sub.s_id <span style="color:#f92672">=</span> sch.id;

<span style="color:#75715e"># 以视图保存这类复杂指令，后续可以直接访问视图
</span><span style="color:#75715e"></span><span style="color:#66d9ef">create</span> view v_student_detail <span style="color:#66d9ef">as</span> <span style="color:#66d9ef">select</span> stu.<span style="color:#f92672">*</span>,sub.name <span style="color:#66d9ef">as</span> sub_name,sub.s_id <span style="color:#66d9ef">as</span> sch_id,sch.name <span style="color:#66d9ef">as</span> sch_name <span style="color:#66d9ef">from</span> t3 <span style="color:#66d9ef">as</span> stu <span style="color:#66d9ef">left</span> <span style="color:#66d9ef">join</span> t2 sub <span style="color:#66d9ef">on</span> stu.s_id <span style="color:#f92672">=</span> sub.id <span style="color:#66d9ef">left</span> <span style="color:#66d9ef">join</span> t1 sch <span style="color:#66d9ef">on</span> sub.s_id <span style="color:#f92672">=</span> sch.id;
</code></pre></div></li>
</ol>
<h4 id="视图管理">视图管理</h4>
<ul>
<li>
<p>视图查看：显示视图结构和具体视图信息</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-mysql" data-lang="mysql"><span style="color:#66d9ef">show</span> <span style="color:#66d9ef">tables</span>; <span style="color:#75715e">#查看全部视图
</span><span style="color:#75715e"></span><span style="color:#66d9ef">show</span> <span style="color:#66d9ef">create</span> <span style="color:#66d9ef">table</span><span style="color:#f92672">/</span>view <span style="color:#960050;background-color:#1e0010">视图名字</span>; <span style="color:#75715e"># 查看视图创建指令
</span><span style="color:#75715e"></span><span style="color:#66d9ef">desc</span> <span style="color:#960050;background-color:#1e0010">视图名字</span>; <span style="color:#75715e"># 查看视图结构
</span></code></pre></div></li>
<li>
<p>视图修改：更改视图逻辑</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-mysql" data-lang="mysql"><span style="color:#66d9ef">alter</span> view <span style="color:#960050;background-color:#1e0010">视图名</span> <span style="color:#66d9ef">as</span> <span style="color:#960050;background-color:#1e0010">新的查询命令</span>;
<span style="color:#66d9ef">create</span> <span style="color:#66d9ef">or</span> <span style="color:#66d9ef">replace</span> view <span style="color:#960050;background-color:#1e0010">视图名</span> <span style="color:#66d9ef">as</span> <span style="color:#960050;background-color:#1e0010">新的查询命令</span> <span style="color:#75715e"># 创建新的或者替换新的
</span></code></pre></div></li>
<li>
<p>删除视图</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-mysql" data-lang="mysql"><span style="color:#66d9ef">drop</span> view <span style="color:#960050;background-color:#1e0010">视图名</span>;
</code></pre></div></li>
</ul>
<h4 id="视图的数据操作">视图的数据操作</h4>
<ul>
<li>
<p>视图所有的数据操作都是最终对基表的数据操作</p>
</li>
<li>
<p>视图操作条件</p>
<ul>
<li>
<p>多基表视图：不允许操作</p>
</li>
<li>
<p>单基表视图：允许增删改</p>
<ul>
<li>新增条件：视图的字段必须包含基表中所有不允许为空的字段</li>
</ul>
</li>
<li>
<p><code>with check option</code>：操作检查规则</p>
<ul>
<li>默认不需要这个规则（创建视图时指定）：视图操作只要满足前面上述条件即可</li>
<li>增加此规则：视图的数据操作后，必须要保证该视图还能把通过视图操作的数据查出来（否则失败）</li>
</ul>
</li>
</ul>
<h5 id="示例-7">示例</h5>
</li>
</ul>
<ol>
<li>
<p>增加一个单表视图和多表视图</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-mysql" data-lang="mysql"><span style="color:#66d9ef">create</span> view v_student_1 <span style="color:#66d9ef">as</span> <span style="color:#66d9ef">select</span> s_id,s_name <span style="color:#66d9ef">from</span> t1;
<span style="color:#66d9ef">create</span> view v_student_2 <span style="color:#66d9ef">as</span> <span style="color:#66d9ef">select</span> s.<span style="color:#f92672">*</span>,c.c_name <span style="color:#66d9ef">from</span> t1 s <span style="color:#66d9ef">left</span> <span style="color:#66d9ef">join</span> t2 c <span style="color:#66d9ef">using</span>(c_id);
<span style="color:#66d9ef">create</span> <span style="color:#66d9ef">or</span> <span style="color:#66d9ef">replace</span> view v_student_3 <span style="color:#66d9ef">as</span> <span style="color:#66d9ef">select</span> <span style="color:#f92672">*</span> <span style="color:#66d9ef">from</span> t1 <span style="color:#66d9ef">where</span> c_id <span style="color:#66d9ef">is</span> <span style="color:#66d9ef">not</span> <span style="color:#66d9ef">null</span> <span style="color:#66d9ef">with</span> <span style="color:#66d9ef">check</span> <span style="color:#66d9ef">option</span>;
</code></pre></div></li>
<li>
<p>新增数据</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-mysql" data-lang="mysql"><span style="color:#66d9ef">insert</span> <span style="color:#66d9ef">into</span> v_student_1 <span style="color:#66d9ef">values</span>(<span style="color:#66d9ef">null</span>,<span style="color:#e6db74">&#39;student7&#39;</span>); <span style="color:#75715e"># 正确：视图包含所有必有字段
</span><span style="color:#75715e"></span><span style="color:#66d9ef">insert</span> <span style="color:#66d9ef">into</span> v_student_2 <span style="color:#66d9ef">values</span>(<span style="color:#66d9ef">null</span>,<span style="color:#e6db74">&#39;student8&#39;</span>,<span style="color:#66d9ef">null</span>,<span style="color:#66d9ef">null</span>) <span style="color:#75715e"># 错误：不可插入
</span><span style="color:#75715e"></span><span style="color:#66d9ef">insert</span> <span style="color:#66d9ef">into</span> v_student_3 <span style="color:#66d9ef">values</span>(<span style="color:#66d9ef">null</span>,<span style="color:#e6db74">&#39;student8&#39;</span>,<span style="color:#66d9ef">null</span>) <span style="color:#75715e"># 错误：check option，因为第三个字段c_id为null,不符合视图筛选条件，查不出来
</span><span style="color:#75715e"></span><span style="color:#66d9ef">insert</span> <span style="color:#66d9ef">into</span> v_student_3 <span style="color:#a6e22e">valeus</span>(<span style="color:#66d9ef">null</span>,<span style="color:#e6db74">&#39;student9&#39;</span>,<span style="color:#ae81ff">1</span>) <span style="color:#75715e"># 正确
</span></code></pre></div></li>
<li>
<p>更新数据</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-mysql" data-lang="mysql"><span style="color:#66d9ef">update</span> v_student_1 <span style="color:#66d9ef">set</span> s_name <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;boy&#39;</span> <span style="color:#66d9ef">where</span> s_id <span style="color:#f92672">=</span> <span style="color:#ae81ff">8</span>;
<span style="color:#66d9ef">update</span> v_student_2 <span style="color:#66d9ef">set</span> s_name <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;boy&#39;</span> <span style="color:#66d9ef">where</span> s_id <span style="color:#f92672">=</span> <span style="color:#ae81ff">7</span>; <span style="color:#75715e"># 错误：不可修改 
</span><span style="color:#75715e"></span><span style="color:#66d9ef">update</span> v_student_3 <span style="color:#66d9ef">set</span> c_id <span style="color:#f92672">=</span> <span style="color:#66d9ef">null</span> <span style="color:#66d9ef">where</span> s_id <span style="color:#f92672">=</span> <span style="color:#ae81ff">1</span>; <span style="color:#75715e"># 错误：check option，修改后c_id为null，变得不符合视图筛选条件
</span><span style="color:#75715e"></span><span style="color:#66d9ef">update</span> v_student_3 <span style="color:#66d9ef">set</span> s_name <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;boy&#39;</span> <span style="color:#66d9ef">where</span> s_id <span style="color:#f92672">=</span> <span style="color:#ae81ff">1</span>;
</code></pre></div></li>
<li>
<p>删除数据</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-mysql" data-lang="mysql"><span style="color:#66d9ef">delete</span> <span style="color:#66d9ef">from</span> v_student_1 <span style="color:#66d9ef">where</span> s_id <span style="color:#f92672">=</span> <span style="color:#ae81ff">2</span>;
<span style="color:#66d9ef">delete</span> <span style="color:#66d9ef">from</span> v_student_2 <span style="color:#66d9ef">where</span> s_id <span style="color:#f92672">=</span> <span style="color:#ae81ff">3</span>; <span style="color:#75715e"># 错误：不可修改
</span><span style="color:#75715e"></span><span style="color:#66d9ef">delete</span> <span style="color:#66d9ef">from</span> v_student_3 <span style="color:#66d9ef">where</span> s_id <span style="color:#f92672">=</span> <span style="color:#ae81ff">1</span>; <span style="color:#75715e"># 可以删除，check option不影响删除操作
</span></code></pre></div></li>
</ol>
<h4 id="视图算法">视图算法</h4>
<ul>
<li>
<p>视图在执行过程中对于内部的<code>select</code>指令的处理方式</p>
</li>
<li>
<p>视图算法在创建视图时指定</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-mysql" data-lang="mysql"><span style="color:#66d9ef">create</span> ALGORITHM <span style="color:#f92672">=</span> <span style="color:#960050;background-color:#1e0010">算法</span> view <span style="color:#960050;background-color:#1e0010">视图名字</span> <span style="color:#66d9ef">as</span> select指令;
</code></pre></div></li>
<li>
<p>视图算法一共有三种</p>
<ul>
<li><code>undefined</code>：默认的，未定义算法，即系统自动选择算法</li>
<li><code>merge</code>：合并算法，就是将视图外部查询语句跟视图内部select语句合并执行，效率高（系统优先选择）</li>
<li><code>temptable</code>：临时表算法，即系统将视图的select语句查出来先得出一张临时表，然后外部再查询（temptable算法视图不允许写操作）</li>
</ul>
</li>
</ul>
<h3 id="数据备份与还原">数据备份与还原</h3>
<h4 id="表数据备份">表数据备份</h4>
<ul>
<li>单独针对表里的<strong>数据部分</strong>进行备份（数据导出）</li>
<li>将数据从表中查出，按照一定格式存储到外部文件
<ul>
<li>字段格式化：<code>fields</code>
<ul>
<li><code>terminated by</code>：字段数据结束后使用的符号，默认是空格</li>
<li><code>enclosed by</code>：字段数据包裹，默认什么都没有</li>
<li><code>escaped by</code>：特殊字符的处理，默认是转义</li>
</ul>
</li>
<li>行格式化：<code>lines</code>
<ul>
<li><code>terminated by</code>：行结束符号，默认是\n，自动换行</li>
<li><code>starting by</code>：行开始符号，默认没有</li>
</ul>
</li>
</ul>
</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-mysql" data-lang="mysql"><span style="color:#66d9ef">select</span> <span style="color:#960050;background-color:#1e0010">字段列表</span><span style="color:#f92672">|*</span> <span style="color:#66d9ef">into</span> <span style="color:#66d9ef">outfile</span> <span style="color:#e6db74">&#39;外部文件路径&#39;</span>
	[fields <span style="color:#66d9ef">terminated</span> <span style="color:#66d9ef">by</span> <span style="color:#960050;background-color:#1e0010">格式</span> <span style="color:#66d9ef">enclosed</span> <span style="color:#66d9ef">by</span> <span style="color:#960050;background-color:#1e0010">格式</span>]
	[<span style="color:#66d9ef">lines</span> <span style="color:#66d9ef">terminated</span> <span style="color:#66d9ef">by</span> <span style="color:#960050;background-color:#1e0010">格式</span> <span style="color:#66d9ef">starting</span> <span style="color:#66d9ef">by</span> <span style="color:#960050;background-color:#1e0010">格式</span>]
<span style="color:#66d9ef">from</span> <span style="color:#960050;background-color:#1e0010">数据表</span>;
</code></pre></div><ul>
<li>表数据备份不限定数据的来源是一张表还是多张表（可以连表）</li>
</ul>
<h4 id="表数据还原">表数据还原</h4>
<ul>
<li>将<strong>符合数据结构</strong>的数据导入到数据表中（数据导入）</li>
<li>将一定格式的数据按照一定的解析方式解析成符合表字段格式的数据导入到数据表
<ul>
<li>字段处理</li>
<li>行处理</li>
</ul>
</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-mysql" data-lang="mysql"><span style="color:#66d9ef">load</span> data <span style="color:#66d9ef">infile</span> <span style="color:#e6db74">&#39;数据文件所在路径&#39;</span> <span style="color:#66d9ef">into</span> <span style="color:#66d9ef">table</span> <span style="color:#960050;background-color:#1e0010">表名</span>
	[fields <span style="color:#66d9ef">terminated</span> <span style="color:#66d9ef">by</span> <span style="color:#960050;background-color:#1e0010">格式</span> <span style="color:#66d9ef">enclosed</span> <span style="color:#66d9ef">by</span> <span style="color:#960050;background-color:#1e0010">格式</span>]
	[<span style="color:#66d9ef">lines</span> <span style="color:#66d9ef">terminated</span> <span style="color:#66d9ef">by</span> <span style="color:#960050;background-color:#1e0010">格式</span> <span style="color:#66d9ef">starting</span> <span style="color:#66d9ef">by</span> <span style="color:#960050;background-color:#1e0010">格式</span>]
	[(<span style="color:#960050;background-color:#1e0010">字段列表</span>)];
</code></pre></div><ul>
<li>数据文件来源
<ul>
<li>表数据备份的数据文件</li>
<li>外部获取或者制作的符合格式的数据</li>
</ul>
</li>
</ul>
<h4 id="文件备份">文件备份</h4>
<ul>
<li>直接对数据表进行文件保留，属于物理备份</li>
<li>文件备份操作简单，直接将数据表（或者数据库文件夹）进行保存迁移</li>
<li>MySQL中不同表存储引擎产生的文件不一致，保存手段也不一致
<ul>
<li>InnoDB：表结构文件再ibd文件夹中，数据和索引存储在外部统一的ibdata文件夹中</li>
<li>MyIsam：每张表的数据、结构和索引都是独立文件，直接找到三个文件迁移即可</li>
</ul>
</li>
</ul>
<h4 id="文件还原">文件还原</h4>
<ul>
<li>利用备份的文件，替换出现问题的文件，还原到备份前的良好状态</li>
<li>直接将备份文件放到相应位置即可</li>
<li>文件还原影响
<ul>
<li>InnoDB：单表结构，整库数据，知识和整库备份还原，否则会影响其他InnoDB存储表</li>
<li>MyIsam：单表备份，单表还原，不影响其他任何数据</li>
</ul>
</li>
</ul>
<p>​</p>]]></content:encoded>
    </item>
    
    <item>
      <title>MySQL多表操作</title>
      <link>https://www.niuwx.cn/posts/mysql/mysql%E5%A4%9A%E8%A1%A8%E6%93%8D%E4%BD%9C/</link>
      <pubDate>Thu, 29 Jul 2021 20:02:51 +0800</pubDate>
      
      <guid>https://www.niuwx.cn/posts/mysql/mysql%E5%A4%9A%E8%A1%A8%E6%93%8D%E4%BD%9C/</guid>
      <description>简单介绍了一下MySQL多表操作</description>
      <content:encoded><![CDATA[<p><strong>多表</strong>：因为单表会出现数据冗余，所以采用多表的方式</p>
<h3 id="联合查询">联合查询</h3>
<h4 id="联合查询-1">联合查询</h4>
<ul>
<li>
<p><code>union</code>，是指将多个查询结果合并成一个结果显示</p>
</li>
<li>
<p>联合查询是针对查询结果的合并（多条select语句合并）</p>
</li>
<li>
<p>联合查询语法</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-mysql" data-lang="mysql"><span style="color:#66d9ef">select</span> <span style="color:#960050;background-color:#1e0010">查询</span> <span style="color:#75715e"># 决定字段表
</span><span style="color:#75715e"></span>	<span style="color:#66d9ef">union</span> <span style="color:#960050;background-color:#1e0010">查询选项</span>
<span style="color:#66d9ef">select</span> <span style="color:#960050;background-color:#1e0010">查询</span>
...
</code></pre></div></li>
<li>
<p>联合查询要求：联合查询是结果联合显示</p>
<ul>
<li>多个联合查询的字段结果数量一致</li>
<li>联合查询的字段来源于第一个查询语句的字段</li>
</ul>
</li>
<li>
<p>查询选项：与<code>select</code>选项一样</p>
<ul>
<li><code>all</code>：保留所有记录</li>
<li><code>distinct</code>：保留去重记录（默认）</li>
</ul>
</li>
</ul>
<h5 id="示例">示例</h5>
<ol>
<li>
<p>创建一个表，并插入数据</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-mysql" data-lang="mysql"><span style="color:#66d9ef">create</span> <span style="color:#66d9ef">table</span> t2 <span style="color:#66d9ef">like</span> t1;

<span style="color:#66d9ef">insert</span> <span style="color:#66d9ef">into</span> t2 <span style="color:#66d9ef">values</span>(<span style="color:#66d9ef">null</span>, <span style="color:#e6db74">&#39;犬夜叉&#39;</span>, <span style="color:#e6db74">&#39;男&#39;</span>, <span style="color:#ae81ff">200</span>, <span style="color:#e6db74">&#39;神妖1班&#39;</span>),
  (<span style="color:#66d9ef">null</span>, <span style="color:#e6db74">&#39;日暮戈薇&#39;</span>, <span style="color:#e6db74">&#39;女&#39;</span>, <span style="color:#ae81ff">16</span>, <span style="color:#e6db74">&#39;现代1班&#39;</span>),
  (<span style="color:#66d9ef">null</span>, <span style="color:#e6db74">&#39;桔梗&#39;</span>, <span style="color:#e6db74">&#39;女&#39;</span>, <span style="color:#ae81ff">88</span>, <span style="color:#e6db74">&#39;法师1班&#39;</span>),
  (<span style="color:#66d9ef">null</span>, <span style="color:#e6db74">&#39;弥勒&#39;</span>, <span style="color:#e6db74">&#39;男&#39;</span>, <span style="color:#ae81ff">28</span>, <span style="color:#e6db74">&#39;法师2班&#39;</span>),
  (<span style="color:#66d9ef">null</span>, <span style="color:#e6db74">&#39;珊瑚&#39;</span>, <span style="color:#e6db74">&#39;女&#39;</span>, <span style="color:#ae81ff">20</span>, <span style="color:#e6db74">&#39;法师2班&#39;</span>),
  (<span style="color:#66d9ef">null</span>, <span style="color:#e6db74">&#39;七宝&#39;</span>, <span style="color:#e6db74">&#39;保密&#39;</span>, <span style="color:#ae81ff">5</span>, <span style="color:#e6db74">&#39;宠物1班&#39;</span>),
  (<span style="color:#66d9ef">null</span>, <span style="color:#e6db74">&#39;杀生丸&#39;</span>, <span style="color:#e6db74">&#39;男&#39;</span>, <span style="color:#ae81ff">220</span>, <span style="color:#e6db74">&#39;神妖1班&#39;</span>),
  (<span style="color:#66d9ef">null</span>, <span style="color:#e6db74">&#39;铃&#39;</span>, <span style="color:#e6db74">&#39;女&#39;</span>, <span style="color:#ae81ff">4</span>, <span style="color:#e6db74">&#39;现代1班&#39;</span>),
  (<span style="color:#66d9ef">null</span>, <span style="color:#e6db74">&#39;钢牙&#39;</span>, <span style="color:#e6db74">&#39;男&#39;</span>, <span style="color:#ae81ff">68</span>, <span style="color:#e6db74">&#39;神妖1班&#39;</span>),
  (<span style="color:#66d9ef">null</span>, <span style="color:#e6db74">&#39;奈落&#39;</span>, <span style="color:#e6db74">&#39;男&#39;</span>, <span style="color:#ae81ff">255</span>, <span style="color:#e6db74">&#39;神妖1班&#39;</span>),
  (<span style="color:#66d9ef">null</span>, <span style="color:#e6db74">&#39;神乐&#39;</span>, <span style="color:#e6db74">&#39;女&#39;</span>, <span style="color:#ae81ff">15</span>, <span style="color:#e6db74">&#39;神妖2班&#39;</span>);
</code></pre></div><pre><code> t1与t2结构一致，可以理解为因为数据量较大，拆分到两个表中
</code></pre>
</li>
<li>
<p>使用联合查询两张表的数据拼接到一起显示</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-mysql" data-lang="mysql"><span style="color:#66d9ef">select</span> <span style="color:#f92672">*</span> <span style="color:#66d9ef">from</span> t1
<span style="color:#66d9ef">union</span>
<span style="color:#66d9ef">select</span> <span style="color:#f92672">*</span> form t2;
</code></pre></div></li>
<li>
<p>联合查询选项默认是<code>distinct</code></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-mysql" data-lang="mysql"><span style="color:#66d9ef">select</span> <span style="color:#f92672">*</span> <span style="color:#66d9ef">from</span> t1
<span style="color:#66d9ef">union</span>
<span style="color:#66d9ef">select</span> <span style="color:#f92672">*</span> <span style="color:#66d9ef">from</span> t2;

<span style="color:#66d9ef">select</span> <span style="color:#f92672">*</span> <span style="color:#66d9ef">from</span> t1
<span style="color:#66d9ef">union</span> <span style="color:#66d9ef">all</span>
<span style="color:#66d9ef">select</span> <span style="color:#f92672">*</span> <span style="color:#66d9ef">from</span> t2;
</code></pre></div></li>
<li>
<p>联合查询不要求字段类型一致，只对数量要求一致，而且字段名称与第一条查询语句相关</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-mysql" data-lang="mysql"><span style="color:#66d9ef">select</span> name <span style="color:#66d9ef">from</span> t1
<span style="color:#66d9ef">union</span>
<span style="color:#66d9ef">select</span> age <span style="color:#66d9ef">from</span> t2;
</code></pre></div><p>如果数据不能与字段对应，那么查询没有意义</p>
</li>
</ol>
<h4 id="联合查询排序">联合查询排序</h4>
<ul>
<li>针对联合查询的结果进行排序</li>
<li><code>order by</code>本身是对内存结果进行排序，<code>union</code>的优先级高于<code>order by</code>，所以<code>order by</code>默认是对<code>union</code>结果进行排序</li>
<li>如果想对单独<code>select</code>的结果进行排序，需要两个步骤
<ul>
<li>将需要排序的<code>select</code>指令进行括号包裹（括号使用order by）</li>
<li><code>order by</code>必须配合<code>limit</code>才能生效（limit一个足够大的数值即可）</li>
</ul>
</li>
</ul>
<h5 id="示例-1">示例</h5>
<ol>
<li>
<p>将t1和t2表的结果使用年龄降序排序</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-mysql" data-lang="mysql"><span style="color:#66d9ef">select</span> <span style="color:#f92672">*</span> <span style="color:#66d9ef">from</span> t1
<span style="color:#66d9ef">union</span> <span style="color:#66d9ef">all</span>
<span style="color:#66d9ef">select</span> <span style="color:#f92672">*</span> <span style="color:#66d9ef">from</span> t2
<span style="color:#66d9ef">order</span> <span style="color:#66d9ef">by</span> age <span style="color:#66d9ef">desc</span>;
</code></pre></div></li>
<li>
<p>t1表按年龄降序排序，t2表按年龄升序排序</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-mysql" data-lang="mysql"><span style="color:#75715e"># 无效方式
</span><span style="color:#75715e"></span>(<span style="color:#66d9ef">select</span> <span style="color:#f92672">*</span> <span style="color:#66d9ef">from</span> t1 <span style="color:#66d9ef">order</span> <span style="color:#66d9ef">by</span> age <span style="color:#66d9ef">desc</span>)
<span style="color:#66d9ef">union</span>
(<span style="color:#66d9ef">select</span> <span style="color:#f92672">*</span> <span style="color:#66d9ef">from</span> t1 <span style="color:#66d9ef">order</span> <span style="color:#66d9ef">by</span> age <span style="color:#66d9ef">asc</span>);

<span style="color:#75715e"># 有效方式
</span><span style="color:#75715e"></span>(<span style="color:#66d9ef">select</span> <span style="color:#f92672">*</span> <span style="color:#66d9ef">from</span> t1 <span style="color:#66d9ef">order</span> <span style="color:#66d9ef">by</span> age <span style="color:#66d9ef">desc</span> <span style="color:#66d9ef">limit</span> <span style="color:#ae81ff">9999</span>)
<span style="color:#66d9ef">union</span>
(<span style="color:#66d9ef">select</span> <span style="color:#f92672">*</span> <span style="color:#66d9ef">from</span> t2 <span style="color:#66d9ef">order</span> <span style="color:#66d9ef">by</span> age <span style="color:#66d9ef">asc</span> <span style="color:#66d9ef">limit</span> <span style="color:#ae81ff">9999</span>);
</code></pre></div></li>
</ol>
<h3 id="连接查询">连接查询</h3>
<h4 id="交叉连接">交叉连接</h4>
<ul>
<li><code>cross join</code>，不需要任何条件的连接</li>
<li>交叉连接产生的效果就是笛卡尔积
<ul>
<li>左表的每一条记录都会与右表的所有记录连接并保存</li>
</ul>
</li>
<li>交叉连接没有实际数据价值，只是丰富了连接查询的完整性</li>
</ul>
<h5 id="示例-2">示例</h5>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-mysql" data-lang="mysql"><span style="color:#75715e"># 交叉连接t1和t2表
</span><span style="color:#75715e"></span><span style="color:#66d9ef">select</span> <span style="color:#f92672">*</span> <span style="color:#66d9ef">from</span> t1 <span style="color:#66d9ef">cross</span> <span style="color:#66d9ef">join</span> t2;
</code></pre></div><h4 id="内连接">内连接</h4>
<ul>
<li><code>[inner] join</code>，将两张表根据指定的条件连接起来，严格连接</li>
<li>内连接是将一张表的每一个记录去另外一张表根据条件匹配
<ul>
<li>匹配成功：保留连接的数据</li>
<li>匹配失败：都不保留</li>
</ul>
</li>
<li>内连接语法：<code>左表 join 右表 on 连接条件</code></li>
</ul>
<h5 id="示例-3">示例</h5>
<ol>
<li>
<p>设计学生表和专业表：学生对专业多对一关系</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-mysql" data-lang="mysql"><span style="color:#75715e"># 学生表
</span><span style="color:#75715e"></span><span style="color:#66d9ef">create</span> <span style="color:#66d9ef">table</span> <span style="color:#a6e22e">t1</span>(
	id <span style="color:#66d9ef">int</span> <span style="color:#66d9ef">primary</span> <span style="color:#66d9ef">key</span> <span style="color:#66d9ef">auto_increment</span>,
	name <span style="color:#66d9ef">varchar</span>(<span style="color:#ae81ff">50</span>) <span style="color:#66d9ef">not</span> <span style="color:#66d9ef">null</span>,
	course_no <span style="color:#66d9ef">int</span>
)<span style="color:#66d9ef">charset</span> utf8;

<span style="color:#66d9ef">insert</span> <span style="color:#66d9ef">into</span> t1 <span style="color:#66d9ef">values</span>(<span style="color:#66d9ef">null</span>,<span style="color:#e6db74">&#39;student1&#39;</span>,<span style="color:#ae81ff">1</span>),
(<span style="color:#66d9ef">null</span>,<span style="color:#e6db74">&#39;student2&#39;</span>,<span style="color:#ae81ff">1</span>),
(<span style="color:#66d9ef">null</span>,<span style="color:#e6db74">&#39;student3&#39;</span>,<span style="color:#ae81ff">2</span>),
(<span style="color:#66d9ef">null</span>,<span style="color:#e6db74">&#39;student4&#39;</span>,<span style="color:#ae81ff">3</span>),
(<span style="color:#66d9ef">null</span>,<span style="color:#e6db74">&#39;student5&#39;</span>,<span style="color:#ae81ff">1</span>),
(<span style="color:#66d9ef">null</span>,<span style="color:#e6db74">&#39;student6&#39;</span>,<span style="color:#66d9ef">default</span>);

<span style="color:#75715e"># 专业表
</span><span style="color:#75715e"></span><span style="color:#66d9ef">create</span> <span style="color:#66d9ef">table</span> <span style="color:#a6e22e">t2</span>(
	id <span style="color:#66d9ef">int</span> <span style="color:#66d9ef">primary</span> <span style="color:#66d9ef">key</span> <span style="color:#66d9ef">auto_increment</span>,
	name <span style="color:#66d9ef">varchar</span>(<span style="color:#ae81ff">50</span>) <span style="color:#66d9ef">not</span> <span style="color:#66d9ef">null</span> <span style="color:#66d9ef">unique</span>
)<span style="color:#66d9ef">charset</span> utf8;

<span style="color:#66d9ef">insert</span> <span style="color:#66d9ef">into</span> t2 <span style="color:#66d9ef">values</span>(<span style="color:#66d9ef">null</span>,<span style="color:#e6db74">&#39;Computer&#39;</span>),(<span style="color:#66d9ef">null</span>,<span style="color:#e6db74">&#39;Software&#39;</span>),(<span style="color:#66d9ef">null</span>,<span style="color:#e6db74">&#39;Network&#39;</span>);
</code></pre></div></li>
<li>
<p>获取已经选择了专业的学生信息，包括所选专业</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-mysql" data-lang="mysql"><span style="color:#75715e"># 学生和专业在两个表中，所以需要连表
</span><span style="color:#75715e"># 学生必须有专业，而专业也必须存在，所以是内连接
</span><span style="color:#75715e"># 连接条件：专业编号
</span><span style="color:#75715e"># 两张表有两个字段冲突：id,name,所以需要使用别名
</span><span style="color:#75715e"></span><span style="color:#66d9ef">select</span> t1.<span style="color:#f92672">*</span>,t2.name <span style="color:#66d9ef">as</span> course_name <span style="color:#66d9ef">from</span> t1 <span style="color:#66d9ef">inner</span> <span style="color:#66d9ef">join</span> t2 <span style="color:#66d9ef">on</span> t1.course_no <span style="color:#f92672">=</span> t2.id;

<span style="color:#75715e"># 表名的使用也可以使用别名
</span><span style="color:#75715e"></span><span style="color:#66d9ef">select</span> s.<span style="color:#f92672">*</span>,c.name <span style="color:#66d9ef">as</span> c_name <span style="color:#66d9ef">from</span> t1 <span style="color:#66d9ef">as</span> s <span style="color:#66d9ef">inner</span> <span style="color:#66d9ef">join</span> t2 c <span style="color:#66d9ef">on</span> s.course_no <span style="color:#f92672">=</span> c.id;
</code></pre></div></li>
</ol>
<h4 id="外连接">外连接</h4>
<ul>
<li><code>outer join</code>，是一种不严格的连接方式</li>
<li>外连接分为两种
<ul>
<li>左连接：<code>left join</code></li>
<li>右连接：<code>right join</code></li>
</ul>
</li>
<li>外连接有主表和从表之分
<ul>
<li>左连接：左表为主表</li>
<li>右连接：右表为主表</li>
</ul>
</li>
<li>外连接是将主表的记录去匹配从表的记录
<ul>
<li>匹配成功保留</li>
<li>全表匹配失败：也保留，只是从表字段置空</li>
</ul>
</li>
</ul>
<h5 id="示例-4">示例</h5>
<ol>
<li>
<p>查出学生所有信息，包括所在班级（左连接）</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-mysql" data-lang="mysql"><span style="color:#75715e"># 主要数据是学生，而且是全部学生：外连接、且学生表为主表
</span><span style="color:#75715e"></span><span style="color:#66d9ef">select</span> s.<span style="color:#f92672">*</span>,c.name c_name <span style="color:#66d9ef">from</span> t1 s <span style="color:#66d9ef">left</span> <span style="color:#66d9ef">join</span> t2 c <span style="color:#66d9ef">on</span> s.course_no <span style="color:#f92672">=</span> c.id;
</code></pre></div></li>
<li>
<p>查出所有班级里的所有学生</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-mysql" data-lang="mysql"><span style="color:#75715e">#主表是班级
</span><span style="color:#75715e"></span><span style="color:#66d9ef">select</span> s.<span style="color:#f92672">*</span>,c.name c_name <span style="color:#66d9ef">from</span> t1 s <span style="color:#66d9ef">right</span> <span style="color:#66d9ef">join</span> t2 c <span style="color:#66d9ef">on</span> s.course_no <span style="color:#f92672">=</span> c.id;
</code></pre></div></li>
</ol>
<h4 id="自然连接">自然连接</h4>
<ul>
<li><code>natural join</code>，是一种自动寻找连接条件的连接查询</li>
<li>自然连接不是一种特殊的连接方式，而是自动匹配条件的连接</li>
<li>自然连接包含
<ul>
<li>自然内连接：<code>natural join</code></li>
<li>自然外连接：<code>natural left/right join</code></li>
</ul>
</li>
<li>自然连接条件匹配模式：自动寻找相同字段名作为连接条件</li>
</ul>
<h5 id="示例-5">示例</h5>
<ol>
<li>
<p>自然连接t1和t2表</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-mysql" data-lang="mysql"><span style="color:#66d9ef">select</span> <span style="color:#f92672">*</span> <span style="color:#66d9ef">from</span> t1 <span style="color:#66d9ef">natural</span> <span style="color:#66d9ef">join</span> t2;
</code></pre></div></li>
<li>
<p>自然连接是不管字段是否有关系，只管名字是否相同，如果想要自然连接成功，那么字段的设计就必须非常规范</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-mysql" data-lang="mysql"><span style="color:#66d9ef">create</span> <span style="color:#66d9ef">table</span> <span style="color:#a6e22e">t11</span>(
	s_id <span style="color:#66d9ef">int</span> <span style="color:#66d9ef">primary</span> <span style="color:#66d9ef">key</span> <span style="color:#66d9ef">auto_increment</span>,
	s_name <span style="color:#66d9ef">varchar</span>(<span style="color:#ae81ff">50</span>) <span style="color:#66d9ef">not</span> <span style="color:#66d9ef">null</span>,
	c_id <span style="color:#66d9ef">int</span> comment <span style="color:#e6db74">&#39;课程id&#39;</span>
)<span style="color:#66d9ef">charset</span> utf8;
<span style="color:#66d9ef">insert</span> <span style="color:#66d9ef">into</span> t11 <span style="color:#66d9ef">select</span> <span style="color:#f92672">*</span> <span style="color:#66d9ef">from</span> t1;

<span style="color:#66d9ef">create</span> <span style="color:#66d9ef">table</span> <span style="color:#a6e22e">t22</span>(
	c_id <span style="color:#66d9ef">int</span> <span style="color:#66d9ef">primary</span> <span style="color:#66d9ef">key</span> <span style="color:#66d9ef">auto_increment</span>,
	c_name <span style="color:#66d9ef">varchar</span>(<span style="color:#ae81ff">50</span>) <span style="color:#66d9ef">not</span> <span style="color:#66d9ef">null</span> <span style="color:#66d9ef">unique</span>
)<span style="color:#66d9ef">charset</span> utf8;
<span style="color:#66d9ef">insert</span> <span style="color:#66d9ef">into</span> t22 <span style="color:#66d9ef">select</span> <span style="color:#f92672">*</span> <span style="color:#66d9ef">from</span> t2;

<span style="color:#75715e"># 自然连接 成功
</span><span style="color:#75715e"></span><span style="color:#66d9ef">select</span> <span style="color:#f92672">*</span> <span style="color:#66d9ef">from</span> t11 <span style="color:#66d9ef">natural</span> <span style="color:#66d9ef">join</span> t22;
</code></pre></div></li>
</ol>
<h4 id="using-关键字">using 关键字</h4>
<ul>
<li>连接查询时，如果是同名字段作为连接条件，<code>using</code>可以代替<code>on</code>出现，且比<code>on</code>更好
<ul>
<li><code>using</code>是针对同名字段（using(id) === A.id = B.id）</li>
<li><code>using</code>关键字使用后会自动合并对应字段为一个</li>
<li><code>using</code>可以同时使用多个字段作为条件</li>
</ul>
</li>
</ul>
<h5 id="示例-6">示例</h5>
<p>查询t11中所有学生信息，包括所在班级名字</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-mysql" data-lang="mysql"><span style="color:#66d9ef">select</span> s.<span style="color:#f92672">*</span>,c.c_name <span style="color:#66d9ef">from</span> t11 s <span style="color:#66d9ef">left</span> <span style="color:#66d9ef">join</span> t22 c <span style="color:#66d9ef">using</span>(c_id);
<span style="color:#66d9ef">select</span> <span style="color:#f92672">*</span> <span style="color:#66d9ef">from</span> t11 s <span style="color:#66d9ef">left</span> <span style="color:#66d9ef">join</span> t22 c <span style="color:#66d9ef">using</span>(c_id);
</code></pre></div><h3 id="子查询">子查询</h3>
<h4 id="子查询分类">子查询分类</h4>
<ul>
<li>根据子查询<strong>出现的位置</strong>或者<strong>产生的数据效果</strong>分类
<ul>
<li>位置分类
<ul>
<li><code>from</code>子查询：子查询出现在from后做数据源</li>
<li><code>where</code>子查询：子查询出现在where后做数据条件</li>
</ul>
</li>
<li>按子查询得到的结果分类
<ul>
<li>标量子查询：子查询返回的结果是一行一列（一个数据）</li>
<li>列子查询：子查询返回的结果是一列多行（一列数据）</li>
<li>行子查询：子查询返回的结果是一行多列（一行数据）</li>
<li>表子查询：子查询返回的结果是一个二维表</li>
<li><code>exists</code>子查询：子查询返回的结果是布尔结果（验证型）</li>
</ul>
</li>
</ul>
</li>
<li>子查询都需要使用括号<code>()</code>包裹，必要时需要对子查询结果进行别名处理（from子查询）</li>
</ul>
<h4 id="标量子查询">标量子查询</h4>
<ul>
<li>通常是用来做其他查询的条件</li>
</ul>
<h5 id="示例-7">示例</h5>
<p>获取computer专业的所有学生</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-mysql" data-lang="mysql"><span style="color:#75715e"># 数据目标：学生表t11
</span><span style="color:#75715e"># 条件：专业名字，不在t11中
</span><span style="color:#75715e"></span>
<span style="color:#66d9ef">select</span> <span style="color:#f92672">*</span> <span style="color:#66d9ef">from</span> t11 <span style="color:#66d9ef">where</span> c_id <span style="color:#f92672">=</span> (<span style="color:#66d9ef">select</span> c_id <span style="color:#66d9ef">from</span> t_22 <span style="color:#66d9ef">where</span> c_name <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;Computer&#39;</span>);
</code></pre></div><h4 id="列子查询">列子查询</h4>
<ul>
<li>通常是用来做查询条件的</li>
</ul>
<h5 id="示例-8">示例</h5>
<p>获取所有有学生的班级信息</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-mysql" data-lang="mysql"><span style="color:#75715e"># 数据获取目标是班级信息
</span><span style="color:#75715e"># 数据获取条件是在学生表中的班级id，是多个
</span><span style="color:#75715e"></span>
<span style="color:#66d9ef">select</span> <span style="color:#f92672">*</span> <span style="color:#66d9ef">from</span> t22 <span style="color:#66d9ef">where</span> c_id <span style="color:#66d9ef">in</span> (<span style="color:#66d9ef">select</span> c_id <span style="color:#66d9ef">from</span> t11);
</code></pre></div><h4 id="行子查询">行子查询</h4>
<ul>
<li>子查询返回的结果是一行多列</li>
<li>行子查询需要条件中构造元素
<ul>
<li><code>(元素1),(元素2),...(元素N)</code></li>
</ul>
</li>
<li>行子查询通常也是用来作为主查询的条件</li>
</ul>
<h5 id="示例-9">示例</h5>
<p>获取学生表中性别和年龄都和弥勒相同的学生信息</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-mysql" data-lang="mysql"><span style="color:#75715e"># 查询条件有多个：性别和年龄
</span><span style="color:#75715e"># 数据的条件的来源在另一张表中
</span><span style="color:#75715e"></span>
<span style="color:#75715e"># 解决思路：两个标量子查询
</span><span style="color:#75715e"></span><span style="color:#66d9ef">select</span> <span style="color:#f92672">*</span> <span style="color:#66d9ef">from</span> t1 <span style="color:#66d9ef">where</span> gender <span style="color:#f92672">=</span> (<span style="color:#66d9ef">select</span> gender <span style="color:#66d9ef">from</span> t2 <span style="color:#66d9ef">where</span> name <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;弥勒&#39;</span>) <span style="color:#66d9ef">and</span> age <span style="color:#f92672">=</span> (<span style="color:#66d9ef">select</span> <span style="color:#66d9ef">from</span> t2 <span style="color:#66d9ef">where</span> name <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;弥勒&#39;</span>);
</code></pre></div><ul>
<li>以上查询方式使用了两次子查询，效率降低</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-mysql" data-lang="mysql"><span style="color:#75715e"># 构造条件行元素(gender,age)
</span><span style="color:#75715e"></span><span style="color:#66d9ef">select</span> <span style="color:#f92672">*</span> <span style="color:#66d9ef">from</span> t1 <span style="color:#66d9ef">where</span> (gender,age) <span style="color:#f92672">=</span> (<span style="color:#66d9ef">select</span> gender,age <span style="color:#66d9ef">from</span> t2 <span style="color:#66d9ef">where</span> name <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;弥勒&#39;</span>);
</code></pre></div><h4 id="表子查询">表子查询</h4>
<ul>
<li>表子查询多出现在<code>from</code>之后，当作数据源</li>
<li>表子查询通常是为了想对数据进行一次加工处理，然后再交给外部进行二次加工处理</li>
</ul>
<h5 id="示例-10">示例</h5>
<p>获取学生表中每个班级里年龄最大的学生信息，然后按年龄降序排序显示</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-mysql" data-lang="mysql"><span style="color:#75715e"># 尝试直接解决
</span><span style="color:#75715e"></span><span style="color:#66d9ef">select</span> <span style="color:#a6e22e">any_value</span>(name),<span style="color:#a6e22e">max</span>(age) m_age, clas_name <span style="color:#66d9ef">from</span> t1 <span style="color:#66d9ef">group</span> <span style="color:#66d9ef">by</span> class_name <span style="color:#66d9ef">order</span> <span style="color:#66d9ef">by</span> m_age <span style="color:#66d9ef">desc</span>;
</code></pre></div><ul>
<li>分组统计中<code>any_value()</code>取的是分组后的第一条数据，而需要的是最大</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-mysql" data-lang="mysql"><span style="color:#75715e"># 解决方案：要入在分组之前将所有班级里的学生本身是降序排序，那么分组的第一条数据就是满足条件的数据，但是问题是order by必须出现在group by之后
</span><span style="color:#75715e"></span><span style="color:#66d9ef">select</span> <span style="color:#a6e22e">any_value</span>(name),<span style="color:#a6e22e">max</span>(age),class_name <span style="color:#66d9ef">from</span> (<span style="color:#66d9ef">select</span> name,age,class_name <span style="color:#66d9ef">from</span> t1 <span style="color:#66d9ef">order</span> <span style="color:#66d9ef">by</span> age <span style="color:#66d9ef">desc</span>) <span style="color:#66d9ef">as</span> t <span style="color:#66d9ef">group</span> <span style="color:#66d9ef">by</span> class_name;
</code></pre></div><ul>
<li>依然无效，原因是MySQL7之后若要子查询中``order by<code>生效，需要像联合查询一样，加上</code>limit`</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-mysql" data-lang="mysql"><span style="color:#66d9ef">select</span> <span style="color:#a6e22e">any_value</span>(name),<span style="color:#a6e22e">max</span>(age),class_name <span style="color:#66d9ef">from</span> (<span style="color:#66d9ef">select</span> name,age,class_name <span style="color:#66d9ef">from</span> t1 <span style="color:#66d9ef">order</span> <span style="color:#66d9ef">by</span> age <span style="color:#66d9ef">desc</span> <span style="color:#66d9ef">limit</span> <span style="color:#ae81ff">99999</span>) <span style="color:#66d9ef">as</span> t <span style="color:#66d9ef">group</span> <span style="color:#66d9ef">by</span> class_name;
</code></pre></div><h4 id="exists子查询">exists子查询</h4>
<ul>
<li><code>exists</code>子查询通常是作为<code>where</code>条件使用
<ul>
<li><code>where exists(子查询)</code></li>
</ul>
</li>
</ul>
<h5 id="示例-11">示例</h5>
<p>获取所有学生的班级信息</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-mysql" data-lang="mysql"><span style="color:#75715e"># 获取的数据是班级表t22
</span><span style="color:#75715e"># 班级是否有学生需要在t11中确认，并不需要t11提供任何数据显示
</span><span style="color:#75715e"></span><span style="color:#66d9ef">select</span> <span style="color:#f92672">*</span> <span style="color:#66d9ef">from</span> t22 c <span style="color:#66d9ef">where</span> <span style="color:#66d9ef">exists</span>(<span style="color:#66d9ef">select</span> c_id <span style="color:#66d9ef">from</span> t11 <span style="color:#66d9ef">where</span> c.c_id <span style="color:#f92672">=</span> c_id);
</code></pre></div><h4 id="比较方式">比较方式</h4>
<ul>
<li>特定的比较方式都是基于比较符号一起使用的</li>
<li><code>all</code>：满足后面全部条件
<ul>
<li><code>&gt;all(结果集)</code>：数据要大于结果集中的全部数据</li>
</ul>
</li>
<li><code>any</code>：满足任何条件
<ul>
<li><code>=any(结果集)</code>：数据只要与结果集中的任何一个元素相等</li>
</ul>
</li>
<li><code>some</code>：满足任意条件(与any完全一样)</li>
<li>结果集：可以是直接的数据也可以是子查询的结果（通常是列子查询）</li>
</ul>
<h5 id="示例-12">示例</h5>
<p>找出t1表中与t2表中年龄相同的信息</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-mysql" data-lang="mysql"><span style="color:#75715e"># 数据获取在t1表
</span><span style="color:#75715e"># 数据条件在t2表
</span><span style="color:#75715e"></span>
<span style="color:#75715e"># 解决方案1：使用in列子查询
</span><span style="color:#75715e"></span><span style="color:#66d9ef">select</span> <span style="color:#f92672">*</span> <span style="color:#66d9ef">from</span> t1 <span style="color:#66d9ef">where</span> age <span style="color:#66d9ef">in</span> (<span style="color:#66d9ef">select</span> <span style="color:#66d9ef">distinct</span> age <span style="color:#66d9ef">from</span> t2);

<span style="color:#75715e"># 解决方案2：使用exists子查询
</span><span style="color:#75715e"></span><span style="color:#66d9ef">select</span> <span style="color:#f92672">*</span> <span style="color:#66d9ef">from</span> t1 <span style="color:#66d9ef">where</span> <span style="color:#66d9ef">exists</span>(<span style="color:#66d9ef">select</span> id <span style="color:#66d9ef">from</span> t2 <span style="color:#66d9ef">where</span> t1.age <span style="color:#f92672">=</span> age);

<span style="color:#75715e"># 解决方案3：使用any或者some匹配（列子查询）
</span><span style="color:#75715e"></span><span style="color:#66d9ef">select</span> <span style="color:#f92672">*</span> <span style="color:#66d9ef">from</span> t1 <span style="color:#66d9ef">where</span> age <span style="color:#f92672">=</span> <span style="color:#a6e22e">some</span>(<span style="color:#66d9ef">select</span> age <span style="color:#66d9ef">from</span> t2);
</code></pre></div>]]></content:encoded>
    </item>
    
    <item>
      <title>MySQL高级SQL操作</title>
      <link>https://www.niuwx.cn/posts/mysql/mysql%E9%AB%98%E7%BA%A7sql%E6%93%8D%E4%BD%9C/</link>
      <pubDate>Wed, 28 Jul 2021 10:31:51 +0800</pubDate>
      
      <guid>https://www.niuwx.cn/posts/mysql/mysql%E9%AB%98%E7%BA%A7sql%E6%93%8D%E4%BD%9C/</guid>
      <description>简单介绍了一下高级SQL操作</description>
      <content:encoded><![CDATA[<p>常见的SQL高级操作，主要集中在数据操作（增删改查），基于基础操作之上实现一些复杂业务的数据操作</p>
<h3 id="数据新增">数据新增</h3>
<p>主要是在新增数据时的高级操作技巧，提升数据插入的效率问题、安全问题。</p>
<h4 id="批量插入">批量插入</h4>
<ul>
<li>
<p>批量插入分两种</p>
<ul>
<li>
<p>全字段批量插入</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-mysql" data-lang="mysql"><span style="color:#66d9ef">insert</span> <span style="color:#66d9ef">into</span> <span style="color:#960050;background-color:#1e0010">表名</span> <span style="color:#66d9ef">values</span>(<span style="color:#960050;background-color:#1e0010">值列表</span><span style="color:#ae81ff">1</span>),(<span style="color:#960050;background-color:#1e0010">值列表</span><span style="color:#ae81ff">2</span>)...(<span style="color:#960050;background-color:#1e0010">值列表</span>n);
</code></pre></div></li>
<li>
<p>部分字段批量插入</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-mysql" data-lang="mysql"><span style="color:#66d9ef">insert</span> <span style="color:#66d9ef">into</span> <span style="color:#960050;background-color:#1e0010">表名</span> (<span style="color:#960050;background-color:#1e0010">字段列表</span>) <span style="color:#66d9ef">values</span>(<span style="color:#960050;background-color:#1e0010">值列表</span><span style="color:#ae81ff">1</span>),(<span style="color:#960050;background-color:#1e0010">值列表</span><span style="color:#ae81ff">2</span>)...(<span style="color:#960050;background-color:#1e0010">值列表</span>n);
</code></pre></div></li>
</ul>
</li>
</ul>
<h5 id="示例">示例</h5>
<ol>
<li>
<p>批量插入学生成绩(全字段)</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-mysql" data-lang="mysql"><span style="color:#66d9ef">insert</span> <span style="color:#66d9ef">into</span> t1 <span style="color:#66d9ef">values</span>(<span style="color:#66d9ef">null</span>,<span style="color:#e6db74">&#39;Tom&#39;</span>,<span style="color:#e6db74">&#39;Computer&#39;</span>,<span style="color:#e6db74">&#39;90&#39;</span>),(<span style="color:#66d9ef">null</span>,<span style="color:#e6db74">&#39;Lily&#39;</span>,<span style="color:#e6db74">&#39;Computer&#39;</span>,<span style="color:#e6db74">&#39;100&#39;</span>);
</code></pre></div></li>
<li>
<p>批量插入学生考试信息(不含成绩)</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-mysql" data-lang="mysql"><span style="color:#66d9ef">insert</span> <span style="color:#66d9ef">into</span> <span style="color:#a6e22e">t1</span> (stu_name,course) <span style="color:#66d9ef">values</span>(<span style="color:#e6db74">&#39;Tony&#39;</span>,<span style="color:#e6db74">&#39;English&#39;</span>),(<span style="color:#e6db74">&#39;Ray&#39;</span>,<span style="color:#e6db74">&#39;Math&#39;</span>);
</code></pre></div></li>
</ol>
<h4 id="蠕虫复制">蠕虫复制</h4>
<ul>
<li>
<p>从已有的表中复制数据直接插入到另外一张表</p>
</li>
<li>
<p>目的是快速增加表中的数据</p>
<ul>
<li>实现表中数据复制（用于数据备份和迁移）</li>
<li>实现数据的指数级递增（多用于测试）</li>
</ul>
</li>
<li>
<p>蠕虫复制语法</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-mysql" data-lang="mysql"><span style="color:#66d9ef">insert</span> <span style="color:#66d9ef">into</span> <span style="color:#960050;background-color:#1e0010">表名</span> [(<span style="color:#960050;background-color:#1e0010">字段列表</span>)] <span style="color:#66d9ef">select</span> <span style="color:#960050;background-color:#1e0010">字段列表</span> <span style="color:#66d9ef">from</span> <span style="color:#960050;background-color:#1e0010">表名</span>;
</code></pre></div></li>
<li>
<p>注意事项</p>
<ul>
<li>字段列表必须对应</li>
<li>字段类型必须匹配</li>
<li>数据冲突需要事先考虑</li>
</ul>
</li>
</ul>
<h5 id="示例-1">示例</h5>
<ol>
<li>
<p>创建一张新表，将t1表中的数据迁移到新表中</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-mysql" data-lang="mysql"><span style="color:#66d9ef">create</span> <span style="color:#66d9ef">table</span> <span style="color:#a6e22e">t2</span>(
	id <span style="color:#66d9ef">int</span> <span style="color:#66d9ef">primary</span> <span style="color:#66d9ef">key</span> <span style="color:#66d9ef">auto_increment</span>,
    stu_name <span style="color:#66d9ef">varchar</span>(<span style="color:#ae81ff">20</span>) <span style="color:#66d9ef">not</span> <span style="color:#66d9ef">null</span>,
    course <span style="color:#66d9ef">varchar</span>(<span style="color:#ae81ff">20</span>) <span style="color:#66d9ef">not</span> <span style="color:#66d9ef">null</span>,
    score <span style="color:#66d9ef">decimal</span>(<span style="color:#ae81ff">5</span>,<span style="color:#ae81ff">2</span>)
)<span style="color:#66d9ef">charset</span> utf8;

<span style="color:#66d9ef">insert</span> <span style="color:#66d9ef">into</span> t2 <span style="color:#66d9ef">select</span> <span style="color:#f92672">*</span> <span style="color:#66d9ef">from</span> t1;
</code></pre></div></li>
<li>
<p>快速让t1表中的数据达到超过100条（重复执行）</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-mysql" data-lang="mysql"><span style="color:#66d9ef">insert</span> <span style="color:#66d9ef">into</span> <span style="color:#a6e22e">t2</span> (stu_name,course,score) <span style="color:#66d9ef">select</span> stu_name,course,score <span style="color:#66d9ef">from</span> t1;
<span style="color:#75715e"># 
</span></code></pre></div></li>
</ol>
<h4 id="主键冲突">主键冲突</h4>
<ul>
<li>
<p>在数据进行插入时包含主键指定，而主键在数据表已经存在</p>
</li>
<li>
<p>主键冲突的业务通常是发生在业务主键上（业务主键本身有业务意义）</p>
</li>
<li>
<p>主键冲突的解决方案</p>
<ul>
<li>
<p>忽略冲突：保留原始记录</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-mysql" data-lang="mysql"><span style="color:#66d9ef">insert</span> <span style="color:#66d9ef">ignore</span> <span style="color:#66d9ef">into</span> <span style="color:#960050;background-color:#1e0010">表名</span> [(<span style="color:#960050;background-color:#1e0010">字段列表</span>)] <span style="color:#66d9ef">values</span>(<span style="color:#960050;background-color:#1e0010">值列表</span>);
<span style="color:#75715e"># 产生主键冲突后，保留原始记录，插入数据无效
</span></code></pre></div></li>
<li>
<p>冲突更新：冲突后部分字段变成更新后的值</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-mysql" data-lang="mysql"><span style="color:#66d9ef">insert</span> <span style="color:#66d9ef">into</span> <span style="color:#960050;background-color:#1e0010">表名</span> [(<span style="color:#960050;background-color:#1e0010">字段列表</span>)] <span style="color:#66d9ef">values</span>(<span style="color:#960050;background-color:#1e0010">值列表</span>) <span style="color:#66d9ef">on</span> duplicate <span style="color:#66d9ef">key</span> <span style="color:#66d9ef">update</span> <span style="color:#960050;background-color:#1e0010">字段</span> <span style="color:#f92672">=</span> <span style="color:#960050;background-color:#1e0010">新值</span>[,<span style="color:#960050;background-color:#1e0010">字段</span><span style="color:#f92672">=</span><span style="color:#960050;background-color:#1e0010">新值</span>...];
<span style="color:#75715e"># 1.尝试新增
</span><span style="color:#75715e"># 2.失败，更新
</span></code></pre></div></li>
<li>
<p>冲突替换：先删除原有记录，后新增记录</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-mysql" data-lang="mysql"><span style="color:#66d9ef">replace</span> <span style="color:#66d9ef">into</span> <span style="color:#960050;background-color:#1e0010">表名</span> [(<span style="color:#960050;background-color:#1e0010">字段列表</span>)] <span style="color:#66d9ef">values</span>(<span style="color:#960050;background-color:#1e0010">值列表</span>);
<span style="color:#75715e">#效率没有insert高（需要检查是否冲突）
</span></code></pre></div></li>
</ul>
</li>
</ul>
<h5 id="示例-2">示例</h5>
<ol>
<li>
<p>用户名作为主键的用户注册（冲突不能覆盖）：username，password，regtime</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-mysql" data-lang="mysql"><span style="color:#66d9ef">create</span> <span style="color:#66d9ef">table</span> <span style="color:#a6e22e">t1</span>(
	<span style="color:#f92672">`</span>username<span style="color:#f92672">`</span> <span style="color:#66d9ef">varchar</span>(<span style="color:#ae81ff">50</span>) <span style="color:#66d9ef">primary</span> <span style="color:#66d9ef">key</span>,
	<span style="color:#f92672">`</span>password<span style="color:#f92672">`</span> <span style="color:#66d9ef">char</span>(<span style="color:#ae81ff">32</span>) <span style="color:#66d9ef">not</span> <span style="color:#66d9ef">null</span>,
	regtime <span style="color:#66d9ef">int</span> <span style="color:#66d9ef">unsigned</span> <span style="color:#66d9ef">not</span> <span style="color:#66d9ef">null</span>
)<span style="color:#66d9ef">charset</span> utf8;

<span style="color:#66d9ef">insert</span> <span style="color:#66d9ef">into</span> t1 <span style="color:#66d9ef">values</span>(<span style="color:#e6db74">&#39;username&#39;</span>,<span style="color:#e6db74">&#39;password&#39;</span>,<span style="color:#ae81ff">1234546789</span>);
<span style="color:#75715e">#冲突忽略，且数据不插入
</span><span style="color:#75715e"></span><span style="color:#66d9ef">insert</span> <span style="color:#66d9ef">ignore</span> <span style="color:#66d9ef">into</span> t1 <span style="color:#66d9ef">values</span>(<span style="color:#e6db74">&#39;username&#39;</span>,<span style="color:#e6db74">&#39;password&#39;</span>,<span style="color:#ae81ff">123456789</span>);
</code></pre></div></li>
<li>
<p>用户名作为主键的记录用户使用信息（不存在新增，存在则更新时间）：username，logintime</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-mysql" data-lang="mysql"><span style="color:#66d9ef">create</span> <span style="color:#66d9ef">table</span> <span style="color:#a6e22e">t1</span>(
	<span style="color:#f92672">`</span>username<span style="color:#f92672">`</span> <span style="color:#66d9ef">varchar</span>(<span style="color:#ae81ff">50</span>) <span style="color:#66d9ef">primary</span> <span style="color:#66d9ef">key</span>,
    logintime <span style="color:#66d9ef">int</span> <span style="color:#66d9ef">unsigned</span>
)<span style="color:#66d9ef">charset</span> utf8;

<span style="color:#66d9ef">insert</span> <span style="color:#66d9ef">into</span> t1 <span style="color:#66d9ef">values</span>(<span style="color:#e6db74">&#39;username&#39;</span>,<span style="color:#ae81ff">12345678</span>);

<span style="color:#75715e">#冲突更新（替换部分字段数据）
</span><span style="color:#75715e"></span><span style="color:#66d9ef">insert</span> <span style="color:#66d9ef">into</span> t1 <span style="color:#66d9ef">values</span>(<span style="color:#e6db74">&#39;username&#39;</span>,<span style="color:#ae81ff">12345678</span>) <span style="color:#66d9ef">on</span> duplicate <span style="color:#66d9ef">key</span> <span style="color:#66d9ef">update</span> logintime <span style="color:#f92672">=</span> <span style="color:#a6e22e">unix_timestamp</span>();
</code></pre></div><ul>
<li>如果主键不冲突：新增</li>
<li>如果主键冲突：更新指定字段</li>
<li>上述方式适用于字段较多，但是可能冲突时数据变化的字段较少</li>
</ul>
</li>
<li>
<p>用户名作为主键，记录用户登录信息（不存在新增、存在则更新全部）：username、login time、clientinfo</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-mysql" data-lang="mysql"><span style="color:#66d9ef">create</span> <span style="color:#66d9ef">table</span> <span style="color:#a6e22e">t1</span>(
	<span style="color:#f92672">`</span>username<span style="color:#f92672">`</span> <span style="color:#66d9ef">varchar</span>(<span style="color:#ae81ff">50</span>) <span style="color:#66d9ef">primary</span> <span style="color:#66d9ef">key</span>,
	logintime <span style="color:#66d9ef">int</span> <span style="color:#66d9ef">unsigned</span>,
	clientinfo <span style="color:#66d9ef">varchar</span>(<span style="color:#ae81ff">255</span>) <span style="color:#66d9ef">not</span> <span style="color:#66d9ef">null</span>
)<span style="color:#66d9ef">charset</span> utf8;

<span style="color:#66d9ef">replace</span> <span style="color:#66d9ef">into</span> t1 <span style="color:#66d9ef">values</span>(<span style="color:#e6db74">&#39;username&#39;</span>,<span style="color:#a6e22e">unix_timestamp</span>(),<span style="color:#e6db74">&#39;{PC:chrome}&#39;</span>);
<span style="color:#66d9ef">replace</span> <span style="color:#66d9ef">into</span> t1 <span style="color:#66d9ef">values</span>(<span style="color:#e6db74">&#39;username&#39;</span>,<span style="color:#a6e22e">unix_timestamp</span>(),<span style="color:#e6db74">&#39;{phone:uc}&#39;</span>);
</code></pre></div><ul>
<li><code>replace</code>遇到主键重复就会先删除、后新增</li>
</ul>
</li>
</ol>
<h3 id="数据查询">数据查询</h3>
<h4 id="查询选项">查询选项</h4>
<ul>
<li>用于对查询结果进行简单数据筛选</li>
<li>查询选项时在<code>select</code>关键字之后，有两个互斥值
<ul>
<li><code>all</code>：默认，表示保留所有记录</li>
<li><code>distinct</code>：去重，重复的记录（所有字段都重复）</li>
</ul>
</li>
</ul>
<h5 id="示例-3">示例</h5>
<p>查看商品表中所有品类的商品信息，重复商品只保留一次（名字、价格、属性都一致）</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-mysql" data-lang="mysql"><span style="color:#66d9ef">create</span> <span style="color:#66d9ef">table</span> <span style="color:#a6e22e">t1</span>(
	id <span style="color:#66d9ef">int</span> <span style="color:#66d9ef">primary</span> <span style="color:#66d9ef">key</span> <span style="color:#66d9ef">auto_increment</span>,
	goods_name <span style="color:#66d9ef">varchar</span>(<span style="color:#ae81ff">50</span>) <span style="color:#66d9ef">not</span> <span style="color:#66d9ef">null</span>,
	goods_price <span style="color:#66d9ef">decimal</span>(<span style="color:#ae81ff">10</span>,<span style="color:#ae81ff">2</span>) <span style="color:#66d9ef">default</span> <span style="color:#ae81ff">0</span>.<span style="color:#ae81ff">00</span>,
	goods_color <span style="color:#66d9ef">varchar</span>(<span style="color:#ae81ff">20</span>),
	goods_weight <span style="color:#66d9ef">int</span> <span style="color:#66d9ef">unsigned</span> comment <span style="color:#e6db74">&#39;重量，单位克&#39;</span>
)<span style="color:#66d9ef">charset</span> utf8;

<span style="color:#66d9ef">insert</span> <span style="color:#66d9ef">into</span> t1 <span style="color:#66d9ef">values</span>(<span style="color:#66d9ef">null</span>,<span style="color:#e6db74">&#39;mate10&#39;</span>,<span style="color:#ae81ff">5499</span>.<span style="color:#ae81ff">00</span>,<span style="color:#e6db74">&#39;blue&#39;</span>,<span style="color:#ae81ff">320</span>),
(<span style="color:#66d9ef">null</span>,<span style="color:#e6db74">&#39;mate10&#39;</span>,<span style="color:#ae81ff">5499</span>.<span style="color:#ae81ff">00</span>,<span style="color:#e6db74">&#39;gray&#39;</span>,<span style="color:#ae81ff">320</span>),
(<span style="color:#66d9ef">null</span>,<span style="color:#e6db74">&#39;nokia3301&#39;</span>,<span style="color:#ae81ff">1299</span>,<span style="color:#e6db74">&#39;black&#39;</span>,<span style="color:#ae81ff">420</span>);

<span style="color:#75715e"># 考虑所有字段的去重（不含逻辑主键）
</span><span style="color:#75715e"></span><span style="color:#66d9ef">select</span> <span style="color:#66d9ef">distinct</span> goods_name,goods_price,goods_color,goods_weight <span style="color:#66d9ef">from</span> t1;

<span style="color:#75715e"># 不考虑颜色去重
</span><span style="color:#75715e"></span><span style="color:#66d9ef">select</span> <span style="color:#66d9ef">distinct</span> goods_name,goods_price,goods_weight <span style="color:#66d9ef">from</span> t1;
</code></pre></div><h4 id="字段选择别名">字段选择&amp;别名</h4>
<ul>
<li><strong>字段选择</strong>：根据实际需求选择的要获取数据的字段信息</li>
<li>根据实际需求，明确所需要的字段名字，使用英文逗号，分隔</li>
<li>获取所有字段，使用星号<code>*</code>通配所有字段</li>
<li>字段数据可以不一定是来自数据源（select只要有结果即可）
<ul>
<li>数据常量：<code>select 1</code></li>
<li>函数或变量：<code>select unix_timestamp(),@@version</code>(@@是系统变量的前缀，后跟变量名)</li>
</ul>
</li>
<li><strong>字段别名</strong>：给字段取的临时名字</li>
<li>字段别名使用<code>as</code>语法实现
<ul>
<li>字段名 <code>as</code> 别名</li>
<li>字段名 别名</li>
</ul>
</li>
<li>字段别名的目的通常为了保护数据
<ul>
<li>字段冲突：多张表同时操作有同名字段（系统默认覆盖），想保留全部</li>
<li>数据安全：对外提供数据不使用真实字段名字</li>
</ul>
</li>
</ul>
<h5 id="示例-4">示例</h5>
<ol>
<li>
<p>查询商品信息</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-mysql" data-lang="mysql"><span style="color:#75715e"># 全部查询
</span><span style="color:#75715e"></span><span style="color:#66d9ef">select</span> <span style="color:#f92672">*</span> <span style="color:#66d9ef">from</span> t1;

<span style="color:#75715e"># 需求为商品名字和商品
</span><span style="color:#75715e"></span><span style="color:#66d9ef">select</span> goods_name,goods_price <span style="color:#66d9ef">from</span> t1;

<span style="color:#75715e"># 别名使用
</span><span style="color:#75715e"></span><span style="color:#66d9ef">select</span> goods_name <span style="color:#66d9ef">as</span> gn,goods_price <span style="color:#66d9ef">as</span> gp <span style="color:#66d9ef">from</span> t1;
</code></pre></div></li>
<li>
<p>不需要数据源的数据获取：select的表达式本身能算出结果</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-mysql" data-lang="mysql"><span style="color:#75715e"># 获取当前时间戳和版本号
</span><span style="color:#75715e"></span><span style="color:#66d9ef">select</span> <span style="color:#a6e22e">unix_timestamp</span>() <span style="color:#66d9ef">as</span> now,<span style="color:#f92672">@@</span>version <span style="color:#66d9ef">as</span> version,<span style="color:#f92672">@@</span>version;
</code></pre></div></li>
</ol>
<h4 id="数据源">数据源</h4>
<ul>
<li>数据来源 <code>from</code>之后</li>
<li>单表数据源：数据源就是一张表 <code>from 表名</code></li>
<li>多表数据源：数据来源是多张表（逗号分隔） <code>from 表名1,表名2,...</code></li>
<li>子查询数据源：数据来源是一个查询结果<code>from (select 字段列表 from 表名) as 别名</code>
<ul>
<li>数据源要求必须是一个表</li>
<li>如果是查询结果必须给其一个表别名</li>
</ul>
</li>
<li>数据表也可以指定别名
<ul>
<li>表名 <code>as</code> 别名</li>
<li>表名 别名</li>
</ul>
</li>
</ul>
<h5 id="示例-5">示例</h5>
<ol>
<li>
<p>单表数据源：最简单的数据源，直接从一个数据表获取</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-mysql" data-lang="mysql"><span style="color:#66d9ef">select</span> <span style="color:#f92672">*</span> <span style="color:#66d9ef">from</span> t1;
</code></pre></div></li>
<li>
<p>多表数据源：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-mysql" data-lang="mysql"><span style="color:#66d9ef">select</span> <span style="color:#f92672">*</span> <span style="color:#66d9ef">from</span> t1,t2;
<span style="color:#75715e"># 利用一张表的一条数据匹配另外一张表的所有记录
</span><span style="color:#75715e"># 记录数=表1记录数*表2记录数
</span><span style="color:#75715e"># 字段数=表1字段数+表2字段数
</span></code></pre></div></li>
<li>
<p>子查询数据源：数据来源是一个select对应的查询结果</p>
<ul>
<li>查询语句需要使用括号</li>
<li>查询结果需要指定别名</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-mysql" data-lang="mysql"><span style="color:#66d9ef">select</span> <span style="color:#f92672">*</span> <span style="color:#66d9ef">from</span> (<span style="color:#66d9ef">select</span> <span style="color:#f92672">*</span> <span style="color:#66d9ef">from</span> t1,t2) t;
</code></pre></div></li>
<li>
<p>如果有时候名字较长或使用不方便，可以利用表别名</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-mysql" data-lang="mysql"><span style="color:#66d9ef">select</span> <span style="color:#f92672">*</span> <span style="color:#66d9ef">from</span> table1 <span style="color:#66d9ef">as</span> t1;

<span style="color:#66d9ef">select</span> t1.<span style="color:#f92672">*</span>,t2.stu_name <span style="color:#66d9ef">from</span> table1 <span style="color:#66d9ef">as</span> t1 table2 <span style="color:#66d9ef">as</span> t2;
</code></pre></div></li>
</ol>
<h4 id="where子句">where子句</h4>
<ul>
<li>跟在<code>from</code>数据源之后，对数据进行条件匹配</li>
<li><code>where</code>是在磁盘读取后，进入内存之前进行筛选
<ul>
<li>不符合条件的数据不会进入内存</li>
</ul>
</li>
<li><code>where</code>筛选的内容因为还没进入内存，所以数据是没有被加工过的
<ul>
<li>字段别名不能在<code>where</code>中使用</li>
</ul>
</li>
</ul>
<h5 id="示例-6">示例</h5>
<ol>
<li>
<p>查询t1表中学生名字为Lily的成绩信息</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-mysql" data-lang="mysql"><span style="color:#66d9ef">select</span> <span style="color:#f92672">*</span> <span style="color:#66d9ef">from</span> t1 <span style="color:#66d9ef">where</span> stu_name <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;Lily&#39;</span>;
</code></pre></div></li>
<li>
<p>因为where是在磁盘取数据时进行条件筛选，此时数据没有进入内存，所以字段别名是无效的</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-mysql" data-lang="mysql"><span style="color:#75715e"># 错误
</span><span style="color:#75715e"></span><span style="color:#66d9ef">select</span> stu_name sn,score <span style="color:#66d9ef">from</span> t1 <span style="color:#66d9ef">where</span> name <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;Lily&#39;</span>;
</code></pre></div></li>
</ol>
<h4 id="运算符">运算符</h4>
<ul>
<li>比较运算符
<ul>
<li><code>&gt;</code>、<code>&lt;</code>、<code>=</code>（即是赋值又是等于）、<code>&gt;=</code>、<code>&lt;=</code>、<code>&lt;&gt;</code>(不等于)</li>
<li><code>between A and B</code>  ：A和B之间，包括A和B本身，数值比较</li>
<li><code>in (数据1,数据2,...数据N)</code>：在列举的数据之中</li>
<li><code>like 'pattern'</code>：上面这样的，用于字符串比较
<ul>
<li><code>_</code>：单下划线，匹配对应位置的一个任意字符</li>
<li><code>%</code>：匹配当前位置往后任意数量任意字符</li>
</ul>
</li>
</ul>
</li>
<li>逻辑运算符
<ul>
<li><code>and(逻辑与)</code>、<code>or(逻辑或)</code>、<code>not(逻辑非)</code></li>
</ul>
</li>
<li>null运算符
<ul>
<li><code>is null(为空)</code>、<code>is not null(不为空)</code></li>
</ul>
</li>
</ul>
<h5 id="示例-7">示例</h5>
<ol>
<li>
<p>查询成绩不及格的所有学生信息</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-mysql" data-lang="mysql"><span style="color:#66d9ef">select</span> <span style="color:#f92672">*</span> <span style="color:#66d9ef">from</span> t1 <span style="color:#66d9ef">where</span> score <span style="color:#f92672">&lt;</span> <span style="color:#ae81ff">60</span>;
</code></pre></div></li>
<li>
<p>查询成绩在60-90之间的学生信息</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-mysql" data-lang="mysql"><span style="color:#66d9ef">select</span> <span style="color:#f92672">*</span> <span style="color:#66d9ef">from</span> t1 <span style="color:#66d9ef">where</span> <span style="color:#66d9ef">between</span> <span style="color:#ae81ff">60</span> ans <span style="color:#ae81ff">90</span>;
<span style="color:#66d9ef">select</span> <span style="color:#f92672">*</span> <span style="color:#66d9ef">from</span> t1 <span style="color:#66d9ef">where</span> score <span style="color:#f92672">&gt;=</span> <span style="color:#ae81ff">60</span> <span style="color:#66d9ef">and</span> score <span style="color:#f92672">&lt;=</span><span style="color:#ae81ff">90</span>;
</code></pre></div></li>
<li>
<p>查询没有成绩的学生</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-mysql" data-lang="mysql"><span style="color:#66d9ef">select</span> <span style="color:#f92672">*</span> <span style="color:#66d9ef">from</span> t1 <span style="color:#66d9ef">where</span> score <span style="color:#66d9ef">is</span> <span style="color:#66d9ef">null</span>;
</code></pre></div></li>
</ol>
<h4 id="group-by-子句">group by 子句</h4>
<ul>
<li>分组统计，根据某个字段所有的<strong>结果分类</strong>，并进行<strong>数据统计分析</strong></li>
<li>分组的目的不是为了显示数据，一定是为了统计数据</li>
<li><code>group by</code>子句一定是出现在<code>where</code>字句之后（如果同时存在）</li>
<li>分组统计可以进行统计细分：先分大组，然后大组分小组</li>
<li>分组统计需要使用统计函数
<ul>
<li><code>group_concat()</code>：将组里的某个字段全部保留</li>
<li><code>any_value()</code>：不属于分组字段的任意一个组里的值</li>
<li><code>count()</code>：求对应分组的记录数量
<ul>
<li><code>count(字段名)</code>：统计某个字段值的数量（NULL不统计）</li>
<li><code>count(*)</code>：统计整个记录的数量（较多）</li>
</ul>
</li>
<li><code>sum()</code>：求对应分组中某个字段的和</li>
<li><code>max()/min()</code>：求对应分组中某个字段的最大/最小值</li>
<li><code>avg()</code>：求对应分组中某个字段的平均值</li>
</ul>
</li>
</ul>
<h5 id="示例-8">示例</h5>
<ol>
<li>
<p>创建一张表，存储学生信息</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-mysql" data-lang="mysql"><span style="color:#66d9ef">create</span> <span style="color:#66d9ef">table</span> <span style="color:#a6e22e">t1</span>(
	id <span style="color:#66d9ef">int</span> <span style="color:#66d9ef">primary</span> <span style="color:#66d9ef">key</span> <span style="color:#66d9ef">auto_increment</span>,
    <span style="color:#f92672">`</span>name<span style="color:#f92672">`</span> <span style="color:#66d9ef">varchar</span>(<span style="color:#ae81ff">10</span>) <span style="color:#66d9ef">not</span> <span style="color:#66d9ef">null</span>,
	<span style="color:#f92672">`</span>gender<span style="color:#f92672">`</span> <span style="color:#66d9ef">enum</span>(<span style="color:#e6db74">&#39;男&#39;</span>,<span style="color:#e6db74">&#39;女&#39;</span>,<span style="color:#e6db74">&#39;保密&#39;</span>),
    age <span style="color:#66d9ef">tinyint</span> <span style="color:#66d9ef">unsigned</span> <span style="color:#66d9ef">not</span> <span style="color:#66d9ef">null</span>,
    class_name <span style="color:#66d9ef">varchar</span>(<span style="color:#ae81ff">10</span>) <span style="color:#66d9ef">not</span> <span style="color:#66d9ef">null</span> comment <span style="color:#e6db74">&#39;班级名称&#39;</span>
)<span style="color:#66d9ef">charset</span> utf8;

<span style="color:#66d9ef">insert</span> <span style="color:#66d9ef">into</span> t1 <span style="color:#66d9ef">values</span>(<span style="color:#66d9ef">null</span>,<span style="color:#e6db74">&#39;鸣人&#39;</span>,<span style="color:#e6db74">&#39;男&#39;</span>,<span style="color:#ae81ff">18</span>,<span style="color:#e6db74">&#39;木叶1班&#39;</span>),
(<span style="color:#66d9ef">null</span>,<span style="color:#e6db74">&#39;佐助&#39;</span>,<span style="color:#e6db74">&#39;男&#39;</span>,<span style="color:#ae81ff">18</span>,<span style="color:#e6db74">&#39;木叶1班&#39;</span>),
(<span style="color:#66d9ef">null</span>,<span style="color:#e6db74">&#39;小樱&#39;</span>,<span style="color:#e6db74">&#39;女&#39;</span>,<span style="color:#ae81ff">18</span>,<span style="color:#e6db74">&#39;木叶1班&#39;</span>),
(<span style="color:#66d9ef">null</span>,<span style="color:#e6db74">&#39;佐井&#39;</span>,<span style="color:#e6db74">&#39;男&#39;</span>,<span style="color:#ae81ff">18</span>,<span style="color:#e6db74">&#39;木叶1班&#39;</span>),
(<span style="color:#66d9ef">null</span>,<span style="color:#e6db74">&#39;大蛇丸&#39;</span>,<span style="color:#e6db74">&#39;男&#39;</span>,<span style="color:#ae81ff">28</span>,<span style="color:#e6db74">&#39;木叶0班&#39;</span>),
(<span style="color:#66d9ef">null</span>,<span style="color:#e6db74">&#39;卡卡西&#39;</span>,<span style="color:#e6db74">&#39;男&#39;</span>,<span style="color:#ae81ff">29</span>,<span style="color:#e6db74">&#39;木叶2班&#39;</span>),
(<span style="color:#66d9ef">null</span>,<span style="color:#e6db74">&#39;雏田&#39;</span>,<span style="color:#e6db74">&#39;女&#39;</span>,<span style="color:#ae81ff">18</span>,<span style="color:#e6db74">&#39;木叶1班&#39;</span>),
(<span style="color:#66d9ef">null</span>,<span style="color:#e6db74">&#39;我爱罗&#39;</span>,<span style="color:#e6db74">&#39;男&#39;</span>,<span style="color:#ae81ff">18</span>,<span style="color:#e6db74">&#39;木叶1班&#39;</span>),
(<span style="color:#66d9ef">null</span>,<span style="color:#e6db74">&#39;向日葵&#39;</span>,<span style="color:#e6db74">&#39;女&#39;</span>,<span style="color:#ae81ff">8</span>,<span style="color:#e6db74">&#39;木叶10班&#39;</span>),
(<span style="color:#66d9ef">null</span>,<span style="color:#e6db74">&#39;博人&#39;</span>,<span style="color:#e6db74">&#39;男&#39;</span>,<span style="color:#ae81ff">8</span>,<span style="color:#e6db74">&#39;木叶10班&#39;</span>),
(<span style="color:#66d9ef">null</span>,<span style="color:#e6db74">&#39;鼬&#39;</span>,<span style="color:#e6db74">&#39;男&#39;</span>,<span style="color:#ae81ff">28</span>,<span style="color:#e6db74">&#39;木叶0班&#39;</span>),
(<span style="color:#66d9ef">null</span>,<span style="color:#e6db74">&#39;带土&#39;</span>,<span style="color:#e6db74">&#39;男&#39;</span>,<span style="color:#ae81ff">28</span>,<span style="color:#e6db74">&#39;木叶2班&#39;</span>),
(<span style="color:#66d9ef">null</span>,<span style="color:#e6db74">&#39;琳&#39;</span>,<span style="color:#e6db74">&#39;女&#39;</span>,<span style="color:#ae81ff">27</span>,<span style="color:#e6db74">&#39;木叶2班&#39;</span>)<span style="color:#960050;background-color:#1e0010">；</span>
</code></pre></div></li>
<li>
<p>统计每个班的人数</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-mysql" data-lang="mysql"><span style="color:#66d9ef">SELECT</span> <span style="color:#a6e22e">COUNT</span>(<span style="color:#f92672">*</span>),class_name <span style="color:#66d9ef">from</span> t1 <span style="color:#66d9ef">group</span> <span style="color:#66d9ef">by</span> class_name;
</code></pre></div></li>
<li>
<p>多分组：统计每个班的男女学生数量</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-mysql" data-lang="mysql"><span style="color:#66d9ef">SELECT</span> <span style="color:#a6e22e">COUNT</span>(<span style="color:#f92672">*</span>),class_name,gender <span style="color:#66d9ef">from</span> t1 <span style="color:#66d9ef">group</span> <span style="color:#66d9ef">by</span> class_name,gender;
</code></pre></div></li>
<li>
<p>统计每个班里的人数，并记录班级学生的名字</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-mysql" data-lang="mysql"><span style="color:#66d9ef">SELECT</span> <span style="color:#a6e22e">COUNT</span>(<span style="color:#f92672">*</span>),<span style="color:#a6e22e">group_concat</span>(<span style="color:#f92672">`</span>name<span style="color:#f92672">`</span>) <span style="color:#66d9ef">from</span> t1 <span style="color:#66d9ef">group</span> <span style="color:#66d9ef">by</span> class_name;
</code></pre></div></li>
</ol>
<h4 id="回溯统计">回溯统计</h4>
<ul>
<li>在进行分组时（通常是多分组），每一次结果的回溯都进行一次汇总统计</li>
<li>回溯统计语法：在统计之后使用<code>with rollup</code></li>
</ul>
<h5 id="示例-9">示例</h5>
<p>统计每个班的男女同学数量，同时要知道班级人数总数</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-mysql" data-lang="mysql"><span style="color:#75715e"># 只统计每个班的男女同学数量，没有班级汇总
</span><span style="color:#75715e"></span><span style="color:#66d9ef">SELECT</span> <span style="color:#a6e22e">COUNT</span>(<span style="color:#f92672">*</span>),class_name,gender,<span style="color:#a6e22e">group_concat</span>(<span style="color:#f92672">`</span>name<span style="color:#f92672">`</span>) <span style="color:#66d9ef">from</span> t1 <span style="color:#66d9ef">group</span> <span style="color:#66d9ef">by</span> class_name,gender;

<span style="color:#75715e"># 汇总统计：回溯
</span><span style="color:#75715e"></span><span style="color:#66d9ef">SELECT</span> <span style="color:#a6e22e">count</span>(<span style="color:#f92672">*</span>),class_name,gender,<span style="color:#a6e22e">group_concat</span>(<span style="color:#f92672">`</span>name<span style="color:#f92672">`</span>) <span style="color:#66d9ef">from</span> t1 <span style="color:#66d9ef">group</span> <span style="color:#66d9ef">by</span> class_name,gender <span style="color:#66d9ef">with</span> rollup;
</code></pre></div><h4 id="分组排序">分组排序</h4>
<ul>
<li>在分组后统计结果，根据分组字段进行升序或者降序显示数据</li>
<li>默认系统自动升序排序</li>
<li>可以设定分组结果的排序方式
<ul>
<li><code>group by 字段名 [ASC]</code>：升序</li>
<li><code>group by 字段名 DESC</code>：降序</li>
</ul>
</li>
</ul>
<h5 id="示例-10">示例</h5>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-mysql" data-lang="mysql"><span style="color:#66d9ef">SELECT</span> <span style="color:#a6e22e">COUNT</span>(<span style="color:#f92672">*</span>),class_name,gender,<span style="color:#a6e22e">group_concat</span>(<span style="color:#f92672">`</span>name<span style="color:#f92672">`</span>),<span style="color:#a6e22e">any_value</span>(<span style="color:#f92672">`</span>name<span style="color:#f92672">`</span>) <span style="color:#66d9ef">from</span> t1 <span style="color:#66d9ef">group</span> <span style="color:#66d9ef">by</span> class_name,gender <span style="color:#66d9ef">desc</span>;
</code></pre></div><h4 id="having子句">having子句</h4>
<ul>
<li>类似于<code>where</code>子句，是用来进行条件筛选数据的</li>
<li><code>having</code>子句本身是针对<strong>分组统计结果进行条件筛选</strong>的</li>
<li><code>having</code>子句必须出现在<code>group by</code>子句之后（如果同时存在）</li>
<li><code>having</code>针对的数据是在内存里已经加载的数据</li>
<li><code>having</code>几乎能做<code>where</code>能做的所有事，但是<code>where</code>却不一定
<ul>
<li>字段别名（where针对磁盘数据，在处理时还没有别名）</li>
<li>统计结果（where在group by之前）</li>
<li>分组统计函数（having通常是针对group by存在的）</li>
</ul>
</li>
</ul>
<h5 id="示例-11">示例</h5>
<ol>
<li>
<p>获取班级人数小于3的班级</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-mysql" data-lang="mysql"><span style="color:#66d9ef">SELECT</span> <span style="color:#a6e22e">COUNT</span>(<span style="color:#f92672">*</span>) <span style="color:#66d9ef">as</span> <span style="color:#f92672">`</span>count<span style="color:#f92672">`</span>,class_name,<span style="color:#a6e22e">group_concat</span>(<span style="color:#f92672">`</span>name<span style="color:#f92672">`</span>) <span style="color:#66d9ef">from</span> t1 <span style="color:#66d9ef">group</span> <span style="color:#66d9ef">by</span> class_name <span style="color:#66d9ef">having</span> count <span style="color:#f92672">&lt;</span> <span style="color:#ae81ff">3</span>;

<span style="color:#66d9ef">SELECT</span> <span style="color:#a6e22e">COUNT</span>(<span style="color:#f92672">*</span>) <span style="color:#66d9ef">as</span> <span style="color:#f92672">`</span>count<span style="color:#f92672">`</span> ,class_name,<span style="color:#a6e22e">group_concat</span>(<span style="color:#f92672">`</span>name<span style="color:#f92672">`</span>) <span style="color:#66d9ef">from</span> t1 <span style="color:#66d9ef">group</span> <span style="color:#66d9ef">by</span> class_name <span style="color:#66d9ef">having</span> <span style="color:#a6e22e">COUNT</span>(<span style="color:#f92672">*</span>) <span style="color:#f92672">&lt;</span> <span style="color:#ae81ff">3</span>;
<span style="color:#75715e"># 多用了一次函数（效率降低）
</span><span style="color:#75715e"></span>
<span style="color:#66d9ef">SELECT</span> class_name,<span style="color:#a6e22e">group_concat</span>(<span style="color:#f92672">`</span>name<span style="color:#f92672">`</span>) <span style="color:#66d9ef">from</span> t1 <span style="color:#66d9ef">group</span> <span style="color:#66d9ef">by</span> class_name <span style="color:#66d9ef">having</span> <span style="color:#a6e22e">COUNT</span>(<span style="color:#f92672">*</span>) <span style="color:#f92672">&lt;</span> <span style="color:#ae81ff">3</span>;
</code></pre></div></li>
</ol>
<h4 id="order-by子句">order by子句</h4>
<ul>
<li>排序，根据某个指定的字段进行升序或者降序</li>
<li>排序的参照物是校对集</li>
<li><code>order by</code>子句在having子句字后（如果同时存在）</li>
<li>排序分为升序和降序：默认升序
<ul>
<li><code>order by 字段 [ASC]</code>：升序</li>
<li><code>order by 字段 DESC</code>：降序</li>
</ul>
</li>
<li>多字段排序：在根据某个字段排序好之后，可以再细分</li>
</ul>
<h5 id="示例-12">示例</h5>
<ol>
<li>
<p>单字段：按照年龄升序</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-mysql" data-lang="mysql"><span style="color:#66d9ef">select</span> <span style="color:#f92672">*</span> <span style="color:#66d9ef">from</span> t1 <span style="color:#66d9ef">order</span> <span style="color:#66d9ef">by</span> age;
<span style="color:#66d9ef">select</span> <span style="color:#f92672">*</span> <span style="color:#66d9ef">from</span> t1 <span style="color:#66d9ef">order</span> <span style="color:#66d9ef">by</span> age <span style="color:#66d9ef">asc</span>;
</code></pre></div></li>
<li>
<p>多字段：先性别降序，后年龄升序</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-mysql" data-lang="mysql"><span style="color:#66d9ef">select</span> <span style="color:#f92672">*</span> <span style="color:#66d9ef">from</span> t1 <span style="color:#66d9ef">order</span> <span style="color:#66d9ef">by</span> gender <span style="color:#66d9ef">desc</span>, age;
<span style="color:#66d9ef">select</span> <span style="color:#f92672">*</span> <span style="color:#66d9ef">from</span> t1 <span style="color:#66d9ef">order</span> <span style="color:#66d9ef">by</span> gender <span style="color:#66d9ef">desc</span>, age <span style="color:#66d9ef">asc</span>;
</code></pre></div></li>
</ol>
<h4 id="limit子句">limit子句</h4>
<ul>
<li>限制数据的获取数量</li>
<li><code>limit</code>子句必须在<code>order by</code>子句之后（如果同时存在）</li>
<li><code>limit</code>限制数量方式有两种
<ul>
<li><code>limit 数量</code></li>
<li><code>limit 起始位置,数量</code></li>
</ul>
</li>
</ul>
<h5 id="示例-13">示例</h5>
<ol>
<li>
<p>获取表中前3条</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-mysql" data-lang="mysql"><span style="color:#66d9ef">select</span> <span style="color:#f92672">*</span> <span style="color:#66d9ef">from</span> t1 <span style="color:#66d9ef">limit</span> <span style="color:#ae81ff">3</span>;
</code></pre></div></li>
<li>
<p>获取表中第三条开始之后的3条数据</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-mysql" data-lang="mysql"><span style="color:#66d9ef">select</span> <span style="color:#f92672">*</span> <span style="color:#66d9ef">from</span> t1 <span style="color:#66d9ef">limit</span> <span style="color:#ae81ff">3</span>,<span style="color:#ae81ff">3</span>;
</code></pre></div></li>
</ol>
<h3 id="数据更新">数据更新</h3>
<h4 id="限制更新">限制更新</h4>
<ul>
<li>更新时对更新的记录数进行限制</li>
<li>限制更新通过limit实现</li>
<li>其实是局部更新的一种手段，一般更多情况下依据条件精确更新</li>
</ul>
<h4 id="示例-14">示例</h4>
<p>对会员选3个发送10元红包</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-mysql" data-lang="mysql"><span style="color:#66d9ef">CREATE</span> <span style="color:#66d9ef">table</span> <span style="color:#a6e22e">t1</span>(
    id <span style="color:#66d9ef">int</span> <span style="color:#66d9ef">primary</span> <span style="color:#66d9ef">key</span> <span style="color:#66d9ef">auto_increment</span>,
    <span style="color:#f92672">`</span>username<span style="color:#f92672">`</span> <span style="color:#66d9ef">varchar</span>(<span style="color:#ae81ff">50</span>) <span style="color:#66d9ef">not</span> <span style="color:#66d9ef">null</span> <span style="color:#66d9ef">unique</span>,
    <span style="color:#f92672">`</span>password<span style="color:#f92672">`</span> <span style="color:#66d9ef">char</span>(<span style="color:#ae81ff">12</span>) <span style="color:#66d9ef">not</span> <span style="color:#66d9ef">null</span>,
    account <span style="color:#66d9ef">decimal</span>(<span style="color:#ae81ff">10</span>,<span style="color:#ae81ff">2</span>) <span style="color:#66d9ef">default</span> <span style="color:#ae81ff">0</span>.<span style="color:#ae81ff">00</span>
)<span style="color:#66d9ef">charset</span> utf8;

<span style="color:#66d9ef">INSERT</span> <span style="color:#66d9ef">INTO</span> t1 <span style="color:#66d9ef">VALUES</span>(<span style="color:#66d9ef">null</span>,<span style="color:#e6db74">&#39;username1&#39;</span>,<span style="color:#e6db74">&#39;password&#39;</span>,<span style="color:#66d9ef">default</span>),
(<span style="color:#66d9ef">null</span>,<span style="color:#e6db74">&#39;username2&#39;</span>,<span style="color:#e6db74">&#39;password&#39;</span>,<span style="color:#66d9ef">default</span>),
(<span style="color:#66d9ef">null</span>,<span style="color:#e6db74">&#39;username3&#39;</span>,<span style="color:#e6db74">&#39;password&#39;</span>,<span style="color:#66d9ef">default</span>),
(<span style="color:#66d9ef">null</span>,<span style="color:#e6db74">&#39;username4&#39;</span>,<span style="color:#e6db74">&#39;password&#39;</span>,<span style="color:#66d9ef">default</span>),
(<span style="color:#66d9ef">null</span>,<span style="color:#e6db74">&#39;username5&#39;</span>,<span style="color:#e6db74">&#39;password&#39;</span>,<span style="color:#66d9ef">default</span>),
(<span style="color:#66d9ef">null</span>,<span style="color:#e6db74">&#39;username6&#39;</span>,<span style="color:#e6db74">&#39;password&#39;</span>,<span style="color:#66d9ef">default</span>),
(<span style="color:#66d9ef">null</span>,<span style="color:#e6db74">&#39;username7&#39;</span>,<span style="color:#e6db74">&#39;password&#39;</span>,<span style="color:#66d9ef">default</span>);

<span style="color:#66d9ef">UPDATE</span> t1 <span style="color:#66d9ef">set</span> account <span style="color:#f92672">=</span> account <span style="color:#f92672">+</span> <span style="color:#ae81ff">10</span> <span style="color:#66d9ef">LIMIT</span> <span style="color:#ae81ff">3</span>;

<span style="color:#66d9ef">SELECT</span> <span style="color:#f92672">*</span> <span style="color:#66d9ef">from</span> t1;
</code></pre></div><h3 id="数据删除">数据删除</h3>
<h4 id="限制删除">限制删除</h4>
<ul>
<li>限制要删除的记录数</li>
<li>使用<code>limit</code>限制</li>
<li>一般很少使用，通常使用<code>where</code>条件精确删除</li>
</ul>
<h5 id="示例-15">示例</h5>
<p>删除没有账户余额的一个用户</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-mysql" data-lang="mysql"><span style="color:#66d9ef">delete</span> <span style="color:#66d9ef">from</span> t1 <span style="color:#66d9ef">where</span> account <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span> <span style="color:#66d9ef">limit</span> <span style="color:#ae81ff">1</span>;
</code></pre></div><h4 id="清空数据">清空数据</h4>
<ul>
<li>将表中的数据清楚，表的所有状态回到原始状态</li>
<li>本质是先删除，后创建</li>
<li>清空后可以使表的一些变化状态回到原始状态，例如自增长回归初值</li>
<li>清空语法：<code>truncate 表名</code></li>
</ul>
<h5 id="示例-16">示例</h5>
<p>清空用户数据表</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-mysql" data-lang="mysql">truncate t1;
</code></pre></div>]]></content:encoded>
    </item>
    
    <item>
      <title>范式和表关系</title>
      <link>https://www.niuwx.cn/posts/mysql/%E8%8C%83%E5%BC%8F%E5%92%8C%E8%A1%A8%E5%85%B3%E7%B3%BB/</link>
      <pubDate>Mon, 26 Jul 2021 10:31:51 +0800</pubDate>
      
      <guid>https://www.niuwx.cn/posts/mysql/%E8%8C%83%E5%BC%8F%E5%92%8C%E8%A1%A8%E5%85%B3%E7%B3%BB/</guid>
      <description>简单介绍了一下范式和表关系</description>
      <content:encoded><![CDATA[<h3 id="关系型数据库设计范式">关系型数据库设计范式</h3>
<ul>
<li><code>Normal Format</code>，符合某一种级别的关系模式的集合，表示一个关系内部各个属性之间的联系的合理化程度</li>
<li>范式是离散数学的概念</li>
<li>范式目标是在满足组织和存储的前提下使数据结构冗余最小化</li>
<li>范式级别越高，表的级别就越标准</li>
<li>目前数据库应用的范式有以下几层
<ul>
<li>第一范式：1NF</li>
<li>第二范式：2NF</li>
<li>第三范式：3NF</li>
<li>逆规范化</li>
</ul>
</li>
</ul>
<h4 id="示例">示例</h4>
<ol>
<li>员工表
<table>
<thead>
<tr>
<th style="text-align:center">工号</th>
<th style="text-align:center">姓名</th>
<th style="text-align:center">部门</th>
<th style="text-align:center">入职时间</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">0001</td>
<td style="text-align:center">张三</td>
<td style="text-align:center">人事部</td>
<td style="text-align:center">2021-07-26</td>
</tr>
<tr>
<td style="text-align:center">0002</td>
<td style="text-align:center">李四</td>
<td style="text-align:center">运营部</td>
<td style="text-align:center">2021-07-26</td>
</tr>
</tbody>
</table>
</li>
</ol>
<p>每个员工都与部门挂钩，但是部门不可能有很多，所以上述表中会有很多数据重复，此时应该将部门单独维护出来，减少数据冗余。</p>
<table>
<thead>
<tr>
<th style="text-align:center">部门编号</th>
<th style="text-align:center">部门名称</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">1</td>
<td style="text-align:center">人事部</td>
</tr>
<tr>
<td style="text-align:center">2</td>
<td style="text-align:center">运营部</td>
</tr>
</tbody>
</table>
<table>
<thead>
<tr>
<th style="text-align:center">工号</th>
<th style="text-align:center">姓名</th>
<th style="text-align:center">部门</th>
<th style="text-align:center">入职时间</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">0001</td>
<td style="text-align:center">张三</td>
<td style="text-align:center">1</td>
<td style="text-align:center">2021-07-26</td>
</tr>
<tr>
<td style="text-align:center">0002</td>
<td style="text-align:center">李四</td>
<td style="text-align:center">2</td>
<td style="text-align:center">2021-07-26</td>
</tr>
</tbody>
</table>
<blockquote>
<p>范式一共有6层，但是数据库的设计通常只要求满足3层即可。</p>
</blockquote>
<h4 id="第一范式1nf">第一范式1NF</h4>
<ul>
<li><code>1NF</code>，数据字段设计时必须满足原子性</li>
<li><code>1NF</code>要求字段数据是不需要拆分就可以直接使用</li>
<li>如果数据使用的时候需要进行拆分那么就违背<code>1NF</code></li>
</ul>
<blockquote>
<p>步骤</p>
<ol>
<li>设计的字段是否在使用的时候还需要再拆分</li>
<li>将数据拆分到最小单位，设计字段</li>
<li>满足1NF</li>
</ol>
</blockquote>
<h5 id="示例-1">示例</h5>
<table>
<thead>
<tr>
<th style="text-align:center">姓名</th>
<th style="text-align:center">性别</th>
<th style="text-align:center">课程</th>
<th style="text-align:center">教室</th>
<th>成绩</th>
<th>学习时间</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">张三</td>
<td style="text-align:center">男</td>
<td style="text-align:center">C++</td>
<td style="text-align:center">101</td>
<td>100</td>
<td>2月1日-2月15日</td>
</tr>
<tr>
<td style="text-align:center">李四</td>
<td style="text-align:center">女</td>
<td style="text-align:center">C</td>
<td style="text-align:center">102</td>
<td>100</td>
<td>2月1日-2月15日</td>
</tr>
<tr>
<td style="text-align:center">王五</td>
<td style="text-align:center">男</td>
<td style="text-align:center">JAVA</td>
<td style="text-align:center">103</td>
<td>100</td>
<td>2月1日-2月15日</td>
</tr>
</tbody>
</table>
<p>当前表的学习时间在使用的时候肯定是基于开始时间和结束时间的，而这种设计会存在使用时的数据拆分，不满足原子性，同时也不满足<code>1NF</code>。</p>
<table>
<thead>
<tr>
<th style="text-align:center">姓名</th>
<th style="text-align:center">性别</th>
<th style="text-align:center">课程</th>
<th style="text-align:center">教室</th>
<th>成绩</th>
<th style="text-align:center">开始时间</th>
<th style="text-align:center">结束时间</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">张三</td>
<td style="text-align:center">男</td>
<td style="text-align:center">C++</td>
<td style="text-align:center">101</td>
<td>100</td>
<td style="text-align:center">2月1日</td>
<td style="text-align:center">2月15日</td>
</tr>
<tr>
<td style="text-align:center">李四</td>
<td style="text-align:center">女</td>
<td style="text-align:center">C</td>
<td style="text-align:center">102</td>
<td>100</td>
<td style="text-align:center">2月1日</td>
<td style="text-align:center">2月15日</td>
</tr>
<tr>
<td style="text-align:center">王五</td>
<td style="text-align:center">男</td>
<td style="text-align:center">JAVA</td>
<td style="text-align:center">103</td>
<td>100</td>
<td style="text-align:center">2月1日</td>
<td style="text-align:center">2月15日</td>
</tr>
</tbody>
</table>
<h4 id="第二范式2nf">第二范式2NF</h4>
<ul>
<li><code>2NF</code>，字段设计不能存在部分依赖</li>
<li>部份依赖：首先表存在复合主键，其次有的字段不是依赖整个主键，而只是依赖主键中的一部分</li>
<li>部份依赖解决：让所有非主属性都依赖一个候选关键字
<ul>
<li>最简单方式：取消复合主键（一般选用逻辑主键替代，但是本质依然是复合主键做主），所有非主属性都依赖主属性（逻辑主键）</li>
<li>正确方式：将部分依赖关系独立成表</li>
</ul>
</li>
</ul>
<h5 id="示例-2">示例</h5>
<p>学生成绩中学生和课程应该是决定性关系，因此属于主属性（主键）</p>
<table>
<thead>
<tr>
<th style="text-align:center">姓名(P)</th>
<th style="text-align:center">性别</th>
<th style="text-align:center">课程(P)</th>
<th style="text-align:center">教室</th>
<th>成绩</th>
<th style="text-align:center">开始时间</th>
<th style="text-align:center">结束时间</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">张三</td>
<td style="text-align:center">男</td>
<td style="text-align:center">C++</td>
<td style="text-align:center">101</td>
<td>100</td>
<td style="text-align:center">2月1日</td>
<td style="text-align:center">2月15日</td>
</tr>
<tr>
<td style="text-align:center">李四</td>
<td style="text-align:center">女</td>
<td style="text-align:center">C</td>
<td style="text-align:center">102</td>
<td>100</td>
<td style="text-align:center">2月1日</td>
<td style="text-align:center">2月15日</td>
</tr>
<tr>
<td style="text-align:center">王五</td>
<td style="text-align:center">男</td>
<td style="text-align:center">JAVA</td>
<td style="text-align:center">103</td>
<td>100</td>
<td style="text-align:center">2月1日</td>
<td style="text-align:center">2月15日</td>
</tr>
</tbody>
</table>
<ul>
<li>成绩是由<strong>学生</strong>和<strong>课程</strong>决定的，是完全依赖主属性</li>
<li>性别只依赖<strong>学生</strong>（部份依赖）</li>
<li>教室、开始时间和结束时间依赖<strong>课程</strong>（部份依赖）</li>
</ul>
<p>解决方案：将学生信息维护到一张表，课程信息维护到一张表，成绩表取两个表的主属性即可</p>
<p><strong>学生表</strong></p>
<table>
<thead>
<tr>
<th style="text-align:center">Stu_id(P)</th>
<th style="text-align:center">姓名</th>
<th style="text-align:center">性别</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">1</td>
<td style="text-align:center">张三</td>
<td style="text-align:center">男</td>
</tr>
<tr>
<td style="text-align:center">2</td>
<td style="text-align:center">李四</td>
<td style="text-align:center">女</td>
</tr>
<tr>
<td style="text-align:center">3</td>
<td style="text-align:center">王五</td>
<td style="text-align:center">男</td>
</tr>
</tbody>
</table>
<ul>
<li>Stu_id是姓名的代指属性（逻辑主键，本质主键是姓名）</li>
<li>性别只依赖主属性</li>
</ul>
<p><strong>课程表</strong></p>
<table>
<thead>
<tr>
<th style="text-align:center">Class_id(P)</th>
<th style="text-align:center">课程</th>
<th style="text-align:center">教室</th>
<th style="text-align:center">开始时间</th>
<th style="text-align:center">结束时间</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">1</td>
<td style="text-align:center">C++</td>
<td style="text-align:center">101</td>
<td style="text-align:center">2月1日</td>
<td style="text-align:center">2月15日</td>
</tr>
<tr>
<td style="text-align:center">2</td>
<td style="text-align:center">C</td>
<td style="text-align:center">102</td>
<td style="text-align:center">2月1日</td>
<td style="text-align:center">2月15日</td>
</tr>
<tr>
<td style="text-align:center">3</td>
<td style="text-align:center">JAVA</td>
<td style="text-align:center">103</td>
<td style="text-align:center">2月1日</td>
<td style="text-align:center">2月15日</td>
</tr>
</tbody>
</table>
<ul>
<li>Class_id是课程的代指属性（逻辑主键）</li>
<li>教室、开始时间和结束时间都依赖课程</li>
</ul>
<p><strong>成绩表</strong></p>
<table>
<thead>
<tr>
<th style="text-align:center">Stu_id(P)</th>
<th style="text-align:center">Class_id(P)</th>
<th style="text-align:center">成绩</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">1</td>
<td style="text-align:center">1</td>
<td style="text-align:center">100</td>
</tr>
<tr>
<td style="text-align:center">2</td>
<td style="text-align:center">2</td>
<td style="text-align:center">100</td>
</tr>
<tr>
<td style="text-align:center">3</td>
<td style="text-align:center">3</td>
<td style="text-align:center">100</td>
</tr>
</tbody>
</table>
<ul>
<li>Stu_id和Class_id共同组成主属性（复合主键）</li>
<li>成绩依赖Stu_id和Class_id本身，不存在部份依赖</li>
</ul>
<h4 id="第三范式3nf">第三范式3NF</h4>
<ul>
<li><code>3NF</code>，字段设计不能存在传递依赖</li>
<li>传递依赖：字段某个非主属性不直接依赖主属性，而是通过依赖某个其他非主属性而传递到主属性之上</li>
<li>传递依赖解决：让依赖非主属性的字段与依赖字段独立成表</li>
</ul>
<h5 id="示例-3">示例</h5>
<table>
<thead>
<tr>
<th style="text-align:center">学号(P)</th>
<th style="text-align:center">姓名</th>
<th style="text-align:center">专业编号</th>
<th style="text-align:center">专业名称</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">1</td>
<td style="text-align:center">张三</td>
<td style="text-align:center">0001001</td>
<td style="text-align:center">软件工程</td>
</tr>
<tr>
<td style="text-align:center">2</td>
<td style="text-align:center">李四</td>
<td style="text-align:center">0001002</td>
<td style="text-align:center">土木工程</td>
</tr>
</tbody>
</table>
<ul>
<li>姓名和专业编号都依赖于学号</li>
<li>专业名称依赖于专业编号</li>
<li>专业名称间接依赖学号：依赖传递</li>
<li>随着学生增加，专业名字会出现大量数据冗余</li>
</ul>
<p>解决方案：将存储传递依赖部分的字段独立成表，然后在需要使用相关信息的时候，引入即可。</p>
<p><strong>专业表</strong></p>
<table>
<thead>
<tr>
<th style="text-align:center">专业编号(P)</th>
<th style="text-align:center">专业名称</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">0001001</td>
<td style="text-align:center">软件工程</td>
</tr>
<tr>
<td style="text-align:center">0001002</td>
<td style="text-align:center">土木工程</td>
</tr>
</tbody>
</table>
<p><strong>学生表</strong></p>
<table>
<thead>
<tr>
<th style="text-align:center">学号(P)</th>
<th style="text-align:center">姓名</th>
<th style="text-align:center">专业编号</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">1</td>
<td style="text-align:center">张三</td>
<td style="text-align:center">0001001</td>
</tr>
<tr>
<td style="text-align:center">2</td>
<td style="text-align:center">李四</td>
<td style="text-align:center">0001002</td>
</tr>
</tbody>
</table>
<h4 id="逆规范化">逆规范化</h4>
<ul>
<li>为了提升数据查询的效率而刻意违背范式的规则</li>
<li>逆规范化的目标是为了提升数据访问效率</li>
<li>所谓逆规范化就是减少表之间的关联查询（效率降低），刻意增加数据冗余。</li>
</ul>
<h3 id="表关系">表关系</h3>
<ul>
<li>一个表代表一个实体，实体之间都有关联关系</li>
<li>根据范式的要求来设计表关系，减少数据冗余</li>
<li>根据实际需求来设计表关系，提升访问效率</li>
</ul>
<h5 id="示例-4">示例</h5>
<p>设计一个简单的新闻管理系统的数据库</p>
<ul>
<li>新闻信息表：id、标题、内容、发布时间、作者id（作者主属性）、分类id（分类表主属性）、阅读量、推荐数</li>
<li>作者表：id、作者名字、作者来源id（来源表）</li>
<li>来源表：id、来源名字、来源描述</li>
<li>分类表：id、分类名字、分类级别（父分类id）</li>
<li>评论表：id、评论人id（评论人表）、评论时间、评论内容</li>
<li>评论人表：id、评论人名字</li>
</ul>
<h4 id="一对一关系">一对一关系</h4>
<ul>
<li>一张表中的一条记录与另外一张表中有且仅有一条记录有关系</li>
<li>一对一关系通常是用来将一张原本就是议题的表拆分成两张表
<ul>
<li>频繁使用部分：常用字段</li>
<li>不常使用部分：生僻字段</li>
<li>使用相同的主键对应</li>
</ul>
</li>
<li>一对一关系设计较多使用在优化方面</li>
</ul>
<h5 id="示例-5">示例</h5>
<table>
<thead>
<tr>
<th style="text-align:center">学号(P)</th>
<th style="text-align:center">姓名</th>
<th style="text-align:center">性别</th>
<th style="text-align:center">年龄</th>
<th style="text-align:center">身高</th>
<th style="text-align:center">体重</th>
<th style="text-align:center">籍贯</th>
<th style="text-align:center">政治面貌</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">1</td>
<td style="text-align:center">张三</td>
<td style="text-align:center">男</td>
<td style="text-align:center">20</td>
<td style="text-align:center">185</td>
<td style="text-align:center">160</td>
<td style="text-align:center">山西</td>
<td style="text-align:center">农民</td>
</tr>
<tr>
<td style="text-align:center">2</td>
<td style="text-align:center">李四</td>
<td style="text-align:center">女</td>
<td style="text-align:center">21</td>
<td style="text-align:center">168</td>
<td style="text-align:center">110</td>
<td style="text-align:center">山西</td>
<td style="text-align:center">党员</td>
</tr>
</tbody>
</table>
<ul>
<li>姓名、性别、年龄属于常用字段，频繁查询</li>
</ul>
<p><strong>一对一关系设计</strong></p>
<ul>
<li>将常用字段取出，与学号组合成一张常用表</li>
<li>将不常用字段取出，与学号组成一张不常用表</li>
<li>表与表数据对应关系：基于学号（唯一）是一对一关系</li>
</ul>
<p><strong>常用表</strong></p>
<table>
<thead>
<tr>
<th style="text-align:center">学号(P)</th>
<th style="text-align:center">姓名</th>
<th style="text-align:center">性别</th>
<th style="text-align:center">年龄</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">1</td>
<td style="text-align:center">张三</td>
<td style="text-align:center">男</td>
<td style="text-align:center">20</td>
</tr>
<tr>
<td style="text-align:center">2</td>
<td style="text-align:center">李四</td>
<td style="text-align:center">女</td>
<td style="text-align:center">21</td>
</tr>
</tbody>
</table>
<p><strong>不常用表</strong></p>
<table>
<thead>
<tr>
<th style="text-align:center">学号(P)</th>
<th style="text-align:center">身高</th>
<th style="text-align:center">体重</th>
<th style="text-align:center">籍贯</th>
<th style="text-align:center">政治面貌</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">1</td>
<td style="text-align:center">185</td>
<td style="text-align:center">160</td>
<td style="text-align:center">山西</td>
<td style="text-align:center">农民</td>
</tr>
<tr>
<td style="text-align:center">2</td>
<td style="text-align:center">168</td>
<td style="text-align:center">110</td>
<td style="text-align:center">山西</td>
<td style="text-align:center">党员</td>
</tr>
</tbody>
</table>
<h4 id="一对多关系">一对多关系</h4>
<ul>
<li>
<p>又称多对一关系，一张表中的一条记录与另外一张表的多条记录对应，反过来另外一张表的多条记录只能对应当前表的一条记录</p>
</li>
<li>
<p>一对多关系是实体中非常常见的一种关系，实体设计时也应用非常多</p>
</li>
<li>
<p>一对多关系的核心解决方案是如何让记录能够正确匹配到另外表中的数据</p>
<ul>
<li>一表设计：一表记录在另外一张表中有多条记录，所在无法记录多个字段</li>
<li>多表设计：多表记录在另外一张表中只有一条记录，可以设置字段记录对应的主属性（通常主键）</li>
</ul>
</li>
</ul>
<h5 id="示例-6">示例</h5>
<p>老师与学科间的关系：一个老师只能教一个学科，但是一个学科可有多个老师来教。</p>
<p><strong>老师表</strong></p>
<table>
<thead>
<tr>
<th style="text-align:center">老师ID(P)</th>
<th style="text-align:center">姓名</th>
<th style="text-align:center">性别</th>
<th style="text-align:center">年龄</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">1</td>
<td style="text-align:center">张三</td>
<td style="text-align:center">男</td>
<td style="text-align:center">25</td>
</tr>
<tr>
<td style="text-align:center">2</td>
<td style="text-align:center">李四</td>
<td style="text-align:center">女</td>
<td style="text-align:center">26</td>
</tr>
<tr>
<td style="text-align:center">3</td>
<td style="text-align:center">王五</td>
<td style="text-align:center">男</td>
<td style="text-align:center">29</td>
</tr>
</tbody>
</table>
<p><strong>学科表</strong></p>
<table>
<thead>
<tr>
<th style="text-align:center">学科ID(P)</th>
<th style="text-align:center">学科名称</th>
<th style="text-align:center">课时长度</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">1</td>
<td style="text-align:center">C++</td>
<td style="text-align:center">600</td>
</tr>
<tr>
<td style="text-align:center">2</td>
<td style="text-align:center">JAVA</td>
<td style="text-align:center">800</td>
</tr>
</tbody>
</table>
<ul>
<li>以上两个实体没有体现彼此之间的关联关系</li>
<li>实际上讲师与学科之间肯定是有关联的</li>
</ul>
<p>在多表中增加字段维护一表</p>
<table>
<thead>
<tr>
<th style="text-align:center">老师ID(P)</th>
<th style="text-align:center">姓名</th>
<th style="text-align:center">性别</th>
<th style="text-align:center">年龄</th>
<th style="text-align:center">学科ID</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">1</td>
<td style="text-align:center">张三</td>
<td style="text-align:center">男</td>
<td style="text-align:center">25</td>
<td style="text-align:center">1</td>
</tr>
<tr>
<td style="text-align:center">2</td>
<td style="text-align:center">李四</td>
<td style="text-align:center">女</td>
<td style="text-align:center">26</td>
<td style="text-align:center">2</td>
</tr>
<tr>
<td style="text-align:center">3</td>
<td style="text-align:center">王五</td>
<td style="text-align:center">男</td>
<td style="text-align:center">29</td>
<td style="text-align:center">1</td>
</tr>
</tbody>
</table>
<h4 id="多对多关系">多对多关系</h4>
<ul>
<li>一张表中的一条记录对应另外一个表中多条记录，反过来一样</li>
<li>多对多关系在实体中是最常见的关系</li>
<li>多对多是无法在自身表中维护对应关系（违背1NF），需要通过第三方表来实现多对多关系变成多个多对一关系
<ul>
<li>设计一个中间表，记录两张表之间的对应关系（主属性）</li>
<li>中间表与其他表都是多对一关系</li>
</ul>
</li>
</ul>
<h5 id="示例-7">示例</h5>
<p>老师与学生之间的关系：一个老师教多个学生，一个学生也会被多个老师教，实体关系为多对多。</p>
<p><strong>老师表</strong></p>
<table>
<thead>
<tr>
<th style="text-align:center">老师ID(P)</th>
<th style="text-align:center">姓名</th>
<th style="text-align:center">性别</th>
<th style="text-align:center">年龄</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">1</td>
<td style="text-align:center">张老师</td>
<td style="text-align:center">男</td>
<td style="text-align:center">25</td>
</tr>
<tr>
<td style="text-align:center">2</td>
<td style="text-align:center">李老师</td>
<td style="text-align:center">女</td>
<td style="text-align:center">26</td>
</tr>
<tr>
<td style="text-align:center">3</td>
<td style="text-align:center">王老师</td>
<td style="text-align:center">男</td>
<td style="text-align:center">29</td>
</tr>
</tbody>
</table>
<p><strong>学生表</strong></p>
<table>
<thead>
<tr>
<th style="text-align:center">学生ID(P)</th>
<th style="text-align:center">姓名</th>
<th style="text-align:center">性别</th>
<th style="text-align:center">年龄</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">1</td>
<td style="text-align:center">张三</td>
<td style="text-align:center">男</td>
<td style="text-align:center">20</td>
</tr>
<tr>
<td style="text-align:center">2</td>
<td style="text-align:center">李四</td>
<td style="text-align:center">女</td>
<td style="text-align:center">21</td>
</tr>
<tr>
<td style="text-align:center">3</td>
<td style="text-align:center">王五</td>
<td style="text-align:center">男</td>
<td style="text-align:center">19</td>
</tr>
</tbody>
</table>
<ul>
<li>以上实体没有从结构上体现表之间的关系</li>
</ul>
<p>增加一个中间表</p>
<p><strong>中间表</strong></p>
<table>
<thead>
<tr>
<th style="text-align:center">ID(P)</th>
<th style="text-align:center">学生ID</th>
<th style="text-align:center">老师ID</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">1</td>
<td style="text-align:center">1</td>
<td style="text-align:center">1</td>
</tr>
<tr>
<td style="text-align:center">2</td>
<td style="text-align:center">1</td>
<td style="text-align:center">2</td>
</tr>
<tr>
<td style="text-align:center">3</td>
<td style="text-align:center">1</td>
<td style="text-align:center">3</td>
</tr>
<tr>
<td style="text-align:center">4</td>
<td style="text-align:center">2</td>
<td style="text-align:center">1</td>
</tr>
<tr>
<td style="text-align:center">5</td>
<td style="text-align:center">2</td>
<td style="text-align:center">2</td>
</tr>
<tr>
<td style="text-align:center">6</td>
<td style="text-align:center">2</td>
<td style="text-align:center">3</td>
</tr>
<tr>
<td style="text-align:center">7</td>
<td style="text-align:center">3</td>
<td style="text-align:center">1</td>
</tr>
<tr>
<td style="text-align:center">8</td>
<td style="text-align:center">3</td>
<td style="text-align:center">2</td>
</tr>
<tr>
<td style="text-align:center">9</td>
<td style="text-align:center">3</td>
<td style="text-align:center">3</td>
</tr>
</tbody>
</table>]]></content:encoded>
    </item>
    
    <item>
      <title>字段</title>
      <link>https://www.niuwx.cn/posts/mysql/%E5%AD%97%E6%AE%B5/</link>
      <pubDate>Tue, 20 Jul 2021 10:31:51 +0800</pubDate>
      
      <guid>https://www.niuwx.cn/posts/mysql/%E5%AD%97%E6%AE%B5/</guid>
      <description>简单介绍了一下字符集校对集</description>
      <content:encoded><![CDATA[<h3 id="字段类型">字段类型</h3>
<ul>
<li>字段类型在定义表结构时设定</li>
<li>设定好字段类型后，插入数据时必须与字段类型对应，否则数据错误</li>
<li>MySQL有四大数据类型
<ul>
<li>整数类型</li>
<li>小数类型</li>
<li>字符串类型</li>
<li>时间日期类型</li>
</ul>
</li>
</ul>
<h4 id="整数类型">整数类型</h4>
<ul>
<li>MySQL中为了数据空间的有效使用，设定了五种整数类型
<ul>
<li>迷你整型：<code>tinyint</code>，使用<strong>1个字节</strong>存储整数，最多存储256个整数(-128~127)</li>
<li>短整型：<code>smallint</code>，使用<strong>2个字节</strong>存储整数</li>
<li>中整型：<code>mediumint</code>，使用<strong>3个字节</strong>存储整数</li>
<li>标准整型：<code>int</code>，使用<strong>4个字节</strong>存储整数</li>
<li>大整型：<code>bigint</code>，使用<strong>8个字节</strong>存储整数</li>
</ul>
</li>
<li>数值型存储在MySQL中分为有符号（有负数）和无符号（纯正数）</li>
</ul>
<blockquote>
<p>步骤</p>
<ol>
<li>确定数据的格式是存储整数</li>
<li>预估整数的范围，选择合适的整数类型</li>
<li>确定整数是否需要符号（负数区间）</li>
</ol>
</blockquote>
<h5 id="示例">示例</h5>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-mysql" data-lang="mysql"><span style="color:#75715e"># 年龄：无负数，正常年龄不会超过256，迷你整型
</span><span style="color:#75715e"></span><span style="color:#66d9ef">create</span> <span style="color:#66d9ef">table</span> <span style="color:#a6e22e">t1</span>(
	age <span style="color:#66d9ef">tinyint</span> <span style="color:#66d9ef">unsigned</span> <span style="color:#75715e">#unsigned修饰整数，表示无符号
</span><span style="color:#75715e"></span>)<span style="color:#66d9ef">charset</span> utf8;
</code></pre></div><h4 id="显示宽度">显示宽度</h4>
<ul>
<li>显示宽度一般是该整数类型能表示的最大值对应的数字个数（通过desc查看字段表显示）</li>
<li>显示宽度包括符号（如果允许为负数，<code>-</code>负号会增加一个宽度）</li>
<li>显示宽度可以主动控制</li>
<li>显示宽度不会影响类型能表示的最大数值</li>
<li>可以通过<code>zerofill</code>让不够宽度的数值补充到对应宽度：在字段类型后使用<code>zerofill</code></li>
</ul>
<h5 id="示例-1">示例</h5>
<ol>
<li>
<p>有符号和无符号对应的宽度不一样</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-mysql" data-lang="mysql"><span style="color:#66d9ef">create</span> <span style="color:#66d9ef">table</span> <span style="color:#a6e22e">t1</span>(
	a <span style="color:#66d9ef">tinyint</span>,
    b <span style="color:#66d9ef">tinyint</span> <span style="color:#66d9ef">unsigned</span>
)<span style="color:#66d9ef">charset</span> utf8;
</code></pre></div></li>
<li>
<p>可以主动控制显示宽度</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-mysql" data-lang="mysql"><span style="color:#66d9ef">alter</span> <span style="color:#66d9ef">table</span> t1 <span style="color:#66d9ef">add</span> c <span style="color:#66d9ef">tinyint</span>(<span style="color:#ae81ff">2</span>) <span style="color:#66d9ef">unsigned</span>;
</code></pre></div></li>
<li>
<p>显示宽度不影响数据的大小</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-mysql" data-lang="mysql"><span style="color:#66d9ef">insert</span> <span style="color:#66d9ef">into</span> t1 <span style="color:#66d9ef">values</span>(<span style="color:#ae81ff">1</span>,<span style="color:#ae81ff">1</span>,<span style="color:#ae81ff">1</span>);
<span style="color:#66d9ef">insert</span> <span style="color:#66d9ef">into</span> t1 <span style="color:#66d9ef">values</span>(<span style="color:#ae81ff">100</span>,<span style="color:#ae81ff">100</span>,<span style="color:#ae81ff">100</span>);
</code></pre></div></li>
<li>
<p>可以通过<code>zerofill</code>让小于显示宽度的数值前置补充0到显示宽度</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-mysql" data-lang="mysql"><span style="color:#66d9ef">alter</span> <span style="color:#66d9ef">table</span> t1 <span style="color:#66d9ef">add</span> d <span style="color:#66d9ef">tinyint</span>(<span style="color:#ae81ff">2</span>) <span style="color:#66d9ef">zerofill</span>; <span style="color:#75715e"># 0填充只能针对正数
</span><span style="color:#75715e"></span><span style="color:#66d9ef">insert</span> <span style="color:#66d9ef">into</span> t1 <span style="color:#66d9ef">values</span>(<span style="color:#ae81ff">1</span>,<span style="color:#ae81ff">1</span>,<span style="color:#ae81ff">1</span>,<span style="color:#ae81ff">1</span>);
</code></pre></div></li>
</ol>
<h4 id="小数类型浮点型">小数类型（浮点型）</h4>
<ul>
<li>
<p>无法保证精度</p>
</li>
<li>
<p>浮点数又称为精度数据，分为两种</p>
<ul>
<li>单精度：<code>float</code>，使用4个字节存储，精度范围为7~8位有效数字</li>
<li>双精度：<code>double</code>，使用8个字节存储，精度范围位15~16位有效数字</li>
</ul>
</li>
<li>
<p>浮点数超过精度范围会自动进行<strong>四舍五入</strong></p>
</li>
<li>
<p>精度可以指定整数部分和小数部分</p>
<ul>
<li>默认不指定，整数部分不超过最大值，小数部分保留2位</li>
<li>可以指定：float/double（总长度，小数部分长度）</li>
</ul>
</li>
<li>
<p>可以使用科学计数法插入数据</p>
</li>
</ul>
<blockquote>
<p>步骤</p>
<ol>
<li>确定当前设计的字段的数据为不精确型数据（或者小数）</li>
<li>确定数据的大小或者精度的要求范围
<ul>
<li>6~7位有效数字使用float</li>
<li>14~15位有效数字使用double</li>
</ul>
</li>
<li>确定精度的分布：整数部分和小数部分</li>
</ol>
</blockquote>
<h5 id="示例-2">示例</h5>
<ol>
<li>
<p>记录商品的价格</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-mysql" data-lang="mysql"><span style="color:#66d9ef">create</span> <span style="color:#66d9ef">table</span> <span style="color:#a6e22e">t1</span>(
	goods_name <span style="color:#66d9ef">varchar</span>(<span style="color:#ae81ff">20</span>),
    goods_price <span style="color:#66d9ef">float</span>
)<span style="color:#66d9ef">charset</span> utf8;

<span style="color:#66d9ef">insert</span> <span style="color:#66d9ef">into</span> t1 <span style="color:#66d9ef">values</span>(<span style="color:#e6db74">&#34;lala&#34;</span>,<span style="color:#ae81ff">19</span>.<span style="color:#ae81ff">99</span>);  <span style="color:#75715e">#正常保留
</span><span style="color:#75715e"></span><span style="color:#66d9ef">insert</span> <span style="color:#66d9ef">into</span> t1 <span style="color:#66d9ef">values</span>(<span style="color:#e6db74">&#34;haha&#34;</span>,<span style="color:#ae81ff">1999</span>.<span style="color:#ae81ff">9999</span>);   <span style="color:#75715e">#四舍五入成2000
</span></code></pre></div></li>
</ol>
<h4 id="小数类型定点型">小数类型（定点型）</h4>
<ul>
<li>可以保证精度</li>
<li>不固定存储空间存储</li>
<li>每9个数字使用4个字节存储</li>
<li>定点型可以指定整数部分长度和小数部分长度
<ul>
<li>默认不指定：10位有效整数，0位小数</li>
<li>可以指定：decimal(有效数位，小数部分数位)</li>
<li>有效数位不超过65个</li>
</ul>
</li>
<li>数据规范
<ul>
<li>整数部分超出报错</li>
<li>小数部分超出四舍五入</li>
</ul>
</li>
</ul>
<blockquote>
<p>步骤</p>
<ol>
<li>确定小数是否需要保证精度</li>
<li>确定有效数位长度</li>
</ol>
</blockquote>
<h5 id="示例-3">示例</h5>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-mysql" data-lang="mysql"><span style="color:#75715e"># 资产和负债应该都是精确的，小数部分可以到分
</span><span style="color:#75715e"></span><span style="color:#66d9ef">create</span> <span style="color:#66d9ef">table</span> <span style="color:#a6e22e">t1</span>(
	money <span style="color:#66d9ef">decimal</span>(<span style="color:#ae81ff">14</span>,<span style="color:#ae81ff">2</span>),
	bet <span style="color:#66d9ef">decimal</span>(<span style="color:#ae81ff">10</span>,<span style="color:#ae81ff">2</span>)
)<span style="color:#66d9ef">charset</span> utf8;

<span style="color:#66d9ef">insert</span> <span style="color:#66d9ef">into</span> t1 <span style="color:#66d9ef">values</span>(<span style="color:#ae81ff">1111111111</span>.<span style="color:#ae81ff">12</span>,<span style="color:#ae81ff">1111111</span>.<span style="color:#ae81ff">99</span>); 
<span style="color:#66d9ef">insert</span> <span style="color:#66d9ef">into</span> t1 <span style="color:#66d9ef">values</span>(<span style="color:#ae81ff">1111111111</span>.<span style="color:#ae81ff">12</span>,<span style="color:#ae81ff">111111111111111</span>.<span style="color:#ae81ff">99</span>)<span style="color:#75715e"># 整数部分超出报错
</span><span style="color:#75715e"></span><span style="color:#66d9ef">insert</span> <span style="color:#66d9ef">into</span> t1 <span style="color:#66d9ef">values</span>(<span style="color:#ae81ff">1111111111</span>.<span style="color:#ae81ff">12</span>,<span style="color:#ae81ff">1111111</span>.<span style="color:#ae81ff">999</span>)<span style="color:#75715e"># 四舍五入
</span><span style="color:#75715e"></span><span style="color:#66d9ef">insert</span> <span style="color:#66d9ef">into</span> t1 <span style="color:#66d9ef">values</span>(<span style="color:#ae81ff">1111111111</span>.<span style="color:#ae81ff">12</span>,<span style="color:#ae81ff">99999999</span>.<span style="color:#ae81ff">999</span>)<span style="color:#75715e"># 四舍五入导致整数部分超出报错
</span></code></pre></div><h4 id="字符串类型定长型">字符串类型（定长型）</h4>
<ul>
<li>定长型：char(L)，指定固定长度的存储空间存储字符串</li>
<li>定长是指定存储长度</li>
<li>定长的长度是字符数量而不是字节
<ul>
<li>L的最大值是255</li>
<li>实际存储空间：$L字符数*字符集对应字节数$</li>
</ul>
</li>
<li>定长里存储的数据不能超过指定长度</li>
<li>字符串数据使用单引号或者双引号包裹</li>
</ul>
<blockquote>
<p>步骤</p>
<ol>
<li>确定数据类型为字符串（或不能用整数存储的超长数字符号）</li>
<li>确定数据长度基本一致（定长占用固定空间）</li>
<li>确定具体长度</li>
</ol>
</blockquote>
<h5 id="示例-4">示例</h5>
<p>记录个人信息：身份证信息和手机号码</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-mysql" data-lang="mysql"><span style="color:#75715e"># 身份证为固定长度18为
</span><span style="color:#75715e"># 手机号码为11位固定长度
</span><span style="color:#75715e"></span><span style="color:#66d9ef">create</span> <span style="color:#66d9ef">table</span> <span style="color:#a6e22e">t1</span>(
	id_number <span style="color:#66d9ef">char</span>(<span style="color:#ae81ff">18</span>),
    phone_number <span style="color:#66d9ef">char</span>(<span style="color:#ae81ff">11</span>)
)<span style="color:#66d9ef">charset</span> utf8;

<span style="color:#66d9ef">insert</span> <span style="color:#66d9ef">into</span> t1 <span style="color:#66d9ef">values</span>(<span style="color:#e6db74">&#39;142629190001016666&#39;</span>,<span style="color:#e6db74">&#39;12345678910&#39;</span>);
</code></pre></div><h4 id="字符串类型变长型">字符串类型（变长型）</h4>
<ul>
<li>变长型：varchar(L)，根据实际存储的数据变化存储空间</li>
<li>变长型的存储空间是由实际存储数据决定的</li>
<li>变长型的L也是指字符而不是字节
<ul>
<li>L指定的是最大存储的数据长度</li>
<li>L最大值理论是65535</li>
<li>变长需要额外产生1-2个字节，用来记录实际数据的长度
<ul>
<li>数据长度小于256，多1个字节</li>
<li>数据长度大于256，多2个字节</li>
</ul>
</li>
<li>实际存储空间：$实际字符数*字符集对应字节数+记录长度$</li>
</ul>
</li>
<li>变长数据不能超过定义的最大长度</li>
</ul>
<blockquote>
<p>步骤</p>
<ol>
<li>确定数据类型为字符串</li>
<li>确定数据是不规则的数据</li>
<li>确定最大长度</li>
</ol>
</blockquote>
<h5 id="示例-5">示例</h5>
<p>记录个人信息：用户名、密码、姓名、身份证</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-mysql" data-lang="mysql"><span style="color:#75715e"># 用户名不确定长度，最长不超过50个字符
</span><span style="color:#75715e"># 密码不确定长度，最长不超过16个字符
</span><span style="color:#75715e"># 姓名不确定长度，最长不超过10个字符
</span><span style="color:#75715e"># 身份证固定长度，18个字符
</span><span style="color:#75715e"></span><span style="color:#66d9ef">create</span> <span style="color:#66d9ef">table</span> <span style="color:#a6e22e">t1</span>(
	<span style="color:#f92672">`</span>username<span style="color:#f92672">`</span> <span style="color:#66d9ef">varchar</span>(<span style="color:#ae81ff">50</span>),
	<span style="color:#f92672">`</span>password<span style="color:#f92672">`</span> <span style="color:#66d9ef">varchar</span>(<span style="color:#ae81ff">16</span>),
 	<span style="color:#f92672">`</span>name<span style="color:#f92672">`</span> <span style="color:#66d9ef">varchar</span>(<span style="color:#ae81ff">10</span>),
    <span style="color:#f92672">`</span>id_number<span style="color:#f92672">`</span> <span style="color:#66d9ef">char</span>(<span style="color:#ae81ff">18</span>)
)<span style="color:#66d9ef">charset</span> utf8;
<span style="color:#75715e"># 使用``包括字段名，防止字段名与关键字重名导致报错
</span><span style="color:#75715e"></span>
<span style="color:#66d9ef">insert</span> <span style="color:#66d9ef">into</span> t1 <span style="color:#66d9ef">values</span>(<span style="color:#e6db74">&#39;username&#39;</span>,<span style="color:#e6db74">&#39;password&#39;</span>,<span style="color:#e6db74">&#39;name&#39;</span>,<span style="color:#e6db74">&#39;14262919000101666&#39;</span>);
</code></pre></div><h4 id="字符串类型文本字符串">字符串类型（文本字符串）</h4>
<ul>
<li><code>test/blob</code>，专门用来存储较长的文本</li>
<li>文本字符串包含两大类
<ul>
<li><code>test</code>：普通字符
<ul>
<li><code>tinytext</code>：迷你文本，不超过$2^8-1$个字符</li>
<li><code>text</code>：普通文本，不超过$2^{16}-1$个字符</li>
<li><code>mediumtext</code>：中型文本，不超过$2^{24}-1$个字符</li>
<li><code>longtext</code>：长文本，不超过$2^{32}-1$个字符（4G）</li>
</ul>
</li>
<li><code>blob</code>：二进制字符（与text类似）
<ul>
<li><code>tinyblob</code></li>
<li><code>blob</code></li>
<li><code>mediumblob</code></li>
<li><code>longblob</code></li>
</ul>
</li>
</ul>
</li>
<li>文本字符串会自动根据文本长度选择合适的具体类型</li>
<li>一般在文本超过255个字符时，都会使用text（blob现在极少使用）</li>
</ul>
<blockquote>
<p>步骤</p>
<ol>
<li>确定类型为文本文件</li>
<li>确定数据长度可能超过255个字符</li>
<li>使用text</li>
</ol>
</blockquote>
<h5 id="示例-6">示例</h5>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-mysql" data-lang="mysql"><span style="color:#75715e"># 标题一般不会超过50个字符，varchar
</span><span style="color:#75715e"># 作者一般不会超过10个字符，varchar
</span><span style="color:#75715e"># 内容通常都很长，使用text
</span><span style="color:#75715e"></span><span style="color:#66d9ef">create</span> <span style="color:#66d9ef">table</span> <span style="color:#a6e22e">t1</span>(
	author <span style="color:#66d9ef">varchar</span>(<span style="color:#ae81ff">10</span>),
    title <span style="color:#66d9ef">varchar</span>(<span style="color:#ae81ff">50</span>),
    content <span style="color:#66d9ef">text</span>
)<span style="color:#66d9ef">charset</span> utf8;

<span style="color:#66d9ef">insert</span> <span style="color:#66d9ef">into</span> t1 <span style="color:#66d9ef">values</span>(<span style="color:#e6db74">&#39;佚名&#39;</span>,<span style="color:#e6db74">&#39;给家长的一封信&#39;</span>,<span style="color:#e6db74">&#39;某某某的爸爸/妈妈...您好...&#39;</span>);
</code></pre></div><h4 id="字符串类型枚举">字符串类型（枚举）</h4>
<ul>
<li>一种映射存储方式，以较小的空间存储较多的数据</li>
<li>枚举是在定义时确定可能出现的问题</li>
<li>枚举在定义后数据只能出现定义时其中的一种</li>
<li>枚举类似一种单选框</li>
<li>枚举使用1-2个字节存储，最多可以设计65535个选项</li>
<li>枚举实际存储是使用数值，映射对应的元素数据，从1开始</li>
<li>枚举语法：<code>enum(元素1,元素2....元素N)</code></li>
</ul>
<blockquote>
<p>步骤</p>
<ol>
<li>确定数据是固定的几种数据之一</li>
<li>使用枚举穷举相应的元素</li>
<li>数据存储只能选择穷举中的元素之一</li>
</ol>
</blockquote>
<h5 id="示例-7">示例</h5>
<ol>
<li>
<p>记录人群类型：小朋友，少年，青年，中年，老年，每个人只属于一种类型题</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-mysql" data-lang="mysql"><span style="color:#66d9ef">create</span> <span style="color:#66d9ef">table</span> <span style="color:#a6e22e">t1</span>(
	type <span style="color:#66d9ef">enum</span>(<span style="color:#e6db74">&#39;小朋友&#39;</span>,<span style="color:#e6db74">&#39;少年&#39;</span>,<span style="color:#e6db74">&#39;青年&#39;</span>,<span style="color:#e6db74">&#39;中年&#39;</span>,<span style="color:#e6db74">&#39;老年&#39;</span>)
)<span style="color:#66d9ef">charset</span> utf8;

<span style="color:#66d9ef">insert</span> <span style="color:#66d9ef">into</span> t1 <span style="color:#66d9ef">values</span>(<span style="color:#e6db74">&#39;少年&#39;</span>);
<span style="color:#66d9ef">insert</span> <span style="color:#66d9ef">into</span> t1 <span style="color:#66d9ef">values</span>(<span style="color:#e6db74">&#39;神仙&#39;</span>);<span style="color:#75715e"># error 不存在的数据不能插入
</span></code></pre></div></li>
<li>
<p><code>enum</code>是建立映射关系，然后实际存储是数字，数值是按照元素顺序从1开始</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-mysql" data-lang="mysql"><span style="color:#75715e"># 可以使用字段 + 0来判断数据具体的效果（字符串转数值为0）
</span><span style="color:#75715e"></span><span style="color:#66d9ef">select</span> type,type <span style="color:#f92672">+</span> <span style="color:#ae81ff">0</span> <span style="color:#66d9ef">from</span> t1;
<span style="color:#66d9ef">insert</span> <span style="color:#66d9ef">into</span> t1 <span style="color:#66d9ef">values</span>(<span style="color:#ae81ff">5</span>);
</code></pre></div></li>
</ol>
<h4 id="字符串类型集合">字符串类型（集合）</h4>
<ul>
<li><code>set</code>，一种映射存储方式，以较小的空间存储较多的数据</li>
<li>集合是在定义时确定可能出现的元素进行穷举</li>
<li>集合在定义后数据只能出现定义时其中的元素（可以是多个）</li>
<li>集合类似一种多选框</li>
<li>集合使用1-8个字节存储数据，最多可以设计64个元素</li>
<li>集合实际存储是使用数值（二进制位），映射对应的元素数据，每个元素对应一个比特位</li>
<li>集合语法：<code>set(元素1,元素2,.....元素N)</code></li>
</ul>
<blockquote>
<p>步骤</p>
<ol>
<li>确定数据是固定的几种数据集合</li>
<li>使用集合穷极相应的元素</li>
<li>数据存储只能选择穷举中的元素组合</li>
</ol>
</blockquote>
<h5 id="示例-8">示例</h5>
<ol>
<li>
<p>记录个人的球类爱好，有篮球，足球，羽毛球，网球，乒乓球，排球，台球，冰球</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-mysql" data-lang="mysql"><span style="color:#75715e"># 爱好可以使多种
</span><span style="color:#75715e"></span><span style="color:#66d9ef">create</span> <span style="color:#66d9ef">table</span> <span style="color:#a6e22e">t1</span>(
	hobby <span style="color:#66d9ef">set</span>(<span style="color:#e6db74">&#39;足球&#39;</span>,<span style="color:#e6db74">&#39;篮球&#39;</span>,<span style="color:#e6db74">&#39;羽毛球&#39;</span>,<span style="color:#e6db74">&#39;网球&#39;</span>,<span style="color:#e6db74">&#39;乒乓球&#39;</span>,<span style="color:#e6db74">&#39;排球&#39;</span>,<span style="color:#e6db74">&#39;台球&#39;</span>,<span style="color:#e6db74">&#39;冰球&#39;</span>)
)<span style="color:#66d9ef">charset</span> utf8;

<span style="color:#66d9ef">insert</span> <span style="color:#66d9ef">into</span> t1 <span style="color:#66d9ef">values</span>(<span style="color:#e6db74">&#39;足球&#39;</span>);
<span style="color:#66d9ef">insert</span> <span style="color:#66d9ef">into</span> t1 <span style="color:#66d9ef">values</span>(<span style="color:#e6db74">&#39;足球,台球,篮球&#39;</span>);
</code></pre></div></li>
<li>
<p>集合建立的也是映射关系，映射方式是每个元素对应一个字节的比特位， 从左边开始第一个对应字节从右边开始的第一位</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-mysql" data-lang="mysql"><span style="color:#75715e"># 可以通过字段 + 0的方式查看存储的具体数值
</span><span style="color:#75715e"></span><span style="color:#66d9ef">select</span> hobby,hobby <span style="color:#f92672">+</span> <span style="color:#ae81ff">0</span> <span style="color:#66d9ef">from</span> t1;

<span style="color:#75715e"># 可以通过插入数值来组合元素，但是需要确定对应的十进制转换成二进制有对应的元素对应
</span><span style="color:#75715e"></span><span style="color:#66d9ef">insert</span> <span style="color:#66d9ef">into</span> t1 <span style="color:#a6e22e">value</span>(<span style="color:#ae81ff">8</span>); <span style="color:#75715e"># 网球
</span></code></pre></div></li>
</ol>
<h4 id="时间如期类型年">时间如期类型（年）</h4>
<ul>
<li><code>year</code>，MySQL中用来存储年份的类型</li>
<li>MySQL中使用1个字节存储年份</li>
<li><code>year</code>能够表示的范围是1901-2155（256年）
<ul>
<li>year的特殊值是0000</li>
</ul>
</li>
<li><code>year</code>允许用户是用两种方式设计（效果一样）
<ul>
<li><code>year</code></li>
<li><code>year(4)</code></li>
</ul>
</li>
</ul>
<blockquote>
<p>步骤</p>
<ol>
<li>确定存储的数据是年份</li>
<li>确定年份的区间在1901-2155之间</li>
<li>使用year类型</li>
</ol>
</blockquote>
<h5 id="示例-9">示例</h5>
<ol>
<li>
<p>记录个人的出生年份</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-mysql" data-lang="mysql"><span style="color:#66d9ef">create</span> <span style="color:#66d9ef">table</span> <span style="color:#a6e22e">t1</span>(
	y1 <span style="color:#66d9ef">year</span>,
    y2 <span style="color:#66d9ef">year</span>(<span style="color:#ae81ff">4</span>)
)<span style="color:#66d9ef">charset</span> utf8;

<span style="color:#66d9ef">insert</span> <span style="color:#66d9ef">into</span> t1 <span style="color:#66d9ef">values</span>(<span style="color:#ae81ff">1901</span>,<span style="color:#ae81ff">2155</span>);
<span style="color:#66d9ef">insert</span> <span style="color:#66d9ef">into</span> t1 <span style="color:#66d9ef">values</span>(<span style="color:#ae81ff">1800</span>); <span style="color:#75715e"># error 不在范围内
</span></code></pre></div></li>
<li>
<p>year类型允许使用2位数来插入，系统自动匹配对应的年份</p>
<ul>
<li>69以前：系统默认加2000</li>
<li>69以后：系统默认加1900</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-mysql" data-lang="mysql"><span style="color:#66d9ef">insert</span> <span style="color:#66d9ef">into</span> t1 <span style="color:#66d9ef">values</span>(<span style="color:#ae81ff">69</span>,<span style="color:#ae81ff">70</span>);
<span style="color:#66d9ef">insert</span> <span style="color:#66d9ef">into</span> t1 <span style="color:#66d9ef">values</span>(<span style="color:#ae81ff">68</span>,<span style="color:#ae81ff">71</span>);
</code></pre></div></li>
<li>
<p>year类型的特殊值是0000，可以使用00或者0000插入</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-mysql" data-lang="mysql"><span style="color:#66d9ef">insert</span> <span style="color:#66d9ef">into</span> <span style="color:#a6e22e">t1</span>(<span style="color:#ae81ff">00</span>,<span style="color:#ae81ff">0000</span>);
</code></pre></div></li>
</ol>
<h4 id="时间日期类型时间戳">时间日期类型（时间戳）</h4>
<ul>
<li><code>timestamp</code>，基于格林威治时间的时间记录</li>
<li>MySQL中时间戳表现形式不是秒数，而是年月日时分秒格式
<ul>
<li>YYYY-MM-DD HH:II::SS</li>
<li>YYYYMMDDHHIISS</li>
</ul>
</li>
<li>timestamp使用4个字节存储</li>
<li>timestamp的特点是所对应的记录不论哪个字段被更新，该字段都会更新到当前时间</li>
</ul>
<blockquote>
<p>步骤</p>
<ol>
<li>确定类型需要使用年月日时分秒格式</li>
<li>确定当前字段需要记录数据的最近更新时间</li>
<li>使用timestamp时间戳</li>
</ol>
</blockquote>
<h5 id="示例-10">示例</h5>
<ol>
<li>
<p>记录商品库存的最后更新时间</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-mysql" data-lang="mysql"><span style="color:#66d9ef">create</span> <span style="color:#66d9ef">table</span> <span style="color:#a6e22e">t1</span>(
	goods_name <span style="color:#66d9ef">varchar</span>(<span style="color:#ae81ff">10</span>),
    goods_inventory <span style="color:#66d9ef">int</span> <span style="color:#66d9ef">unsigned</span>,
    change_time <span style="color:#66d9ef">timestamp</span>
)<span style="color:#66d9ef">charset</span> utf8;

<span style="color:#66d9ef">insert</span> <span style="color:#66d9ef">into</span> t1 <span style="color:#66d9ef">values</span>(<span style="color:#e6db74">&#39;大白菜&#39;</span>,<span style="color:#ae81ff">100</span>,<span style="color:#e6db74">&#39;1971-01-01 00:00:00&#39;</span>);
<span style="color:#66d9ef">insert</span> <span style="color:#66d9ef">into</span> t1 <span style="color:#66d9ef">values</span>(<span style="color:#e6db74">&#39;小白菜&#39;</span>,<span style="color:#ae81ff">100</span>,<span style="color:#e6db74">&#39;19700101000000&#39;</span>);
</code></pre></div></li>
<li>
<p>timestamp会在自己所在的记录任何位置被修改时自动更新时间</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-mysql" data-lang="mysql"><span style="color:#66d9ef">update</span> t1 <span style="color:#66d9ef">set</span> goods_inventory <span style="color:#f92672">=</span> <span style="color:#ae81ff">90</span>;
</code></pre></div><p>在MySQL8后，取消了timestamp的默认自动更新，如果需要使用，需要额外使用属性：<code>on update current_timestamp</code></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-mysql" data-lang="mysql"><span style="color:#66d9ef">alter</span> <span style="color:#66d9ef">table</span> t1 <span style="color:#66d9ef">add</span> c_time <span style="color:#66d9ef">timestamp</span> <span style="color:#66d9ef">on</span> <span style="color:#66d9ef">update</span> <span style="color:#66d9ef">current_timestamp</span>
<span style="color:#66d9ef">update</span> t1 <span style="color:#66d9ef">set</span> goods_inventory <span style="color:#f92672">=</span> <span style="color:#ae81ff">80</span>;
</code></pre></div></li>
</ol>
<h4 id="时间日期类型日期">时间日期类型（日期）</h4>
<ul>
<li><code>date</code>，用来记录年月日信息</li>
<li>使用3 个字节存储数据</li>
<li>存储日期的格式为：<code>YYYY-MM-DD</code></li>
<li>存储的范围是：<code>1001-01-01</code>到<code>9999-12-31</code> 目前来说，还够用</li>
</ul>
<blockquote>
<p>步骤</p>
<ol>
<li>确定存储的数据格式为日期格式</li>
<li>确定数据格式为YYYY-MM-DD</li>
<li>使用date类型</li>
</ol>
</blockquote>
<h5 id="示例-11">示例</h5>
<p>记录个人生日</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-mysql" data-lang="mysql"><span style="color:#66d9ef">create</span> <span style="color:#66d9ef">table</span> <span style="color:#a6e22e">t1</span>(
	<span style="color:#f92672">`</span>name<span style="color:#f92672">`</span> <span style="color:#66d9ef">varchar</span>(<span style="color:#ae81ff">10</span>),
	birth <span style="color:#66d9ef">date</span>
)<span style="color:#66d9ef">charset</span> utf8;

<span style="color:#66d9ef">insert</span> <span style="color:#66d9ef">into</span> t1 <span style="color:#66d9ef">values</span>(<span style="color:#e6db74">&#39;张三&#39;</span>,<span style="color:#e6db74">&#39;2000-01-01&#39;</span>);
<span style="color:#66d9ef">insert</span> <span style="color:#66d9ef">into</span> t1 <span style="color:#66d9ef">values</span>(<span style="color:#e6db74">&#39;李四&#39;</span>,<span style="color:#e6db74">&#39;2021-07-23&#39;</span>);
</code></pre></div><h4 id="时间日期类型日期时间">时间日期类型（日期时间）</h4>
<ul>
<li><code>datetime</code>，用来综合存储日期和时间</li>
<li>存储格式为：<code>YYYY-MM-DD HH:II:SS</code></li>
<li>存储区间为：<code>1000-01-01 00:00:00</code>到<code>9999-12-31 23:59:59</code></li>
</ul>
<blockquote>
<p>步骤</p>
<ol>
<li>确定存储的时间格式包含日期</li>
<li>确定存储格式为：YYYY-MM-DD HH:II:SS</li>
<li>使用datetime</li>
</ol>
</blockquote>
<h5 id="示例-12">示例</h5>
<p>记录个人具体的出生时间</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-mysql" data-lang="mysql"><span style="color:#66d9ef">create</span> <span style="color:#66d9ef">table</span> <span style="color:#a6e22e">t1</span>(
	<span style="color:#f92672">`</span>name<span style="color:#f92672">`</span> <span style="color:#66d9ef">varchar</span>(<span style="color:#ae81ff">10</span>),
	birth <span style="color:#66d9ef">datetime</span>
)<span style="color:#66d9ef">charset</span> utf8;

<span style="color:#66d9ef">insert</span> <span style="color:#66d9ef">into</span> t1
</code></pre></div><h4 id="时间日期类型时间">时间日期类型（时间）</h4>
<ul>
<li><code>time</code>，用来记录时间或者时间段</li>
<li>数据范围是：<code>-838:59:59</code>-<code>838:59:59</code></li>
<li>数据插入的格式分为两种
<ul>
<li>时间格式：HH:II:SS</li>
<li>时间段格式：D HH:II:SS</li>
</ul>
</li>
</ul>
<blockquote>
<p>步骤</p>
<ol>
<li>确定要存储的类型是时间格式</li>
<li>确定格式类型为time能表示的格式</li>
<li>使用time存储</li>
</ol>
</blockquote>
<h5 id="示例-13">示例</h5>
<p>记录用户登录的具体时间</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-mysql" data-lang="mysql"><span style="color:#75715e"># 具体登录时间可以使用时间戳（包含年月日时分秒信息）
</span><span style="color:#75715e"># 也可以使用时间datetime格式，或者date+time双字段格式
</span><span style="color:#75715e"></span><span style="color:#66d9ef">create</span> <span style="color:#66d9ef">table</span> <span style="color:#a6e22e">t1</span>(
	login_time1 <span style="color:#66d9ef">int</span> <span style="color:#66d9ef">unsigned</span>,
    login_time2 <span style="color:#66d9ef">datetime</span>,
    login_date <span style="color:#66d9ef">date</span>,
    login_time3 <span style="color:#66d9ef">time</span>
)<span style="color:#66d9ef">charset</span> utf8;

<span style="color:#66d9ef">insert</span> <span style="color:#66d9ef">into</span> t1 <span style="color:#66d9ef">values</span>(<span style="color:#ae81ff">12345678</span>,<span style="color:#e6db74">&#39;2000-12-12 12:12:12&#39;</span>,<span style="color:#e6db74">&#39;2000-12-12&#39;</span>,<span style="color:#e6db74">&#39;12:12:12&#39;</span>);
<span style="color:#66d9ef">insert</span> <span style="color:#66d9ef">into</span> t1 <span style="color:#66d9ef">values</span>(<span style="color:#ae81ff">1234567</span>,<span style="color:#e6db74">&#39;2000-12-12 12:12:12&#39;</span>,<span style="color:#e6db74">&#39;2000-12-12&#39;</span>,<span style="color:#e6db74">&#39;3 12:12:12&#39;</span>);
</code></pre></div><h3 id="属性">属性</h3>
<h4 id="属性作用">属性作用</h4>
<ul>
<li>建立在字段类型之后，对字段除类型之外的其他约束</li>
<li>属性是在定义表字段的时候针对每个字段进行属性设定</li>
<li>设定好的属性可以通过查看表字段desc进行查看</li>
<li>数据在进行增删改（写）操作时需要在满足字段要求的同时满足属性的要求</li>
</ul>
<h5 id="示例-14">示例</h5>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-mysql" data-lang="mysql"><span style="color:#66d9ef">desc</span> t1;

<span style="color:#75715e"># Field: 字段名字
</span><span style="color:#75715e"># Type: 数据类型
</span><span style="color:#75715e"># Null: 是否为空（属性）
</span><span style="color:#75715e"># Key: 索引类型（属性）
</span><span style="color:#75715e"># Default: 默认值（属性）
</span><span style="color:#75715e"># Extra: 额外属性
</span></code></pre></div><h4 id="null属性">NULL属性</h4>
<ul>
<li>NULL：数据是否允许为空</li>
<li>不为空设计： Not Null</li>
<li>数据为空一般不具备运算和分析价值，所以通常数据都需要设定Not Null（不区分大小写）</li>
</ul>
<blockquote>
<p>步骤</p>
<ol>
<li>数据类型确定</li>
<li>数据是否为空确定
<ul>
<li>允许为空：不考虑Null属性</li>
<li>不允许为空：Not Null</li>
</ul>
</li>
</ol>
</blockquote>
<h5 id="示例-15">示例</h5>
<ol>
<li>
<p>用户信息表：用户名、密码、姓名、年龄、注册时间</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-mysql" data-lang="mysql"><span style="color:#66d9ef">create</span> <span style="color:#66d9ef">table</span> <span style="color:#a6e22e">t1</span>(
	<span style="color:#f92672">`</span>username<span style="color:#f92672">`</span> <span style="color:#66d9ef">varchar</span>(<span style="color:#ae81ff">50</span>) <span style="color:#66d9ef">not</span> <span style="color:#66d9ef">null</span>,
	<span style="color:#f92672">`</span>password<span style="color:#f92672">`</span> <span style="color:#66d9ef">char</span>(<span style="color:#ae81ff">32</span>) <span style="color:#66d9ef">not</span> <span style="color:#66d9ef">null</span>,
	name <span style="color:#66d9ef">varchar</span>(<span style="color:#ae81ff">20</span>),
	age <span style="color:#66d9ef">tinyint</span> <span style="color:#66d9ef">unsigned</span>,
	reg_time <span style="color:#66d9ef">int</span> <span style="color:#66d9ef">unsigned</span> <span style="color:#66d9ef">not</span> <span style="color:#66d9ef">null</span>
)<span style="color:#66d9ef">charset</span> utf8;
</code></pre></div></li>
<li>
<p>如果字段不能为空（Not Null），那么数据就必须满足条件：插入时不能为空的字段就需要主动提供值</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-mysql" data-lang="mysql"><span style="color:#66d9ef">insert</span> <span style="color:#66d9ef">into</span> t1 <span style="color:#66d9ef">values</span>(<span style="color:#e6db74">&#39;username&#39;</span>,<span style="color:#e6db74">&#39;password&#39;</span>,<span style="color:#e6db74">&#39;张三&#39;</span>,<span style="color:#ae81ff">20</span>,<span style="color:#ae81ff">123456789</span>);

<span style="color:#75715e"># 错误操作，reg_time不能为空，而默认为空，
</span><span style="color:#75715e"></span><span style="color:#66d9ef">insert</span> <span style="color:#66d9ef">into</span> <span style="color:#a6e22e">t1</span> (<span style="color:#f92672">`</span>username<span style="color:#f92672">`</span>,<span style="color:#f92672">`</span>password<span style="color:#f92672">`</span>) <span style="color:#66d9ef">values</span>(<span style="color:#e6db74">&#39;username&#39;</span>,<span style="color:#e6db74">&#39;password&#39;</span>);
</code></pre></div></li>
</ol>
<h4 id="defaule属性">Defaule属性</h4>
<ul>
<li><code>defaule</code>，在设计表字段的时候给定默认数据，在后续字段操作（数据新增）的时候系统没有检测到字段有数据的时候自动使用的值</li>
<li>默认值在字段设计的时候使用（默认值需要满足数据类型规范）</li>
<li>默认值通常设计的字段容易出现的数据
<ul>
<li>一般字段的默认值默认是Null</li>
</ul>
</li>
<li>默认值触发
<ul>
<li>在系统进行数据插入时自动检测触发</li>
<li>主动使用<code>default</code>关键字触发默认值</li>
</ul>
</li>
</ul>
<blockquote>
<p>步骤</p>
<ol>
<li>确定字段的数据类型</li>
<li>确定字段可能出现的数据会是某个经常出现的值</li>
<li>设定默认值</li>
<li>触发默认值
<ul>
<li>自动触发：数据插入时不给字段复制</li>
<li>手动触发：数据插入时主动使用default关键字</li>
</ul>
</li>
</ol>
</blockquote>
<h5 id="示例-16">示例</h5>
<ol>
<li>
<p>用户开户：银行卡账号、身份证号码、姓名、账户余额</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-mysql" data-lang="mysql"><span style="color:#66d9ef">create</span> <span style="color:#66d9ef">table</span> <span style="color:#a6e22e">t1</span>(
	account <span style="color:#66d9ef">varchar</span>(<span style="color:#ae81ff">19</span>) <span style="color:#66d9ef">not</span> <span style="color:#66d9ef">null</span>,
	id_card <span style="color:#66d9ef">char</span>(<span style="color:#ae81ff">18</span>) <span style="color:#66d9ef">not</span> <span style="color:#66d9ef">null</span>,
    <span style="color:#f92672">`</span>name<span style="color:#f92672">`</span> <span style="color:#66d9ef">varchar</span>(<span style="color:#ae81ff">20</span>) <span style="color:#66d9ef">not</span> <span style="color:#66d9ef">null</span>,
    money <span style="color:#66d9ef">decimal</span>(<span style="color:#ae81ff">16</span>,<span style="color:#ae81ff">2</span>) <span style="color:#66d9ef">default</span> <span style="color:#ae81ff">0</span>.<span style="color:#ae81ff">00</span> <span style="color:#66d9ef">not</span> <span style="color:#66d9ef">null</span>
)<span style="color:#66d9ef">charset</span> utf8;
</code></pre></div></li>
<li>
<p>默认值触发</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-mysql" data-lang="mysql"><span style="color:#75715e"># 默认触发
</span><span style="color:#75715e"></span><span style="color:#66d9ef">insert</span> <span style="color:#66d9ef">into</span> <span style="color:#a6e22e">t1</span> (account,id_card,name)
<span style="color:#66d9ef">values</span>(<span style="color:#e6db74">&#39;123456789101112131&#39;</span>,<span style="color:#e6db74">&#39;142629200001011010&#39;</span>,<span style="color:#e6db74">&#39;张三&#39;</span>);

<span style="color:#75715e"># 主动触发
</span><span style="color:#75715e"></span><span style="color:#66d9ef">insert</span> <span style="color:#66d9ef">into</span> t1 <span style="color:#66d9ef">values</span>(<span style="color:#e6db74">&#39;123456789101112131&#39;</span>,<span style="color:#e6db74">&#39;142629200001010101&#39;</span>,<span style="color:#e6db74">&#39;李四&#39;</span>,<span style="color:#66d9ef">default</span>);
</code></pre></div></li>
</ol>
<h4 id="主键">主键</h4>
<ul>
<li><code>primary key</code>，用来保证整张表中对应的字段永远不会出现重复数据</li>
<li>主键在一张表中只能有一个</li>
<li>主键的另外一个特性是能够提升主键字段作为查询条件的效率(索引)</li>
<li>主键不能为空：Not Null(默认)</li>
<li>逻辑主键：数据没有具体业务意义，纯粹是一种数值数据
<ul>
<li>逻辑主键通常是整数：int</li>
<li>逻辑主键目的是方便检索和数据安全（不暴露数据真实信息）</li>
</ul>
</li>
<li>复合主键：多个字段共同组成不能重复的数据
<ul>
<li><code>primary key(字段1,字段2,...)</code></li>
<li>联合主键使用不多，一般也不会超过2个字段</li>
</ul>
</li>
</ul>
<blockquote>
<p>步骤</p>
<ol>
<li>确定字段数据具有唯一性</li>
<li>确定数据不允许为空</li>
<li>确定数据会经常用于数据检索</li>
<li>使用主键<code>primary key</code></li>
<li>一般每张表都会使用一个逻辑主键(id)</li>
</ol>
</blockquote>
<h5 id="示例-17">示例</h5>
<ol>
<li>
<p>银行账户信息：账户、姓名、余额</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-mysql" data-lang="mysql"><span style="color:#75715e"># 银行账户具有唯一性，不可重复，不可为空
</span><span style="color:#75715e"></span><span style="color:#66d9ef">create</span> <span style="color:#66d9ef">table</span> <span style="color:#a6e22e">t1</span>(
	account <span style="color:#66d9ef">varchar</span>(<span style="color:#ae81ff">17</span>) <span style="color:#66d9ef">primary</span> <span style="color:#66d9ef">key</span>,
	<span style="color:#f92672">`</span>name<span style="color:#f92672">`</span> <span style="color:#66d9ef">varchar</span>(<span style="color:#ae81ff">20</span>) <span style="color:#66d9ef">not</span> <span style="color:#66d9ef">null</span>,
	money <span style="color:#66d9ef">decimal</span>(<span style="color:#ae81ff">16</span>,<span style="color:#ae81ff">2</span>) <span style="color:#66d9ef">not</span> <span style="color:#66d9ef">null</span> <span style="color:#66d9ef">default</span> <span style="color:#ae81ff">0</span>.<span style="color:#ae81ff">00</span>
)<span style="color:#66d9ef">charset</span> utf8;

<span style="color:#75715e"># 复合主键
</span><span style="color:#75715e"></span><span style="color:#66d9ef">create</span> <span style="color:#66d9ef">table</span> <span style="color:#a6e22e">t2</span>(
	account <span style="color:#66d9ef">varchar</span>(<span style="color:#ae81ff">17</span>),
	<span style="color:#f92672">`</span>name<span style="color:#f92672">`</span> <span style="color:#66d9ef">varchar</span>(<span style="color:#ae81ff">20</span>),
	money <span style="color:#66d9ef">decimal</span>(<span style="color:#ae81ff">16</span>,<span style="color:#ae81ff">2</span>) <span style="color:#66d9ef">not</span> <span style="color:#66d9ef">null</span> <span style="color:#66d9ef">default</span> <span style="color:#ae81ff">0</span>.<span style="color:#ae81ff">00</span>,
	<span style="color:#66d9ef">primary</span> <span style="color:#66d9ef">key</span>(account,<span style="color:#f92672">`</span>name<span style="color:#f92672">`</span>)
)<span style="color:#66d9ef">charset</span> utf8;

<span style="color:#75715e"># 一般使用逻辑主键
</span><span style="color:#75715e"></span><span style="color:#66d9ef">create</span> <span style="color:#66d9ef">table</span> <span style="color:#a6e22e">t3</span>(
	id <span style="color:#66d9ef">int</span> <span style="color:#66d9ef">unsigned</span> <span style="color:#66d9ef">primary</span> <span style="color:#66d9ef">key</span>,
	account <span style="color:#66d9ef">varchar</span>(<span style="color:#ae81ff">17</span>) <span style="color:#66d9ef">not</span> <span style="color:#66d9ef">null</span>,
	<span style="color:#f92672">`</span>name<span style="color:#f92672">`</span> <span style="color:#66d9ef">varchar</span>(<span style="color:#ae81ff">20</span>) <span style="color:#66d9ef">not</span> <span style="color:#66d9ef">null</span>,
	money <span style="color:#66d9ef">decimal</span>(<span style="color:#ae81ff">16</span>,<span style="color:#ae81ff">2</span>) <span style="color:#66d9ef">not</span> <span style="color:#66d9ef">null</span> <span style="color:#66d9ef">default</span> <span style="color:#ae81ff">0</span>.<span style="color:#ae81ff">00</span>
)<span style="color:#66d9ef">charset</span> utf8;
</code></pre></div></li>
<li>
<p>主键数据不允许重复</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-mysql" data-lang="mysql"><span style="color:#66d9ef">insert</span> <span style="color:#66d9ef">into</span> t3 <span style="color:#66d9ef">values</span>(<span style="color:#ae81ff">1</span>,<span style="color:#e6db74">&#39;123456&#39;</span>,<span style="color:#e6db74">&#39;1&#39;</span>,<span style="color:#66d9ef">default</span>);

<span style="color:#75715e"># 错误 主键1已经存在
</span><span style="color:#75715e"></span><span style="color:#66d9ef">insert</span> <span style="color:#66d9ef">into</span> t3 <span style="color:#66d9ef">values</span>(<span style="color:#ae81ff">1</span>,<span style="color:#e6db74">&#39;456789&#39;</span>,<span style="color:#e6db74">&#39;2&#39;</span>,<span style="color:#66d9ef">default</span>);

<span style="color:#75715e"># 联合主键就是联合字段加起来不重复即可
</span><span style="color:#75715e"></span><span style="color:#66d9ef">insert</span> <span style="color:#66d9ef">into</span> t2 <span style="color:#66d9ef">values</span>(<span style="color:#e6db74">&#39;123456&#39;</span>,<span style="color:#e6db74">&#39;Tom&#39;</span>,<span style="color:#66d9ef">default</span>);
<span style="color:#66d9ef">insert</span> <span style="color:#66d9ef">into</span> t2 <span style="color:#66d9ef">values</span>(<span style="color:#e6db74">&#39;456789&#39;</span>,<span style="color:#e6db74">&#39;Tom&#39;</span>,<span style="color:#66d9ef">default</span>);
</code></pre></div></li>
</ol>
<h4 id="主键管理">主键管理</h4>
<ul>
<li>在创建表并且已经有数据后的维护</li>
<li>删除主键</li>
<li>追加主键</li>
<li>修改主键（先删后增）</li>
</ul>
<h5 id="示例-18">示例</h5>
<ol>
<li>
<p>删除主键：主键只有一个，所以删除语法也比较特殊</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-mysql" data-lang="mysql"><span style="color:#66d9ef">alter</span> <span style="color:#66d9ef">table</span> t1 <span style="color:#66d9ef">drop</span> <span style="color:#66d9ef">primary</span> <span style="color:#66d9ef">key</span>;
</code></pre></div></li>
<li>
<p>后期新增主键：如果是针对业务主键需要保证字段数据没有Null数据且没有数据重复（一般主键都会在表创建时维护好）</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-mysql" data-lang="mysql"><span style="color:#66d9ef">alter</span> <span style="color:#66d9ef">table</span> t1 <span style="color:#66d9ef">add</span> <span style="color:#66d9ef">primary</span> <span style="color:#66d9ef">key</span>(account,name);
</code></pre></div></li>
</ol>
<h4 id="自增长属性">自增长属性</h4>
<ul>
<li><code>auto_increment</code>，被修饰的字段在新增时，自动增长的数据</li>
<li>自增长数据可以理解为一种默认值，如果主动给值，那么自动增长不会触发</li>
<li>自增长有两个变量控制
<ul>
<li>初始值：<code>auto_increment_offset</code>，默认为1</li>
<li>步长：<code>auto_increment_increment</code>，默认为1</li>
<li>查看自增长控制：<code>show variables like 'auto_increment'</code></li>
</ul>
</li>
</ul>
<blockquote>
<p>步骤</p>
<ol>
<li>确定数据类型为整形</li>
<li>确定数据需要有规则的变化
<ul>
<li>从1开始</li>
<li>每次增长1</li>
<li>可以调整，但是通常有固定规则</li>
</ul>
</li>
<li>必须有索引字段（索引主键）</li>
<li>使用<code>auto_increment</code></li>
</ol>
</blockquote>
<h5 id="示例-19">示例</h5>
<ol>
<li>
<p>记录学生信息：学号和姓名</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-mysql" data-lang="mysql"><span style="color:#75715e"># 学生信息：学号自动增长
</span><span style="color:#75715e"></span><span style="color:#66d9ef">create</span> <span style="color:#66d9ef">table</span> <span style="color:#a6e22e">t1</span>(
	id <span style="color:#66d9ef">int</span> <span style="color:#66d9ef">primary</span> <span style="color:#66d9ef">key</span> <span style="color:#66d9ef">auto_increment</span>,
	stu_no <span style="color:#66d9ef">int</span>(<span style="color:#ae81ff">8</span>) <span style="color:#66d9ef">zerofill</span> <span style="color:#66d9ef">not</span> <span style="color:#66d9ef">null</span>,
	stu_name <span style="color:#66d9ef">varchar</span>(<span style="color:#ae81ff">20</span>) <span style="color:#66d9ef">not</span> <span style="color:#66d9ef">null</span>
)<span style="color:#66d9ef">charset</span> utf8;
</code></pre></div></li>
<li>
<p>触发自增长</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-mysql" data-lang="mysql"><span style="color:#75715e"># 使用自增长 可以使用NULL或者default触发
</span><span style="color:#75715e"></span><span style="color:#66d9ef">insert</span> <span style="color:#66d9ef">into</span> t1 <span style="color:#66d9ef">values</span>(<span style="color:#66d9ef">null</span>,<span style="color:#ae81ff">1</span>,<span style="color:#e6db74">&#39;Jim&#39;</span>);
<span style="color:#66d9ef">insert</span> <span style="color:#66d9ef">into</span> t1 <span style="color:#66d9ef">values</span>(<span style="color:#66d9ef">default</span>,<span style="color:#ae81ff">2</span>,<span style="color:#e6db74">&#39;Tom&#39;</span>);

<span style="color:#75715e">#主动控制：自增长的值会从当前最大的值开始自动增长
</span><span style="color:#75715e"></span><span style="color:#66d9ef">insert</span> <span style="color:#66d9ef">into</span> t1 <span style="color:#66d9ef">values</span>(<span style="color:#ae81ff">5</span>,<span style="color:#ae81ff">3</span>,<span style="color:#e6db74">&#39;张三&#39;</span>);
<span style="color:#66d9ef">insert</span> <span style="color:#66d9ef">into</span> <span style="color:#a6e22e">t1</span> (stu_no,stu_name) <span style="color:#66d9ef">values</span>(<span style="color:#ae81ff">4</span>,<span style="color:#e6db74">&#39;李四&#39;</span>);
</code></pre></div></li>
</ol>
<h4 id="自增长管理">自增长管理</h4>
<ul>
<li>修改表中自增长的值：让下次自增长按照指定的值开始</li>
<li>修改自增长的控制：调整自增长的变化</li>
</ul>
<h5 id="示例-20">示例</h5>
<ol>
<li>
<p>修改表中自增长的值，跳过一些值，直接从下次开始按照新的目标出现</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-mysql" data-lang="mysql"><span style="color:#66d9ef">alter</span> <span style="color:#66d9ef">table</span> t1 <span style="color:#66d9ef">auto_increment</span> <span style="color:#f92672">=</span> <span style="color:#ae81ff">50</span>;
<span style="color:#66d9ef">insert</span> <span style="color:#66d9ef">into</span> <span style="color:#a6e22e">t1</span> (stu_no,stu_name) <span style="color:#66d9ef">values</span>(<span style="color:#ae81ff">1</span>,<span style="color:#e6db74">&#39;测试1&#39;</span>);

<span style="color:#75715e"># 奇数保留原值，偶数自动加一（可能）  由于数据不稳定
</span></code></pre></div></li>
<li>
<p>修改自增长控制：步长和起始值（修改针对的是整个数据库，而非单张表）</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-mysql" data-lang="mysql"><span style="color:#66d9ef">set</span> auto_increment_increment <span style="color:#f92672">=</span> <span style="color:#ae81ff">2</span>;<span style="color:#75715e"># 当前用户当前连接有效（局部）
</span><span style="color:#75715e"></span><span style="color:#66d9ef">set</span> <span style="color:#f92672">@@</span>auto_increment_incremtn <span style="color:#f92672">=</span> <span style="color:#ae81ff">2</span>;<span style="color:#75715e"># 所有用户一定有效（全局）
</span></code></pre></div></li>
</ol>
<h4 id="唯一键">唯一键</h4>
<ul>
<li><code>unique key</code>，用来维护数据的唯一性</li>
<li>一个表中可以有多个唯一键</li>
<li>唯一键与主键的区别在于唯一键允许数据为Null（且数量不限）</li>
<li>唯一键与主键一样，可以提升字段数据当做条件查询的效率（索引）</li>
<li>复合唯一键：多个字段共同组成
<ul>
<li><code>unique key(字段1,字段2,字段3,...)</code></li>
<li>一般不会出现，最多2个字段组成</li>
</ul>
</li>
</ul>
<blockquote>
<p>步骤</p>
<ol>
<li>确定数据列具有唯一性</li>
<li>确定数据列不用作为主键</li>
<li>确定数据会经常用于检索条件</li>
<li>该字段是否允许数据为空</li>
<li>使用唯一键</li>
</ol>
</blockquote>
<h5 id="示例-21">示例</h5>
<ol>
<li>
<p>用户表：用户名唯一，而且经常作为查询条件</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-mysql" data-lang="mysql"><span style="color:#66d9ef">create</span> <span style="color:#66d9ef">table</span> <span style="color:#a6e22e">t1</span>(
    id <span style="color:#66d9ef">int</span> <span style="color:#66d9ef">primary</span> <span style="color:#66d9ef">key</span> <span style="color:#66d9ef">auto_increment</span>,
    <span style="color:#f92672">`</span>username<span style="color:#f92672">`</span> <span style="color:#66d9ef">varchar</span>(<span style="color:#ae81ff">50</span>) <span style="color:#66d9ef">unique</span>,
    <span style="color:#f92672">`</span>password<span style="color:#f92672">`</span> <span style="color:#66d9ef">char</span>(<span style="color:#ae81ff">32</span>) <span style="color:#66d9ef">not</span> <span style="color:#66d9ef">null</span>
)<span style="color:#66d9ef">charset</span> utf8;

<span style="color:#66d9ef">insert</span> <span style="color:#66d9ef">into</span> t1 <span style="color:#66d9ef">values</span>(<span style="color:#66d9ef">null</span>,<span style="color:#e6db74">&#39;username&#39;</span>,<span style="color:#e6db74">&#39;password&#39;</span>);
<span style="color:#66d9ef">insert</span> <span style="color:#66d9ef">into</span> t1 <span style="color:#66d9ef">values</span>(<span style="color:#66d9ef">null</span>,<span style="color:#66d9ef">Null</span>,<span style="color:#e6db74">&#39;password&#39;</span>);
<span style="color:#66d9ef">insert</span> <span style="color:#66d9ef">into</span> t1 <span style="color:#66d9ef">values</span>(<span style="color:#66d9ef">null</span>,<span style="color:#66d9ef">Null</span>,<span style="color:#e6db74">&#39;password&#39;</span>);

<span style="color:#75715e"># 错误
</span><span style="color:#75715e"></span><span style="color:#66d9ef">insert</span> <span style="color:#66d9ef">into</span> t1 <span style="color:#66d9ef">values</span>(<span style="color:#66d9ef">null</span>,<span style="color:#e6db74">&#39;username&#39;</span>,<span style="color:#e6db74">&#39;password&#39;</span>);
</code></pre></div></li>
<li>
<p>学生成绩表：一个学生只能有一个学科成绩，但是可以有多个学科</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-mysql" data-lang="mysql"><span style="color:#75715e"># 学号和学科编号共同组成唯一
</span><span style="color:#75715e"></span><span style="color:#66d9ef">create</span> <span style="color:#66d9ef">table</span> <span style="color:#a6e22e">t1</span>(
	id <span style="color:#66d9ef">int</span> <span style="color:#66d9ef">primary</span> <span style="color:#66d9ef">key</span> <span style="color:#66d9ef">auto_increment</span>,
    stu_name <span style="color:#66d9ef">varchar</span>(<span style="color:#ae81ff">20</span>) <span style="color:#66d9ef">not</span> <span style="color:#66d9ef">null</span>,
    course <span style="color:#66d9ef">varchar</span>(<span style="color:#ae81ff">20</span>) <span style="color:#66d9ef">not</span> <span style="color:#66d9ef">null</span>,
    score <span style="color:#66d9ef">decimal</span> (<span style="color:#ae81ff">5</span>,<span style="color:#ae81ff">2</span>),
    <span style="color:#66d9ef">unique</span> <span style="color:#66d9ef">key</span>(stu_name,course)
)<span style="color:#66d9ef">charset</span> utf8;

<span style="color:#66d9ef">insert</span> <span style="color:#66d9ef">into</span> t1 <span style="color:#66d9ef">values</span>(<span style="color:#66d9ef">null</span>,<span style="color:#e6db74">&#39;Jim&#39;</span>,<span style="color:#e6db74">&#39;Math&#39;</span>,<span style="color:#ae81ff">60</span>);
<span style="color:#66d9ef">insert</span> <span style="color:#66d9ef">into</span> t1 <span style="color:#66d9ef">values</span>(<span style="color:#66d9ef">null</span>,<span style="color:#e6db74">&#39;Jim&#39;</span>,<span style="color:#e6db74">&#39;English&#39;</span>,<span style="color:#ae81ff">60</span>);
</code></pre></div></li>
</ol>
<h4 id="唯一键管理">唯一键管理</h4>
<ul>
<li>删除唯一键：一张表中不止一个唯一键，所以删除方式相对麻烦：<code>alter table 表名 drop index 唯一键名字</code></li>
<li>新增唯一键：<code>alter table 表名 add unique key(字段列表)</code></li>
</ul>
<h5 id="示例-22">示例</h5>
<ol>
<li>
<p>删除表中已有的唯一键</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-mysql" data-lang="mysql"><span style="color:#66d9ef">alter</span> <span style="color:#66d9ef">table</span> t1 <span style="color:#66d9ef">drop</span> <span style="color:#66d9ef">index</span> <span style="color:#f92672">`</span>stu_name<span style="color:#f92672">`</span>;
</code></pre></div></li>
<li>
<p>追加唯一键</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-mysql" data-lang="mysql"><span style="color:#66d9ef">alter</span> <span style="color:#66d9ef">table</span> t1 <span style="color:#66d9ef">add</span> <span style="color:#66d9ef">unique</span> <span style="color:#66d9ef">key</span> <span style="color:#f92672">`</span>stu_course<span style="color:#f92672">`</span> (stu_name,course);
</code></pre></div></li>
</ol>
<h4 id="comment-属性">comment 属性</h4>
<ul>
<li><code>comment</code>，是用文字描述字段的作用的</li>
<li>comment代表的内容是对字段的描述
<ul>
<li>方便以后自己了解字段的作用</li>
<li>方便团队了解字段的作用</li>
</ul>
</li>
<li>描述如果涉及到字符集（中文）一定要在创建表之前设计好客户端字符集（否则会出现乱码）</li>
</ul>
<h5 id="示例-23">示例</h5>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-mysql" data-lang="mysql"><span style="color:#66d9ef">create</span> <span style="color:#66d9ef">table</span> <span style="color:#a6e22e">t1</span>(
	id <span style="color:#66d9ef">int</span> <span style="color:#66d9ef">primary</span> <span style="color:#66d9ef">key</span> <span style="color:#66d9ef">auto_increment</span> comment <span style="color:#e6db74">&#39;id逻辑主键自增长&#39;</span>
)<span style="color:#66d9ef">charset</span> utf8;
</code></pre></div><h3 id="数据库记录长度">数据库记录长度</h3>
<ul>
<li>MySQL中规定一条记录所占用的存储长度最长不超过65535个字节</li>
<li>记录长度是表中所有字段预计占用的长度之和</li>
<li>所有字段只要允许Null存在，系统就会一个字节存储Null</li>
<li>因为MySQL记录长度的存在，varchar永远达不到理论长度</li>
<li>一般数据长度超过255个字符都会使用<code>text/blob</code>进行存储</li>
</ul>]]></content:encoded>
    </item>
    
    <item>
      <title>字符集、校对集</title>
      <link>https://www.niuwx.cn/posts/mysql/%E5%AD%97%E7%AC%A6%E9%9B%86%E5%92%8C%E6%A0%A1%E5%AF%B9%E9%9B%86/</link>
      <pubDate>Fri, 16 Jul 2021 10:31:51 +0800</pubDate>
      
      <guid>https://www.niuwx.cn/posts/mysql/%E5%AD%97%E7%AC%A6%E9%9B%86%E5%92%8C%E6%A0%A1%E5%AF%B9%E9%9B%86/</guid>
      <description>简单介绍了一下字符集校对集</description>
      <content:encoded><![CDATA[<h3 id="字符集">字符集</h3>
<p>了解字符集的概念，掌握MySQL数据库存储数据的字符集逻辑以及设置方式</p>
<h4 id="字符集的概念">字符集的概念</h4>
<ul>
<li>字符集根据不同国家的符号不同，有不同的字符集</li>
<li>不同的字符集占用的存储空间不一样，存储的底层也不一样</li>
<li>不同字符集之间可以进行转换</li>
<li>常见字符集
<ul>
<li>ASCⅡ：美国信息交换标准码，一般英文符号，一个字节存储</li>
<li>latin1：拉丁文字符集，一个字节存储，ISO-8859-1的别名，能够向下兼容ASCIⅡ</li>
<li>GB2312：信息交换用汉字编码字符集，是中国1981年的一套国际规范，2个字节存储</li>
<li>GBK：汉字内码拓展规范（1995年），两个字节表示</li>
<li>Unicode：万国码（统一码），使用同一的编码方式来解决传统的局限，1994年出现</li>
<li>UTF-8：针对Unicode的可变长度字符编码，采用1-6个字节编码Unicode字符 （目前通用编码规则）。建议使用UTF-8字符集进行数据存储。（MySQL8中建议使用UTF8MB4）</li>
</ul>
</li>
</ul>
<h5 id="示例">示例</h5>
<p>ASCⅡ码表</p>
<h4 id="mysql字符集">MySQL字符集</h4>
<ul>
<li>MySQL内部对象可以在各个层级设置字符集</li>
<li>MySQL内部对象存在字符集继承：字段-&gt;表-&gt;数据库-&gt;DBMS</li>
<li>MySQL内部内嵌几乎所有主流字符集</li>
<li>数据存储的最终字符集由字段控制</li>
<li>客户端与服务器进行交互时，需要明确告知服务器客户端自己的字符集（数据格式）</li>
</ul>
<h5 id="示例-1">示例</h5>
<p>查看MySQL支持的所有字符集</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-mysql" data-lang="mysql"><span style="color:#66d9ef">show</span> <span style="color:#66d9ef">charset</span>;
</code></pre></div><h4 id="乱码问题解决">乱码问题解决</h4>
<ul>
<li>
<p>乱码原因1：数据在存储的时候已经变成乱码</p>
<ul>
<li>客户端字符集与服务端解析字符集不一致</li>
<li>读取时想转成其他字符集均会错误</li>
</ul>
</li>
<li>
<p>乱码原因2：数据存储时正确，但是读取时解析成错误字符集</p>
<ul>
<li>客户端能解析的字符集与服务器提供的字符集不一致</li>
</ul>
</li>
<li>
<p>乱码解决方案：不论存储还是读取，都提前告知服务器当前客户端的字符集</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-mysql" data-lang="mysql"><span style="color:#66d9ef">set</span> names <span style="color:#960050;background-color:#1e0010">客户端字符集</span>;
</code></pre></div></li>
</ul>
<h4 id="字符集设置原理">字符集设置原理</h4>
<ul>
<li>MySQL服务器提供了变量来记录客户端的字符集</li>
<li>MySQL对应的存储字符集的变量可以修改</li>
<li><code>set names 字符集</code>就是对变量的修改，总共有三个
<ul>
<li><code>character_set_client</code>：客户端提供的数据的字符集</li>
<li><code>character_set_results</code>：客户端需要服务端提供的数据的字符集</li>
<li><code>character_set_connection</code>：连接使用的字符集，内部数据操作</li>
</ul>
</li>
</ul>
<h5 id="示例-2">示例</h5>
<ol>
<li>
<p>查看系统内部存储这些记录字符集的信息</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-mysql" data-lang="mysql"><span style="color:#66d9ef">show</span> variables <span style="color:#66d9ef">like</span> <span style="color:#e6db74">&#39;character_set%&#39;</span> <span style="color:#75715e">#  %表示通配符，匹配后续不确定的数据
</span></code></pre></div></li>
<li>
<p>修改客户端字符变量，保证数据正常存进服务端</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-mysql" data-lang="mysql"><span style="color:#66d9ef">set</span> character_set_client <span style="color:#f92672">=</span> gbk;
</code></pre></div></li>
<li>
<p>修改客户端解析字符集变量，保证数据正常被客户端查看</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-mysql" data-lang="mysql"><span style="color:#66d9ef">set</span> character_set_results <span style="color:#f92672">=</span> gbk;
</code></pre></div></li>
<li>
<p>使用<code>set names 字符集</code>批量修改，保证客户端被服务端正确理解，同时客户端也能正常解析</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-mysql" data-lang="mysql"><span style="color:#66d9ef">set</span> names gbk;
</code></pre></div></li>
</ol>
<h3 id="校对集">校对集</h3>
<h4 id="校对集概念">校对集概念</h4>
<ul>
<li>数据比较时对应的规则</li>
<li>校对集依赖字符集</li>
<li>校对集的校对方式分为三种：
<ul>
<li>大小写不敏感：<code>_ci</code>,<code>case insensitive</code></li>
<li>大小写敏感：<code>_cs</code>，<code>case sensitive</code></li>
<li>二进制比较：<code>_bin</code>,<code>binary</code>（大小写敏感）</li>
</ul>
</li>
<li>校对集是在进行数据比较的时候触发</li>
</ul>
<h5 id="示例-3">示例</h5>
<ol>
<li>
<p><code>_ci</code>，大小写不敏感</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-mysql" data-lang="mysql"><span style="color:#75715e"># A 和 a是相同的，不存在谁大谁小
</span></code></pre></div></li>
<li>
<p><code>_cs</code>，大小写敏感</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-mysql" data-lang="mysql"><span style="color:#75715e"># A 和 a有大小关系，所以不同
</span></code></pre></div></li>
<li>
<p><code>_bin</code>，二进制比较</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-mysql" data-lang="mysql"><span style="color:#75715e"># A 的二进制 01000001
</span><span style="color:#75715e"># a 的二进制 01100001
</span><span style="color:#75715e"># 二进制按位比较，所以不同
</span></code></pre></div></li>
</ol>
<h4 id="校对集设置">校对集设置</h4>
<ul>
<li>
<p>校对规则可以在MySQL四层对象设计</p>
<ul>
<li>DBMS：系统配置</li>
<li>DB：数据库指定（库选项）</li>
<li>Table：标指定（表选项）</li>
<li>Filed：字段指定（字段选项，一般不用）</li>
</ul>
</li>
<li>
<p>校对集从Field到DBMS继承：优先级Field最高</p>
</li>
<li>
<p>每个校对集都有字符集对应的默认规则</p>
</li>
<li>
<p>校对集设置语法</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-mysql" data-lang="mysql"><span style="color:#66d9ef">collate</span> <span style="color:#960050;background-color:#1e0010">校对集规则</span>;
</code></pre></div></li>
</ul>
<h5 id="示例-4">示例</h5>
<ol>
<li>
<p>查看MySQL支持的所有校对集</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-mysql" data-lang="mysql"><span style="color:#66d9ef">show</span> collation;
</code></pre></div></li>
<li>
<p>在数据库层设置校对集（常用）</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-mysql" data-lang="mysql"><span style="color:#66d9ef">create</span> <span style="color:#66d9ef">database</span> test_4 <span style="color:#66d9ef">charset</span> utf8MB4 <span style="color:#66d9ef">collate</span> utf8MB4_bin;
</code></pre></div></li>
<li>
<p>在数据表层设计校对集</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-mysql" data-lang="mysql"><span style="color:#66d9ef">create</span> <span style="color:#66d9ef">table</span> <span style="color:#a6e22e">t_4</span>(
	id <span style="color:#66d9ef">int</span>,
    name <span style="color:#66d9ef">varchar</span>(<span style="color:#ae81ff">10</span>)
) <span style="color:#66d9ef">charset</span> utf8Mb4 <span style="color:#66d9ef">collate</span> utf8MB4_bin;
</code></pre></div></li>
<li>
<p>在字段层设计校对集（一般不常用）</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-mysql" data-lang="mysql"><span style="color:#66d9ef">create</span> <span style="color:#66d9ef">table</span> <span style="color:#a6e22e">t_4</span>(
	id <span style="color:#66d9ef">int</span>,
    name <span style="color:#66d9ef">varchar</span>(<span style="color:#ae81ff">50</span>) <span style="color:#66d9ef">collate</span> utf8Mb4_bin
)<span style="color:#66d9ef">charset</span> utf8MB4;
</code></pre></div></li>
</ol>
<h4 id="校对集应用">校对集应用</h4>
<ul>
<li>校对集的应用通常是通过<strong>数据比较</strong>触发：<code>order by 字段</code></li>
<li>数据表中数据一旦产生，校对集的修改就无效</li>
</ul>
<h5 id="示例-5">示例</h5>
<ol>
<li>
<p>创建校对规则数据表并插入数据</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-mysql" data-lang="mysql"><span style="color:#75715e"># 创建默认校对规则表（不区分大小写）
</span><span style="color:#75715e"></span><span style="color:#66d9ef">CREATE</span> <span style="color:#66d9ef">TABLE</span> <span style="color:#a6e22e">t1</span>(
    name <span style="color:#66d9ef">varchar</span>(<span style="color:#ae81ff">1</span>)
)<span style="color:#66d9ef">CHARSET</span> utf8Mb4;

<span style="color:#66d9ef">INSERT</span> <span style="color:#66d9ef">INTO</span> t1 <span style="color:#66d9ef">values</span>(<span style="color:#e6db74">&#34;B&#34;</span>);
<span style="color:#66d9ef">INSERT</span> <span style="color:#66d9ef">INTO</span> t1 <span style="color:#66d9ef">values</span>(<span style="color:#e6db74">&#34;A&#34;</span>);
<span style="color:#66d9ef">INSERT</span> <span style="color:#66d9ef">INTO</span> t1 <span style="color:#66d9ef">values</span>(<span style="color:#e6db74">&#34;b&#34;</span>);
<span style="color:#66d9ef">INSERT</span> <span style="color:#66d9ef">INTO</span> t1 <span style="color:#66d9ef">values</span>(<span style="color:#e6db74">&#34;a&#34;</span>);

<span style="color:#66d9ef">select</span> <span style="color:#f92672">*</span> <span style="color:#66d9ef">from</span> t1 <span style="color:#66d9ef">order</span> <span style="color:#66d9ef">by</span> name;
<span style="color:#75715e">#执行结果
</span><span style="color:#75715e"></span>A
a
B
b

<span style="color:#75715e"># 创建二进制校对规则（区分大小写）
</span><span style="color:#75715e"></span><span style="color:#66d9ef">CREATE</span> <span style="color:#66d9ef">TABLE</span> <span style="color:#a6e22e">t2</span>(
    name <span style="color:#66d9ef">varchar</span>(<span style="color:#ae81ff">1</span>)
)<span style="color:#66d9ef">charset</span> utf8MB4 <span style="color:#66d9ef">collate</span> utf8MB4_bin;

<span style="color:#66d9ef">INSERT</span> <span style="color:#66d9ef">INTO</span> t2 <span style="color:#66d9ef">VALUES</span>(<span style="color:#e6db74">&#34;B&#34;</span>);
<span style="color:#66d9ef">INSERT</span> <span style="color:#66d9ef">INTO</span> t2 <span style="color:#66d9ef">VALUES</span>(<span style="color:#e6db74">&#34;A&#34;</span>);
<span style="color:#66d9ef">INSERT</span> <span style="color:#66d9ef">INTO</span> t2 <span style="color:#66d9ef">VALUES</span>(<span style="color:#e6db74">&#34;b&#34;</span>);
<span style="color:#66d9ef">INSERT</span> <span style="color:#66d9ef">INTO</span> t2 <span style="color:#66d9ef">VALUES</span>(<span style="color:#e6db74">&#34;a&#34;</span>);

<span style="color:#66d9ef">select</span> <span style="color:#f92672">*</span> <span style="color:#66d9ef">from</span> t2 <span style="color:#66d9ef">order</span> <span style="color:#66d9ef">by</span> name;
<span style="color:#75715e">#执行结果
</span><span style="color:#75715e"></span>A
B
a
b
</code></pre></div></li>
<li>
<p>触发校对：排序<code>order by</code></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-mysql" data-lang="mysql"><span style="color:#66d9ef">select</span> <span style="color:#f92672">*</span> <span style="color:#66d9ef">from</span> t1 <span style="color:#66d9ef">order</span> <span style="color:#66d9ef">by</span> name;
<span style="color:#66d9ef">select</span> <span style="color:#f92672">*</span> <span style="color:#66d9ef">from</span> t2 <span style="color:#66d9ef">order</span> <span style="color:#66d9ef">by</span> name;
</code></pre></div></li>
<li>
<p>数据已经存在的表重新修改校对规则</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-mysql" data-lang="mysql"><span style="color:#66d9ef">alter</span> <span style="color:#66d9ef">table</span> t1 <span style="color:#66d9ef">collate</span> utf8MB4_general_ci;
<span style="color:#75715e"># 不会报错，但是实际校对规则依旧不变
</span></code></pre></div></li>
</ol>
<p>校对集的触发自动的，只要数据在进行比较的时候就会自动触发设定的校对规则。</p>]]></content:encoded>
    </item>
    
    <item>
      <title>MySQL基本操作</title>
      <link>https://www.niuwx.cn/posts/mysql/mysql%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/</link>
      <pubDate>Thu, 15 Jul 2021 22:31:51 +0800</pubDate>
      
      <guid>https://www.niuwx.cn/posts/mysql/mysql%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/</guid>
      <description>简单介绍了一下高级SQL操作</description>
      <content:encoded><![CDATA[<h3 id="sql语法规则">SQL语法规则</h3>
<blockquote>
<p>概念
<strong>SQL语法规则</strong>：SQL是一种结构化编程语言</p>
</blockquote>
<ul>
<li>基础SQL指令通常是以行为单位</li>
<li>SQL指令需要语句结束符，默认是英文分号：<code>;</code>、<code>\g</code>、<code>\G</code>
<ul>
<li><code>\G</code>：主要用于查询数据</li>
</ul>
</li>
<li>SQL指令类似自然语言</li>
<li>编写的SQL中如果用到了关键字或者保留字，需要使用反引号``来包括，让系统忽略</li>
</ul>
<blockquote>
<p>示例</p>
</blockquote>
<ol>
<li>结构创建</li>
</ol>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-mysql" data-lang="mysql"><span style="color:#66d9ef">create</span> <span style="color:#960050;background-color:#1e0010">数据类型</span> <span style="color:#960050;background-color:#1e0010">结构名</span> <span style="color:#960050;background-color:#1e0010">结构类型</span>;
</code></pre></div><ol start="2">
<li>显示结构</li>
</ol>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-mysql" data-lang="mysql"><span style="color:#75715e">#显示结构
</span><span style="color:#75715e"></span><span style="color:#66d9ef">show</span> <span style="color:#960050;background-color:#1e0010">结构类型（复数）</span>;

<span style="color:#75715e">#显示结构创建详细
</span><span style="color:#75715e"></span><span style="color:#66d9ef">show</span> <span style="color:#66d9ef">create</span> <span style="color:#960050;background-color:#1e0010">结构类型</span> <span style="color:#960050;background-color:#1e0010">结构名</span>;
</code></pre></div><ol start="3">
<li>数据操作（数据表）</li>
</ol>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-mysql" data-lang="mysql"><span style="color:#75715e">#新增数据
</span><span style="color:#75715e"></span><span style="color:#66d9ef">insert</span> <span style="color:#66d9ef">into</span> <span style="color:#960050;background-color:#1e0010">表名</span> <span style="color:#66d9ef">values</span>

<span style="color:#75715e">#查看数据
</span><span style="color:#75715e"></span><span style="color:#66d9ef">select</span> <span style="color:#66d9ef">from</span> <span style="color:#960050;background-color:#1e0010">表名</span>

<span style="color:#75715e">#更新数据
</span><span style="color:#75715e"></span><span style="color:#66d9ef">update</span> <span style="color:#960050;background-color:#1e0010">表名</span> <span style="color:#66d9ef">set</span>

<span style="color:#75715e">#删除数据
</span><span style="color:#75715e"></span><span style="color:#66d9ef">delete</span> <span style="color:#66d9ef">from</span> <span style="color:#960050;background-color:#1e0010">表名</span>
</code></pre></div><p>根据数据库的对象层级，可以将基础SQL操作分为三类：</p>
<ul>
<li>库操作：数据库相关操作</li>
<li>表操作：数据表（字段）相关操作</li>
<li>数据操作：数据相关操作</li>
</ul>
<h3 id="sql库操作">SQL库操作</h3>
<h4 id="创建数据库">创建数据库</h4>
<ul>
<li>使用<code>create database 数据库名字</code> 创建
<ul>
<li>数据库层面可以指定字符集：<code>charset/character set</code></li>
</ul>
</li>
<li>数据库层面可以指定校对集：<code>collate</code></li>
<li>创建数据库会在磁盘指定存放处产生一个文件夹</li>
<li>创建语法：</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-mysql" data-lang="mysql"><span style="color:#66d9ef">create</span> <span style="color:#66d9ef">database</span> <span style="color:#960050;background-color:#1e0010">数据库名字</span> [<span style="color:#960050;background-color:#1e0010">数据库选项</span>];
</code></pre></div><h5 id="示例">示例</h5>
<ol>
<li>
<p>创建一个指定名字的数据库</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-mysql" data-lang="mysql"><span style="color:#66d9ef">create</span> <span style="color:#66d9ef">database</span> test_1;
</code></pre></div></li>
<li>
<p>创建一个指定字符集的数据库</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-mysql" data-lang="mysql"><span style="color:#66d9ef">create</span> <span style="color:#66d9ef">database</span> test_2 <span style="color:#66d9ef">charset</span> utf8MB4
</code></pre></div></li>
<li>
<p>创建一个指定校对集的数据库</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-mysql" data-lang="mysql"><span style="color:#66d9ef">create</span> <span style="color:#66d9ef">database</span> test_3 <span style="color:#66d9ef">charset</span> utf8MB4 <span style="color:#66d9ef">collate</span> utf8mb4_general_ci;
</code></pre></div></li>
</ol>
<p>数据库命名规则：与C同</p>
<h4 id="显示数据库">显示数据库</h4>
<ul>
<li>数据库的查看是根据用户权限限定的</li>
<li>数据库的查看分为两种查看方式：
<ul>
<li>查看全部数据库</li>
<li>查看数据库创建指令</li>
</ul>
</li>
</ul>
<h5 id="示例-1">示例</h5>
<ol>
<li>
<p>显示数据库</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-mysql" data-lang="mysql"><span style="color:#66d9ef">show</span> <span style="color:#66d9ef">databases</span>;
</code></pre></div></li>
<li>
<p>显示数据库创建命令</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-mysql" data-lang="mysql"><span style="color:#66d9ef">show</span> <span style="color:#66d9ef">create</span> <span style="color:#66d9ef">databases</span> test_1;
</code></pre></div></li>
</ol>
<h4 id="使用数据库">使用数据库</h4>
<ul>
<li>数据库的操作通常是针对数据表或数据</li>
<li>通过使用数据库可以让后续指令默认针对具体数据库环境、简化后续命令</li>
<li>使用数据库语法：<code>use 数据库名字;</code></li>
</ul>
<h5 id="示例-2">示例</h5>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-mysql" data-lang="mysql"><span style="color:#66d9ef">use</span> test_1;
</code></pre></div><h4 id="修改数据库">修改数据库</h4>
<ul>
<li>
<p>数据库名字不可修改（老版本可以）</p>
<ul>
<li>先新增</li>
<li>后迁移</li>
<li>再删除</li>
</ul>
</li>
<li>
<p>数据库修改分为两个部分</p>
<ul>
<li>字符集</li>
<li>校对集</li>
</ul>
</li>
<li>
<p>数据库修改指令（与创建指令差不多）</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-mysql" data-lang="mysql"><span style="color:#66d9ef">alter</span> <span style="color:#66d9ef">database</span> <span style="color:#960050;background-color:#1e0010">数据库名字</span> <span style="color:#960050;background-color:#1e0010">库选项</span>
</code></pre></div></li>
</ul>
<h5 id="示例-3">示例</h5>
<ol>
<li>
<p>修改数据库字符集</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-mysql" data-lang="mysql"><span style="color:#66d9ef">alter</span> <span style="color:#66d9ef">database</span> test_2 <span style="color:#66d9ef">charset</span> dbk;
</code></pre></div></li>
<li>
<p>修改数据库校对集（如果字符集修改必须同时改变字符集）</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-mysql" data-lang="mysql"><span style="color:#66d9ef">alter</span> <span style="color:#66d9ef">database</span> test_3 <span style="color:#66d9ef">charset</span> gbk <span style="color:#66d9ef">collate</span> gbk_chinese_ci;
</code></pre></div></li>
</ol>
<h4 id="删除数据库">删除数据库</h4>
<ul>
<li>
<p>删除数据库会删除数据库内所有的表和数据</p>
</li>
<li>
<p>删除数据库操作要慎重（删前备份）</p>
</li>
<li>
<p>删除数据库后，对应的存储文件夹就会消失</p>
</li>
<li>
<p>删除语法</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-mysql" data-lang="mysql"><span style="color:#66d9ef">drop</span> <span style="color:#66d9ef">database</span> <span style="color:#960050;background-color:#1e0010">数据库名字</span>;
</code></pre></div></li>
</ul>
<h5 id="示例-4">示例</h5>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-mysql" data-lang="mysql"><span style="color:#66d9ef">drop</span> <span style="color:#66d9ef">database</span> test_1;
</code></pre></div><h3 id="sql表字段操作">SQL表（字段）操作</h3>
<h4 id="创建数据表">创建数据表</h4>
<p>根据业务需求，确定数据表的字段信息，然后创建表结构</p>
<ul>
<li>
<p>表与字段不分家，相辅相成</p>
</li>
<li>
<p>表的创建需要指定存储的数据库</p>
<ul>
<li>明确指定数据库</li>
<li>先使用数据库</li>
</ul>
</li>
<li>
<p>字段至少需要指定改名字、类型</p>
</li>
<li>
<p>数据库表不限定字段数量</p>
<ul>
<li>每个字段间使用逗号<code>,</code>分隔</li>
<li>最后一个字段不需要逗号</li>
</ul>
</li>
<li>
<p>表可以指定表选项（都有默认值）</p>
<ul>
<li>存储引擎：engine[=]具体存储引擎</li>
<li>字符集：[default] charset 具体字符集 （继承数据库）</li>
<li>校对集：collate（继承数据库）</li>
</ul>
</li>
<li>
<p>表创建语法</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-mysql" data-lang="mysql"><span style="color:#66d9ef">create</span> <span style="color:#66d9ef">table</span> [<span style="color:#960050;background-color:#1e0010">数据库名</span>.]<span style="color:#960050;background-color:#1e0010">表名</span>(
	<span style="color:#960050;background-color:#1e0010">字段名</span> <span style="color:#960050;background-color:#1e0010">字段类型</span>,
    ...
	<span style="color:#960050;background-color:#1e0010">字段名</span> <span style="color:#960050;background-color:#1e0010">字段类型</span>,
)<span style="color:#960050;background-color:#1e0010">表选项</span>;
</code></pre></div></li>
</ul>
<h5 id="示例-5">示例</h5>
<ol>
<li>
<p>创建简单数据表</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-mysql" data-lang="mysql"><span style="color:#66d9ef">create</span> <span style="color:#66d9ef">table</span> <span style="color:#a6e22e">t_1</span>(
	name <span style="color:#66d9ef">varchar</span>(<span style="color:#ae81ff">50</span>)
);
</code></pre></div></li>
<li>
<p>创建数据表&mdash;多字段</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-mysql" data-lang="mysql"><span style="color:#66d9ef">create</span> <span style="color:#66d9ef">table</span> <span style="color:#a6e22e">t_2</span>(
	name <span style="color:#66d9ef">varchar</span>(<span style="color:#ae81ff">50</span>),
    age <span style="color:#66d9ef">int</span>,
    gender <span style="color:#66d9ef">varchar</span>(<span style="color:#ae81ff">10</span>)
);
</code></pre></div></li>
<li>
<p>创建数据表&mdash;表选项</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-mysql" data-lang="mysql"><span style="color:#66d9ef">create</span> <span style="color:#66d9ef">table</span> <span style="color:#a6e22e">t_3</span>(
	name <span style="color:#66d9ef">varchar</span>(<span style="color:#ae81ff">50</span>)
)<span style="color:#66d9ef">engine</span> Innodb <span style="color:#66d9ef">charset</span> utf8MB4;
</code></pre></div></li>
</ol>
<blockquote>
<p><strong>拓展</strong></p>
<p>存储引擎是指数据存储和管理方式，MySQL中提供了多种存储引擎，一般使用默认存储引擎。</p>
<ul>
<li>InnoDB
<ul>
<li>默认存储引擎</li>
<li>支持事务处理和外键</li>
<li>数据统一管理</li>
</ul>
</li>
<li>MyIsam
<ul>
<li>不支持事务和外键</li>
<li>数据、表结构、索引独立管理</li>
<li>MySQL5.6以后不在维护</li>
</ul>
</li>
</ul>
<p>如果想创建一个与已有表一样的数据表，MySQL提供了一个便捷的复制模式</p>
<ul>
<li><code>create table 表名 like 数据库名字.表名</code></li>
</ul>
</blockquote>
<h4 id="显示数据表">显示数据表</h4>
<ul>
<li>数据表的显示与用户权限有关</li>
<li>显示数据表有两种方式
<ul>
<li>显示所有数据表</li>
<li>显示具体数据表的创建指令</li>
</ul>
</li>
</ul>
<h5 id="示例-6">示例</h5>
<ol>
<li>
<p>显示所有数据表&mdash;当前数据库下</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-mysql" data-lang="mysql"><span style="color:#66d9ef">show</span> <span style="color:#66d9ef">tables</span>;
</code></pre></div></li>
<li>
<p>显示所有数据表&mdash;指定数据库</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-mysql" data-lang="mysql"><span style="color:#66d9ef">show</span> <span style="color:#66d9ef">tables</span> <span style="color:#66d9ef">from</span> test_1;
</code></pre></div></li>
<li>
<p>显示部分关联数据表&mdash;匹配</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-mysql" data-lang="mysql"><span style="color:#66d9ef">show</span> <span style="color:#66d9ef">tables</span> <span style="color:#66d9ef">like</span> <span style="color:#e6db74">&#39;%like&#39;</span>;
<span style="color:#75715e">#_：匹配一个字符(固定位置)
</span><span style="color:#75715e">#%：匹配N个字符
</span></code></pre></div></li>
<li>
<p>显示数据表的创建指令</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-mysql" data-lang="mysql"><span style="color:#66d9ef">show</span> <span style="color:#66d9ef">create</span> <span style="color:#66d9ef">table</span> t_1;
</code></pre></div></li>
</ol>
<h4 id="查看数据表">查看数据表</h4>
<ul>
<li>
<p>通常是查看字段信息</p>
</li>
<li>
<p>详细的显示字段的各项信息</p>
</li>
<li>
<p>查看语法有三种</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-mysql" data-lang="mysql"><span style="color:#66d9ef">desc</span> <span style="color:#960050;background-color:#1e0010">表名</span>;
<span style="color:#66d9ef">describe</span> <span style="color:#960050;background-color:#1e0010">表名</span>;
<span style="color:#66d9ef">show</span> columns <span style="color:#66d9ef">from</span> <span style="color:#960050;background-color:#1e0010">表名</span>;
</code></pre></div></li>
</ul>
<h4 id="更改数据表">更改数据表</h4>
<ul>
<li>更改表名：<code>rename teble 表名 to 新表名</code></li>
<li>修改表选项：<code>alter table 表名</code></li>
</ul>
<h5 id="示例-7">示例</h5>
<ol>
<li>
<p>修改表名</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-mysql" data-lang="mysql"><span style="color:#66d9ef">rename</span> <span style="color:#66d9ef">table</span> t_1 <span style="color:#66d9ef">to</span> t1;
</code></pre></div><p><strong>注意</strong>：如果有时候要跨库修改的话，需要使用数据库名.表名</p>
</li>
<li>
<p>修改表选项</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-mysql" data-lang="mysql"><span style="color:#66d9ef">alter</span> <span style="color:#66d9ef">table</span> t1 <span style="color:#66d9ef">charset</span> gbk;
</code></pre></div></li>
</ol>
<h4 id="更改字段">更改字段</h4>
<ul>
<li>字段操作包含字段名字、类型和属性的操作</li>
<li>字段操作通常是在表已经存在数据后进行</li>
</ul>
<h5 id="新增字段">新增字段</h5>
<ul>
<li>
<p>字段的新增必须同时存在字段类型</p>
</li>
<li>
<p>新增语法</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-mysql" data-lang="mysql"><span style="color:#66d9ef">alter</span> <span style="color:#66d9ef">table</span> <span style="color:#960050;background-color:#1e0010">表名</span> <span style="color:#66d9ef">add</span> [<span style="color:#66d9ef">column</span>] <span style="color:#960050;background-color:#1e0010">字段名</span> <span style="color:#960050;background-color:#1e0010">字段类型</span> [<span style="color:#960050;background-color:#1e0010">字段属性</span>] [<span style="color:#960050;background-color:#1e0010">字段位置</span>]
</code></pre></div></li>
</ul>
<h6 id="示例-8">示例</h6>
<ol>
<li>
<p>给已经存在的表增加一个字段</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-mysql" data-lang="mysql"><span style="color:#66d9ef">alter</span> <span style="color:#66d9ef">table</span> t1 <span style="color:#66d9ef">add</span> age <span style="color:#66d9ef">int</span>;
</code></pre></div></li>
</ol>
<h5 id="字段位置">字段位置</h5>
<ul>
<li>
<p>字段位置分为两种</p>
<ul>
<li>第一个字段：<code>first</code></li>
<li>某个字段后：<code>after</code>已经存在字段名</li>
</ul>
</li>
<li>
<p>字段位置适用于追加字段、修改字段、更改字段名</p>
</li>
<li>
<p>字段位置语法</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-mysql" data-lang="mysql"><span style="color:#66d9ef">alter</span> <span style="color:#66d9ef">table</span> <span style="color:#960050;background-color:#1e0010">表名</span> <span style="color:#960050;background-color:#1e0010">字段操作</span> <span style="color:#960050;background-color:#1e0010">字段位置</span>;
</code></pre></div></li>
</ul>
<h6 id="示例-9">示例</h6>
<ol>
<li>
<p>为表增加一个字段，放在最前面</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-mysql" data-lang="mysql"><span style="color:#66d9ef">alter</span> <span style="color:#66d9ef">table</span> t1 <span style="color:#66d9ef">add</span> id <span style="color:#66d9ef">int</span> first;
</code></pre></div></li>
<li>
<p>在表某字段后增加一个字段</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-mysql" data-lang="mysql"><span style="color:#66d9ef">alter</span> <span style="color:#66d9ef">table</span> t1 <span style="color:#66d9ef">add</span> card <span style="color:#66d9ef">varchar</span>(<span style="color:#ae81ff">18</span>) after name;
</code></pre></div></li>
</ol>
<h5 id="更改字段名">更改字段名</h5>
<ul>
<li>
<p>字段名的修改必须跟上字段类型</p>
</li>
<li>
<p>字段名修改语法</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-mysql" data-lang="mysql"><span style="color:#66d9ef">alter</span> <span style="color:#66d9ef">table</span> <span style="color:#960050;background-color:#1e0010">表名</span> <span style="color:#66d9ef">change</span> <span style="color:#960050;background-color:#1e0010">原字段名</span> <span style="color:#960050;background-color:#1e0010">新字段名</span> <span style="color:#960050;background-color:#1e0010">字段类型</span> [<span style="color:#960050;background-color:#1e0010">字段属性</span>] [<span style="color:#960050;background-color:#1e0010">位置</span>];
</code></pre></div></li>
</ul>
<h6 id="示例-10">示例</h6>
<p>修改字段名card为sfz</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-mysql" data-lang="mysql"><span style="color:#66d9ef">alter</span> <span style="color:#66d9ef">table</span> t1 <span style="color:#66d9ef">change</span> card sfz <span style="color:#66d9ef">varchar</span>(<span style="color:#ae81ff">18</span>);
</code></pre></div><h5 id="修改字段">修改字段</h5>
<ul>
<li>
<p>修改字段类型、字段属性和位置</p>
</li>
<li>
<p>修改字段语法</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-mysql" data-lang="mysql"><span style="color:#66d9ef">alter</span> <span style="color:#66d9ef">table</span> <span style="color:#960050;background-color:#1e0010">表名</span> modify <span style="color:#960050;background-color:#1e0010">字段名</span> <span style="color:#960050;background-color:#1e0010">字段类型</span> [<span style="color:#960050;background-color:#1e0010">字段属性</span>] [<span style="color:#960050;background-color:#1e0010">位置</span>];
</code></pre></div></li>
</ul>
<h6 id="示例-11">示例</h6>
<p>修改sfz类型为char(18)并且把位置放到id后面</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-mysql" data-lang="mysql"><span style="color:#66d9ef">alter</span> <span style="color:#66d9ef">table</span> t1 modify sfz <span style="color:#66d9ef">char</span>(<span style="color:#ae81ff">18</span>) after id;
</code></pre></div><h4 id="删除字段">删除字段</h4>
<ul>
<li>
<p>删除字段会将数据也删除</p>
</li>
<li>
<p>删除字段语法</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-mysql" data-lang="mysql"><span style="color:#66d9ef">alter</span> <span style="color:#66d9ef">table</span> <span style="color:#960050;background-color:#1e0010">表名</span> <span style="color:#66d9ef">drop</span> <span style="color:#960050;background-color:#1e0010">字段名</span>;
</code></pre></div></li>
</ul>
<h5 id="示例-12">示例</h5>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-mysql" data-lang="mysql"><span style="color:#66d9ef">alter</span> <span style="color:#66d9ef">table</span> t1 <span style="color:#66d9ef">drop</span> age;
</code></pre></div><h3 id="sql数据操作">SQL数据操作</h3>
<h4 id="新增数据">新增数据</h4>
<ul>
<li>新增数据是根据表的字段顺序和数据类型要求将数据存放到数据表中</li>
<li>数据表中的数据以行(row)为存储单位，实际存储属于字段(field)存储数据</li>
<li>数据插入分两种方式
<ul>
<li>全字段插入：<code>insert into 表名 values(字段列表顺序对应的所有值)</code></li>
<li>部分字段插入：<code>insert into 表名(字段列表) values(字段列表对应的值的顺序列表)</code></li>
</ul>
</li>
</ul>
<h5 id="示例-13">示例</h5>
<ol>
<li>
<p>插入完整数据</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-mysql" data-lang="mysql"><span style="color:#66d9ef">insert</span> <span style="color:#66d9ef">into</span> t1 <span style="color:#66d9ef">values</span>(<span style="color:#ae81ff">1</span>,<span style="color:#e6db74">&#34;666&#34;</span>,<span style="color:#e6db74">&#34;张三&#34;</span>,<span style="color:#e6db74">&#34;小张&#34;</span>);
</code></pre></div></li>
<li>
<p>根据字段插入数据</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-mysql" data-lang="mysql"><span style="color:#66d9ef">insert</span> <span style="color:#66d9ef">into</span> <span style="color:#a6e22e">t1</span> (id,name ) <span style="color:#66d9ef">values</span>(<span style="color:#ae81ff">1</span>,<span style="color:#e6db74">&#34;李四&#34;</span>);
</code></pre></div></li>
</ol>
<h4 id="查看数据">查看数据</h4>
<ul>
<li>
<p>查到的数据显示出来是一张二维表</p>
</li>
<li>
<p>数据显示包含字段名和字段本身</p>
</li>
<li>
<p>数据查看分两种方式</p>
<ul>
<li>查看全部字段：使用<code>*</code>代替所有字段</li>
<li>查看部分字段：明确字段名，使用逗号分隔</li>
</ul>
</li>
<li>
<p>查看数据很多时候也是根据条件查询部分数据</p>
</li>
<li>
<p>查看语法</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-mysql" data-lang="mysql"><span style="color:#66d9ef">select</span> <span style="color:#f92672">*/</span><span style="color:#960050;background-color:#1e0010">字段列表</span> <span style="color:#66d9ef">from</span> <span style="color:#960050;background-color:#1e0010">表名</span>;
</code></pre></div></li>
</ul>
<h5 id="示例-14">示例</h5>
<ol>
<li>
<p>查看所有数据</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-mysql" data-lang="mysql"><span style="color:#66d9ef">select</span> <span style="color:#f92672">*</span> <span style="color:#66d9ef">from</span> t1;
</code></pre></div></li>
<li>
<p>查看部分字段数据</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-mysql" data-lang="mysql"><span style="color:#66d9ef">select</span> id,name;
</code></pre></div></li>
<li>
<p>查看表中id为1的信息</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-mysql" data-lang="mysql"><span style="color:#66d9ef">select</span> <span style="color:#f92672">*</span> <span style="color:#66d9ef">from</span> t1 <span style="color:#66d9ef">where</span> id <span style="color:#f92672">=</span> <span style="color:#ae81ff">1</span>;
</code></pre></div></li>
</ol>
<h4 id="更新数据">更新数据</h4>
<ul>
<li>
<p>更新数据通常时根据条件更新某些数据，而不是全部记录都更新</p>
</li>
<li>
<p>更新数据语法</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-mysql" data-lang="mysql"><span style="color:#66d9ef">update</span> <span style="color:#960050;background-color:#1e0010">表名</span> <span style="color:#66d9ef">set</span> <span style="color:#960050;background-color:#1e0010">字段</span> <span style="color:#f92672">=</span> <span style="color:#960050;background-color:#1e0010">新值</span>[,<span style="color:#960050;background-color:#1e0010">字段</span> <span style="color:#f92672">=</span> <span style="color:#960050;background-color:#1e0010">新值</span>] [<span style="color:#66d9ef">where</span> <span style="color:#960050;background-color:#1e0010">条件筛选</span>];
</code></pre></div></li>
</ul>
<h5 id="示例-15">示例</h5>
<ol>
<li>
<p>更新所有记录的身份信息</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-mysql" data-lang="mysql"><span style="color:#66d9ef">update</span> t1 <span style="color:#66d9ef">set</span> sfz <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;777&#34;</span>;
</code></pre></div></li>
<li>
<p>更新某个记录的多个字段数据</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-mysql" data-lang="mysql"><span style="color:#66d9ef">update</span> t1 <span style="color:#66d9ef">set</span> name <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;张三&#34;</span><span style="color:#960050;background-color:#1e0010">，</span>sfz <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;666&#34;</span> <span style="color:#66d9ef">where</span> id <span style="color:#f92672">=</span> <span style="color:#ae81ff">777</span>;
</code></pre></div></li>
</ol>
<h4 id="删除数据">删除数据</h4>
<ul>
<li>
<p>删除数据是一种不可逆操作</p>
</li>
<li>
<p>数据删除通常都是有条件删除</p>
</li>
<li>
<p>数据删除语法</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-mysql" data-lang="mysql"><span style="color:#66d9ef">delete</span> <span style="color:#66d9ef">from</span> <span style="color:#960050;background-color:#1e0010">表名</span> [<span style="color:#66d9ef">where</span> <span style="color:#960050;background-color:#1e0010">条件</span>];
</code></pre></div></li>
</ul>
<h5 id="示例-16">示例</h5>
<p>删除数据</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-mysql" data-lang="mysql"><span style="color:#66d9ef">delete</span> <span style="color:#66d9ef">from</span> t1 <span style="color:#66d9ef">where</span> id <span style="color:#f92672">=</span> <span style="color:#ae81ff">777</span>;
</code></pre></div>]]></content:encoded>
    </item>
    
    <item>
      <title>MySQL基本操作</title>
      <link>https://www.niuwx.cn/posts/mysql/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BB%8B%E7%BB%8D/</link>
      <pubDate>Thu, 15 Jul 2021 19:31:51 +0800</pubDate>
      
      <guid>https://www.niuwx.cn/posts/mysql/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BB%8B%E7%BB%8D/</guid>
      <description>简单介绍了一下MySQL基本操作</description>
      <content:encoded><![CDATA[<h3 id="数据库的基本知识">数据库的基本知识</h3>
<blockquote>
<p>概念</p>
<p><strong>数据库</strong>：database，是一种存储数据的仓库。</p>
</blockquote>
<ul>
<li>数据库是根据数据结构组织，存储和管理数据的</li>
<li>数据库能够长期、高效的管理和存储数据</li>
<li>数据库的目的就是能够存储（写）和提供（读）数据</li>
</ul>
<h3 id="数据库分类">数据库分类</h3>
<blockquote>
<p>概念</p>
<p><strong>数据库分类</strong>：根据数据库的架构和数据组织原理进行分类。</p>
</blockquote>
<ol>
<li>
<p>早起根据数据库的组织数据的存储模型分类</p>
<ul>
<li>层次数据库：基于层次的数据结构（数据分层）</li>
<li>网状数据库：基于网状的数据结构（数据网络）</li>
<li>关系数据库：基于关系模型的数据结构（二维表）</li>
</ul>
</li>
<li>
<p>现在较多根据实际数据管理模型分类（存储介质）</p>
<ul>
<li>关系型数据库：基于关系模型的数据结构（二维表）通常存储在磁盘</li>
<li>非关系型数据库：没有具体模型的数据结构（键值对）通常存储在内存</li>
</ul>
</li>
</ol>
<h4 id="关系型数据库">关系型数据库</h4>
<blockquote>
<p>概念</p>
<p><strong>关系型数据库</strong>：一种建立在关系模型上的数据库</p>
</blockquote>
<ul>
<li>关系模型：
<ul>
<li>关系数据结构（存储）</li>
<li>关系操作集合（操作）</li>
<li>关系完整约束（约束）</li>
</ul>
</li>
<li>关系型数据库存储在磁盘中（永久性存储）</li>
<li>关系型数据库系统(DBS)模型有四层结构
<ul>
<li>数据库管理系统(DBMS)：管理系统运行</li>
<li>数据库(DB)：数据存储的管理者</li>
<li>数据表(Table)：数据关系管理者</li>
<li>数据字段(Field)：依赖于数据表、实际数据存储者</li>
</ul>
</li>
<li>关系型数据库产品
<ul>
<li>大型：Oracle、DB2</li>
<li>中性：MySQL、SqlServer</li>
<li>小型：Sybase、Access</li>
</ul>
</li>
</ul>
<h4 id="非关系型数据库">非关系型数据库</h4>
<blockquote>
<p>概念</p>
<p><strong>非关系型数据库</strong>：NoSQL（Not only SQL），不仅仅是关系型数据库</p>
</blockquote>
<ul>
<li>所以不是关系型数据库的统称</li>
<li>数据存储模型不是二维表，而是键值对（KEY-VALUE）</li>
<li>存储的位置通常是内存（效率高）</li>
<li>不能永久性存储（需要定时存到关系型数据库中）</li>
<li>常见的非关系型数据库产品
<ul>
<li>MongoDB</li>
<li>Redis</li>
<li>Memcached</li>
</ul>
</li>
</ul>
<h4 id="对比">对比</h4>
<p>NoSQL通常与关系型数据库配合使用，他们彼此是一种互补关系。</p>
<ul>
<li>NoSQL运行在内存、解决效率问题
<ul>
<li>I/O问题</li>
<li>效率问题</li>
</ul>
</li>
<li>MySQL运行在磁盘、解决稳定问题
<ul>
<li>安全问题（永久存储）</li>
<li>稳定</li>
</ul>
</li>
</ul>
<h3 id="sql基本介绍">SQL基本介绍</h3>
<blockquote>
<p>概念</p>
<p><strong>SQL</strong>：<code>Structured Query Language</code>，结构化查询语言，是一种针对关系型数据库特殊标准化的编程语言。</p>
</blockquote>
<ul>
<li>SQL是一种编程语言</li>
<li>能够实现用户数据库查询和程序设计</li>
<li>SQL根据操作不同，分为几类：
<ul>
<li>DQL：<code>Data Query Language </code>，数据查询语言，用于查询和检索数据</li>
<li>DML：<code>Data Manipulation Language</code>，数据操作语言，用于数据的写操作（增删改）</li>
<li>DDL：<code>Data Definition Language</code>，数据定义语言，用于创建数据结构</li>
<li>DCL：<code>Data Control Language</code>，数据控制语言，用于用户权限管理</li>
<li>TPL：<code>Transaction Process Language</code>，事务处理语言，辅助DML进行事务操作（因此也归属于DML）</li>
</ul>
</li>
</ul>
<ol>
<li>SQL虽然是编程语言，但是目前数据库通常只用来进行数据管理（逻辑部分给其他编程语言）</li>
<li>SQL虽然是针对关系型数据库的通用语言，但是不同的产品操作指令不完全通用</li>
</ol>
<h3 id="mysql基本介绍">MySQL基本介绍</h3>
<blockquote>
<p>概念</p>
<p><strong>MySQL</strong>：瑞典AB公司下的一款<strong>关系型数据库</strong></p>
</blockquote>
<ul>
<li>MySQL当前属于甲骨文公司（AB-&gt;Sun-&gt;Oracle）</li>
<li>MySQL开源免费（部分存储引擎收费）</li>
<li>MySQL是一种C/S结构软件，因此需要MySQL的客户端来访问服务端（数据管理）
<ul>
<li>mysqld.exe：服务端</li>
<li>mysql.exe：客户端</li>
</ul>
</li>
<li>MySQL使用SQL指令对数据库进行操作</li>
</ul>
<h4 id="访问原理">访问原理</h4>
<pre tabindex="0"><code class="language-mermaid" data-lang="mermaid">graph LR
A[MySQL客户端] --&gt;B[寻找服务端 host寻找]
    B --&gt; C[寻找服务器 Port寻找]
    C --&gt; D[验证身份 username验证 password验证]
    D --&gt; E{服务器}
</code></pre><h3 id="mysql访问">MySQL访问</h3>
<blockquote>
<p><strong>MySQL访问</strong>：客户端连接上服务器，然后实现数据操作的过程</p>
</blockquote>
<ul>
<li>客户端访问服务端
<ul>
<li>利用Windows控制台访问（MySQL客户端）</li>
<li>利用数据库管理工具（Navicat）</li>
</ul>
</li>
<li>客户端需要连接认证
<ul>
<li>-h：主机地址（本机localhost 、可以忽略）</li>
<li>-P：端口号（默认3306）</li>
<li>-u：用户名</li>
<li>-p：用户密码</li>
</ul>
</li>
<li>客户端连接上服务端就表示占用了一个资源，可以进行对应权限的操作
<ul>
<li>MySQL数据库连接资源有限：单个服务器最多16384个</li>
<li>连接资源不够了其他访问就需要排队等待</li>
<li>用完尽可能释放资源</li>
</ul>
</li>
</ul>]]></content:encoded>
    </item>
    
  </channel>
</rss>
