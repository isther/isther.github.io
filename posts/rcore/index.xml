<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>rCore on Ther&#39;s Blog -- 个人笔记</title>
    <link>https://www.niuwx.cn/posts/rcore/</link>
    <description>Recent content in rCore on Ther&#39;s Blog -- 个人笔记</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Mon, 10 Oct 2022 16:33:51 +0800</lastBuildDate><atom:link href="https://www.niuwx.cn/posts/rcore/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title></title>
      <link>https://www.niuwx.cn/posts/rcore/os2/</link>
      <pubDate>Mon, 10 Oct 2022 16:33:51 +0800</pubDate>
      
      <guid>https://www.niuwx.cn/posts/rcore/os2/</guid>
      <description>Desc Text.</description>
      <content:encoded><![CDATA[<p>保障系统安全和多应用支持是操作系统的两个核心目标，本章从这两个目标出发，思考如何设计应用程序，并进一步展现操作系统的一系列新功能:</p>
<ul>
<li>构造包含操作系统内核和多个应用程序的单一执行程序</li>
<li>通过批处理支持多个程序的自动加载和运行</li>
<li>操作系统利用硬件特权级机制，实现对操作系统自身的保护</li>
<li>实现特权级的跨越</li>
<li>支持跨特权级的系统调用功能</li>
</ul>
<p><code>批处理系统(Batch System)</code>，它可以用来管理无需或仅需少量用户交互即可运行的程序，在资源允许的情况下它可以自动安排程序的执行，这被称为批处理作业，此名词源自二十世纪60年代的大型机时代。批处理系统的核心思想是：将多个程序打包到一起输入计算机，当一个程序运行结束后，计算机自动加载下一个程序到内存并执行。</p>
<p>本片代码:</p>
<ul>
<li><a href="https://github.com/isther/rCore/tree/os2">代码地址</a></li>
</ul>
<h2 id="特权级机制">特权级机制</h2>
<p>为了保护我们的批处理系统不受到出错应用程序的影响并全程稳定工作，单凭软件实现是很难做到的，而是需要CPU提供一种特权级隔离机制，使CPU在执行应用程序和操作系统内核的指令时处于不同的特权级。</p>
<h3 id="特权级的软硬件协同设计">特权级的软硬件协同设计</h3>
<p>实现特权级机制的根本原因是应用程序运行的安全性不可充分信任。由于操作系统和应用程序两者通过编译器形成一个单一执行程序来执行，导致即使是应用本身的问题，也会牵连操作系统，导致整个计算机系统出现问题。</p>
<p>所以，计算机科学家和工程师想出了一个办法：让相对安全可靠的操作系统运行在一个硬件保护的安全执行环境中，不受应用程序的破坏；而让应用程序运行在另外一个无法破坏操作系统的受限执行环境中。</p>
<p>为了确保操作系统的安全，对应用程序而言，需要限制的主要有两个方面：</p>
<ul>
<li>应用程序不能访问任意的地址空间</li>
<li>应用程序不能执行某些可能破坏计算机系统的指令</li>
</ul>
<p>除此之外，还需要确保应用程序能够得到操作系统的服务，即应用程序和操作系统还需要有交互的手段。使得低特权级机制只能做高特权级软件允许它做的，且超出低特权级能力的功能必须寻求高特权级软件的帮助。</p>
<p>为了实现这样的特权级机制，需要进行软硬件协同设计。一个比较简洁的方法就是，处理器设置两个不同安全等级的执行环境：</p>
<ul>
<li>用户态特权级的执行环境</li>
<li>内核态特权级的执行环境</li>
</ul>
<p>且明确指出可能破坏计算机系统的内核态特权级指令子集，内核态特权级指令子集只能在内核态特权级的执行环境中执行。处理器在执行指令前会进行特权级安全检查，如果在用户态执行环境中执行内核态特权级指令，会产生异常。</p>
<p>为了让应用程序获得操作系统的函数服务，采用传统的函数调用方(即通常的<code>call</code>和<code>ret</code>指令或指令组合)将会绕过硬件的特权级保护检查。所以可以设计新的机器指令：执行环境调用(Execution Environment Call 简称 <code>ecall</code>)和执行环境返回(Excution Environment Return 简称 <code>eret</code>)</p>
<ul>
<li><code>ecall</code>：具有用户态到内核态到执行环境切换能力的函数调用指令</li>
<li><code>eret</code>：具有内核态到用户态的执行环境切换能力的函数返回指令</li>
</ul>
<p>硬件具有了这样的机制后，还需要操作系统的配合才能最终完成对操作系统自身的保护。</p>
<ul>
<li>首先，操作系统需要提供相应的功能代码，能在执行<code>eret</code>前准备和恢复用户态执行应用程序的上下文。</li>
<li>其次，在应用程序调用<code>ecall</code>指令后，能够检查应用程序的系统调用参数，确保参数不会破坏操作系统。</li>
</ul>
<h3 id="risc-v特权级架构">RISC-V特权级架构</h3>
<p>RISC-V架构一共定义了4种特权级：</p>
<table>
<thead>
<tr>
<th style="text-align:center">级别</th>
<th style="text-align:center">编码</th>
<th style="text-align:center">名称</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">0</td>
<td style="text-align:center">00</td>
<td style="text-align:center">用户/应用模式(U, User/Application)</td>
</tr>
<tr>
<td style="text-align:center">1</td>
<td style="text-align:center">01</td>
<td style="text-align:center">监督模式(S, Supervistor)</td>
</tr>
<tr>
<td style="text-align:center">2</td>
<td style="text-align:center">10</td>
<td style="text-align:center">虚拟监督模式(H, Hypervistor)</td>
</tr>
<tr>
<td style="text-align:center">3</td>
<td style="text-align:center">11</td>
<td style="text-align:center">机器模式(M, Machine)</td>
</tr>
</tbody>
</table>
<p>级别数值越大，特权级越高，掌控硬件的能力越强。</p>
<p>在CPU硬件层面，除了M模式必须存在外，其他模式可以不存在。RISC-V架构中，只有M模式是必须实现的，剩下的特权级则可以根据跑在CPU上应用的实际需求进行调整：</p>
<ul>
<li>简单的嵌入式应用只需要实现M模式</li>
<li>带有一定保护能力的嵌入式系统需要实现M/U模式</li>
<li>复杂的多任务系统则需要实现M/S/U模式</li>
<li>到目前为止，H模式特权规范还没有完全制定好</li>
</ul>
<p>从特权级架构的角度看待执行环境栈：</p>
<p><img loading="lazy" src="/rCore/PrivilegeStack.png" alt="PrivilegeStack"  />
</p>
<p>其中，白色块表示一层执行环境，黑色块表示相邻两层执行环境之间的接口。其中操作系统内核代码运行在S模式上；应用程序运行在U模式上。</p>
<p>运行在M模式上的软件被称为<strong>监督模式执行环境</strong>(SEE, Supervistor Execution Environment)，比如在操作系统运行前负责加载操作系统的Bootloader-RustSBI。站在运行在S模式上的软件视角来看，它的下面也需要一层执行环境支撑，因此被命名为SEE，它需要在相比S模式更高的特权级下运行，一般情况下SEE在M模式上执行。</p>
<p>执行环境的功能之一是在它支持的上层软件执行之前进行一些初始化工作。之前提到的引导加载程序会在加电之后对整个系统进行初始化，它实际上就是SEE功能的一部分。也就是说在RISC-V架构上的引导加载程序一般运行在M模式上。</p>
<p>在上一节中，实现了简单的操作系统，它和应用程序全程运行在S模式下，应用程序很容易破坏没有任何保护的执行环境-操作系统。在之后，我们会涉及RISC-V的M/S/U三种特权级：</p>
<ul>
<li>应用程序和用户态支持库运行在U模式的最低特权级</li>
<li>操作系统内核运行在S模式特权级，形成支撑应用程序和用户态支持的执行环境</li>
<li>在之前提到的bootloader-RurstSBI实际上是运行在更底层的M模式特权级下的软件，是操作系统内核的执行环境。</li>
</ul>
<p>执行环境的另一种功能是对上层软件的执行进行监控管理。可以理解为，当上层软件执行出现了一些异常或者特殊情况时，导致需要用到执行环境中提供的功能，因此需要暂停上层软件的执行，转而运行执行环境的代码。</p>
<p>由于上层软件和执行环境被设计为运行在不同的特权级，这个过程也往往**（不一定）<strong>伴随着CPU的</strong>特权级切换**。当执行环境的代码运行结束后，我们需要回到上层软件暂停的位置继续执行。在RISC-V架构中，这种与常规控制流不同的<strong>异常控制流(ECF, Exception Control Flow)<strong>被称为</strong>异常(Exception)</strong>，在RISC-V语境下的Trap种类之一。</p>
<p>用户态应用直接触发从用户态到内核态的异常的原因总体上可以分为两种：</p>
<ul>
<li>用户态软件为获得内核态操作系统的服务功能而执行特殊指令</li>
<li>在执行某条指令期间发生了错误并被CPU检测到，例如执行了用户态不允许执行的指令或者其他错误</li>
</ul>
<p>下表是RISC-V特权级规范定义的可能会导致从低特权级到高特权级到各种<strong>异常</strong>：</p>
<table>
<thead>
<tr>
<th style="text-align:center">Interrupt</th>
<th style="text-align:center">Exception Code</th>
<th style="text-align:center">Description</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">0</td>
<td style="text-align:center">0</td>
<td style="text-align:center">Instruction address misaligned</td>
</tr>
<tr>
<td style="text-align:center">0</td>
<td style="text-align:center">1</td>
<td style="text-align:center">Instruction access fault</td>
</tr>
<tr>
<td style="text-align:center">0</td>
<td style="text-align:center">2</td>
<td style="text-align:center">Illegal instruction</td>
</tr>
<tr>
<td style="text-align:center">0</td>
<td style="text-align:center">3</td>
<td style="text-align:center">Breakpoint</td>
</tr>
<tr>
<td style="text-align:center">0</td>
<td style="text-align:center">4</td>
<td style="text-align:center">Load address misaligned</td>
</tr>
<tr>
<td style="text-align:center">0</td>
<td style="text-align:center">5</td>
<td style="text-align:center">Load access fault</td>
</tr>
<tr>
<td style="text-align:center">0</td>
<td style="text-align:center">6</td>
<td style="text-align:center">Stroe/AMO address misaligned</td>
</tr>
<tr>
<td style="text-align:center">0</td>
<td style="text-align:center">7</td>
<td style="text-align:center">Store/AMO access fault</td>
</tr>
<tr>
<td style="text-align:center">0</td>
<td style="text-align:center">8</td>
<td style="text-align:center">Environment call from U-mode</td>
</tr>
<tr>
<td style="text-align:center">0</td>
<td style="text-align:center">9</td>
<td style="text-align:center">Environment call from S-mode</td>
</tr>
<tr>
<td style="text-align:center">0</td>
<td style="text-align:center">11</td>
<td style="text-align:center">Environment call from M-mode</td>
</tr>
<tr>
<td style="text-align:center">0</td>
<td style="text-align:center">12</td>
<td style="text-align:center">Instruction page fault</td>
</tr>
<tr>
<td style="text-align:center">0</td>
<td style="text-align:center">13</td>
<td style="text-align:center">Load page fault</td>
</tr>
<tr>
<td style="text-align:center">0</td>
<td style="text-align:center">15</td>
<td style="text-align:center">Stroe/AMO page fault</td>
</tr>
</tbody>
</table>
<p>其中，<code>断点(Breakpoint)</code>和<code>执行环境调用(Enviroment call)</code>两种异常（这种有意而为之的指令称为<em>陷入</em>或<em>trap</em>类指令）是通常在上层软件中执行一条特定的指令触发的：执行<code>ebreak</code>这条指令之后就会触发断点陷入异常；而执行<code>ecall</code>这条指令之后则会随着CPU当前所处特权级而触发不同的异常。</p>
<p>执行环境调用<code>ecall</code>，这是一种很特殊的<em>陷入</em>类的指令，在之前从特权级架构看待执行环境栈这张图中，相邻两特权级软件之间的接口正是基于这种陷入机制实现的。M模式软件SEE和S模式的内核之间的接口被称为<strong>监督模式二进制接口(Supervistor Binary Interface, SBI)</strong>，而内核和U模式的应用程序之间的接口被称为<strong>应用程序二进制接口(Application Binary Interface, ABI)</strong>，它还有一个更加通俗的名字：<strong>系统调用(syscall ,System Cal)</strong>。而之所以叫做二进制接口，是因为它与高级编程语言的内部调用接口不同，是机器/汇编指令级的一种接口。</p>
<p>事实上M/S/U三个特权级的软件可分别由不同的编程语言实现。即使是用同一种汇编语言实现，其调用也不是普通的函数调用，而是<strong>陷入异常控制流</strong>，在该过程中切换CPU特权级。因此只有将接口下降到机器/汇编指令级才能满足其跨高级语言的通用性和灵活性。</p>
<p>可以看到，在这样的架构之下，每层特权级的软件都只能做高特权级软件允许它做的，并且不会产生什么撼动高特权级软件的情况，一旦低特权级软件的要求超出了其能力范围，就必须寻求高特权级软件的帮助，否则就是一种异常行为了。因此，在软件执行过程中，我们经常可以看到特权级切换：</p>
<p><img loading="lazy" src="/rCore/EnvironmentCallFlow.png" alt="EnvironmentCallFlow"  />
</p>
<p>其他的异常则一般是在执行某一条指令的时候发生了某种错误，例如除零、无效地址访问、无效指令等；或处理器认为处于当前特权级下执行等当前指令是高特权级指令或会访问不应该访问的高特权级的资源（可能危害系统）。碰到这种情况，就需要将控制权转交给高特权级的软件来处理：</p>
<ul>
<li>当错误/异常恢复后，则重新回到低优先级软件去执行</li>
<li>如不能恢复错误/异常，那高特权级软件可以杀死和清除低特权级软件，避免破坏整个执行环境</li>
</ul>
<h3 id="risc-v的特权指令">RISC-V的特权指令</h3>
<p>与特权级无关的一般的指令和通用寄存器<code>x0</code>~<code>x31</code>在任何特权级都可以执行。而每个特权级都对应一些特殊指令和<code>控制状态寄存器(Control and Status Register, CSR)</code>，来控制该特权级的某些行为并描述其状态。当然特权指令不仅具有读写CSR的指令，还有其他功能的特权指令。</p>
<p>如果处于低特权级状态的处理器执行了高特权级的指令，会产生非法指令错误的异常。这样，位于高特权级的执行环境能够得知低特权级的软件出现了错误，这个错误一般是不可恢复的，此时执行环境将低特权级的软件终止，这在某种程度上体现了特权级保护机制的作用。</p>
<p>在RISC-V中，会有两类属于高特权级S模式的特权指令：</p>
<ul>
<li>指令本身属于高特权级的指令，例如<code>sret</code>，表示从S模式返回到U模式</li>
<li>指令访问了S模式特权级下才能访问的寄存器或内存，例如表示S模式系统状态的<strong>控制状态寄存器</strong><code>sstatus</code>等</li>
</ul>
<p>RISC-V S模式特权指令：</p>
<table>
<thead>
<tr>
<th style="text-align:center">指令</th>
<th style="text-align:center">含义</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">sret</td>
<td style="text-align:center">从S模式返回U模式：在U模式下执行会产生非法指令异常</td>
</tr>
<tr>
<td style="text-align:center">wfi</td>
<td style="text-align:center">处理器在空闲时进入低功耗状态等待中断：在U模式下执行会产生非法指令异常</td>
</tr>
<tr>
<td style="text-align:center">sfence.vma</td>
<td style="text-align:center">刷新TLB缓存：在U模式下执行会产生非法指令异常</td>
</tr>
<tr>
<td style="text-align:center">访问S模式CSR的指令</td>
<td style="text-align:center">通过访问sepc/stvec/scause/sscartch/stval/sstatus/satp等CSR来改变系统状态：在U模式下执行会产生非法指令异常</td>
</tr>
</tbody>
</table>
<h2 id="实现应用程序">实现应用程序</h2>
<p>接下来将设计实现被批处理系统逐个加载并运行的应用程序。应用程序的设计实现要点是：</p>
<ul>
<li>应用程序的内存布局</li>
<li>应用程序发出的系统调用</li>
</ul>
<p>从某种程度上讲，这里设计的应用程序与第一章中的最小用户态执行环境有很多相同的地方。即设计一个应用程序和基本的支持的功能库，这样应用程序在用户态通过操作系统提供的服务完成自身的任务。</p>
<h3 id="应用程序设计">应用程序设计</h3>
<p>应用程序、用户库（由入口函数、初始化函数、I/O函数和系统调用接口等多个rust文件组成）放在根目录的<code>user</code>目录下，它和上一篇的裸机应用不同之处主要在项目的目录文件结构和内存布局上：</p>
<ul>
<li><code>user/src/bin/*.rs</code>：应用程序</li>
<li><code>user/src/*.rs</code>：用户库</li>
<li><code>user/src/linker.ld</code>：应用程序的内存布局说明</li>
</ul>
<h4 id="项目结构">项目结构</h4>
<p><code>user/src/bin</code>目录下有多个文件，每个文件是一个应用程序，分别是：</p>
<ul>
<li><code>00hello_wordl</code>：在屏幕上打印一行<code>Hello, world!</code></li>
<li><code>01store_fault</code>：访问一个非法的物理地址，测试批处理系统是否会被该错误影响</li>
<li><code>02power</code>：不断在计算操作和打印字符串操作之间进行特权级切换</li>
<li><code>03priv_inst</code>：尝试在用户态执行内核态的特权级指令<code>sret</code></li>
<li><code>04priv_csr</code>：尝试在用户态修改内核态CSR <code>sstatus</code></li>
</ul>
<div class="highlight"><div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">
<table style="border-spacing:0;padding:0;margin:0;border:0;"><tr><td style="vertical-align:top;padding:0;margin:0;border:0;">
<pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">12
</span></code></pre></td>
<td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
<pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-rust" data-lang="rust"><span style="display:flex;"><span><span style="color:#75715e">// user/src/bin/00hello_world.rs
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#75715e">#![no_std]</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#![no_main]</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#[macro_use]</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">extern</span> <span style="color:#66d9ef">crate</span> user_lib;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#[no_mangle]</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">fn</span> <span style="color:#a6e22e">main</span>() -&gt; <span style="color:#66d9ef">i32</span> {
</span></span><span style="display:flex;"><span>    println!(<span style="color:#e6db74">&#34;Hello, world!&#34;</span>);
</span></span><span style="display:flex;"><span>    <span style="color:#ae81ff">0</span>
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></td></tr></table>
</div>
</div><div class="highlight"><div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">
<table style="border-spacing:0;padding:0;margin:0;border:0;"><tr><td style="vertical-align:top;padding:0;margin:0;border:0;">
<pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">12
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">13
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">14
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">15
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">16
</span></code></pre></td>
<td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
<pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-rust" data-lang="rust"><span style="display:flex;"><span><span style="color:#75715e">// user/src/bin/01store_fault.rs
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#75715e">#![no_std]</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#![no_main]</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#[macro_use]</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">extern</span> <span style="color:#66d9ef">crate</span> user_lib;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#[no_mangle]</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">fn</span> <span style="color:#a6e22e">main</span>() -&gt; <span style="color:#66d9ef">i32</span> {
</span></span><span style="display:flex;"><span>    println!(<span style="color:#e6db74">&#34;Into Test store_fault, we will insert an invalid store operation...&#34;</span>);
</span></span><span style="display:flex;"><span>    println!(<span style="color:#e6db74">&#34;Kernel should kill this application!&#34;</span>);
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">unsafe</span> {
</span></span><span style="display:flex;"><span>        core::ptr::null_mut::<span style="color:#f92672">&lt;</span><span style="color:#66d9ef">u8</span><span style="color:#f92672">&gt;</span>().write_volatile(<span style="color:#ae81ff">0</span>);
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>    <span style="color:#ae81ff">0</span>
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></td></tr></table>
</div>
</div><div class="highlight"><div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">
<table style="border-spacing:0;padding:0;margin:0;border:0;"><tr><td style="vertical-align:top;padding:0;margin:0;border:0;">
<pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">12
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">13
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">14
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">15
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">16
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">17
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">18
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">19
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">20
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">21
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">22
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">23
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">24
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">25
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">26
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">27
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">28
</span></code></pre></td>
<td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
<pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-rust" data-lang="rust"><span style="display:flex;"><span><span style="color:#75715e">// user/src/bin/02power.rs
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#75715e">#![no_std]</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#![no_main]</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#[macro_use]</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">extern</span> <span style="color:#66d9ef">crate</span> user_lib;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">const</span> SIZE: <span style="color:#66d9ef">usize</span> <span style="color:#f92672">=</span> <span style="color:#ae81ff">10</span>;
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">const</span> P: <span style="color:#66d9ef">u32</span> <span style="color:#f92672">=</span> <span style="color:#ae81ff">3</span>;
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">const</span> STEP: <span style="color:#66d9ef">usize</span> <span style="color:#f92672">=</span> <span style="color:#ae81ff">100000</span>;
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">const</span> MOD: <span style="color:#66d9ef">u32</span> <span style="color:#f92672">=</span> <span style="color:#ae81ff">10007</span>;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#[no_mangle]</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">fn</span> <span style="color:#a6e22e">main</span>() -&gt; <span style="color:#66d9ef">i32</span> {
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">let</span> <span style="color:#66d9ef">mut</span> pow <span style="color:#f92672">=</span> [<span style="color:#ae81ff">0</span><span style="color:#66d9ef">u32</span>; SIZE];
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">let</span> <span style="color:#66d9ef">mut</span> index: <span style="color:#66d9ef">usize</span> <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>;
</span></span><span style="display:flex;"><span>    pow[index] <span style="color:#f92672">=</span> <span style="color:#ae81ff">1</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">for</span> i <span style="color:#66d9ef">in</span> <span style="color:#ae81ff">1</span><span style="color:#f92672">..=</span>STEP {
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">let</span> last <span style="color:#f92672">=</span> pow[index];
</span></span><span style="display:flex;"><span>        index <span style="color:#f92672">=</span> (index <span style="color:#f92672">+</span> <span style="color:#ae81ff">1</span>) <span style="color:#f92672">%</span> SIZE;
</span></span><span style="display:flex;"><span>        pow[index] <span style="color:#f92672">=</span> last <span style="color:#f92672">*</span> P <span style="color:#f92672">%</span> MOD;
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">if</span> i <span style="color:#f92672">%</span> <span style="color:#ae81ff">10000</span> <span style="color:#f92672">==</span> <span style="color:#ae81ff">0</span> {
</span></span><span style="display:flex;"><span>            println!(<span style="color:#e6db74">&#34;{}^{}={}(MOD {})&#34;</span>, P, i, pow[index], MOD);
</span></span><span style="display:flex;"><span>        }
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>    println!(<span style="color:#e6db74">&#34;Test power OK!&#34;</span>);
</span></span><span style="display:flex;"><span>    <span style="color:#ae81ff">0</span>
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></td></tr></table>
</div>
</div><div class="highlight"><div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">
<table style="border-spacing:0;padding:0;margin:0;border:0;"><tr><td style="vertical-align:top;padding:0;margin:0;border:0;">
<pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">12
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">13
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">14
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">15
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">16
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">17
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">18
</span></code></pre></td>
<td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
<pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-rust" data-lang="rust"><span style="display:flex;"><span><span style="color:#75715e">// user/src/bin/03priv_inst.rs
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#75715e">#![no_std]</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#![no_main]</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#[macro_use]</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">extern</span> <span style="color:#66d9ef">crate</span> user_lib;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">use</span> core::arch::asm;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#[no_mangle]</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">fn</span> <span style="color:#a6e22e">main</span>() -&gt; <span style="color:#66d9ef">i32</span> {
</span></span><span style="display:flex;"><span>    println!(<span style="color:#e6db74">&#34;Try to execute privileged instruction in U Mode&#34;</span>);
</span></span><span style="display:flex;"><span>    println!(<span style="color:#e6db74">&#34;Kernel should kill this application!&#34;</span>);
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">unsafe</span> {
</span></span><span style="display:flex;"><span>        asm!(<span style="color:#e6db74">&#34;sret&#34;</span>);
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>    <span style="color:#ae81ff">0</span>
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></td></tr></table>
</div>
</div><div class="highlight"><div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">
<table style="border-spacing:0;padding:0;margin:0;border:0;"><tr><td style="vertical-align:top;padding:0;margin:0;border:0;">
<pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">12
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">13
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">14
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">15
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">16
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">17
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">18
</span></code></pre></td>
<td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
<pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-rust" data-lang="rust"><span style="display:flex;"><span><span style="color:#75715e">// user/src/bin/04priv_csr.rs
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#75715e">#![no_std]</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#![no_main]</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#[macro_use]</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">extern</span> <span style="color:#66d9ef">crate</span> user_lib;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">use</span> riscv::register::sstatus::{self, SPP};
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#[no_mangle]</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">fn</span> <span style="color:#a6e22e">main</span>() -&gt; <span style="color:#66d9ef">i32</span> {
</span></span><span style="display:flex;"><span>    println!(<span style="color:#e6db74">&#34;Try to access privileged CSR in U Mode&#34;</span>);
</span></span><span style="display:flex;"><span>    println!(<span style="color:#e6db74">&#34;Kernel should kill this application!&#34;</span>);
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">unsafe</span> {
</span></span><span style="display:flex;"><span>        sstatus::set_spp(SPP::User);
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>    <span style="color:#ae81ff">0</span>
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></td></tr></table>
</div>
</div><p>批处理系统会按照文件名开头的数字编号从小到大的顺序加载并运行它们。</p>
<p>每个应用程序的实现都在对应的单个文件中。打开其中一个文件，会看到只有一个<code>main</code>函数和若干相关函数所形成的整个应用程序逻辑。</p>
<p>在<code>user/src/lib.rs</code>中定义了用户库的入口点<code>_start</code>：</p>
<div class="highlight"><div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">
<table style="border-spacing:0;padding:0;margin:0;border:0;"><tr><td style="vertical-align:top;padding:0;margin:0;border:0;">
<pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">4
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">5
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">6
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">7
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">8
</span></code></pre></td>
<td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
<pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-rust" data-lang="rust"><span style="display:flex;"><span><span style="color:#75715e">// user/src/lib.rs
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#75715e">#[no_mangle]</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#[link_section = </span><span style="color:#e6db74">&#34;.text.entry&#34;</span><span style="color:#75715e">]</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">pub</span> <span style="color:#66d9ef">extern</span> <span style="color:#e6db74">&#34;C&#34;</span> <span style="color:#66d9ef">fn</span> <span style="color:#a6e22e">_start</span>() -&gt; <span style="color:#f92672">!</span> {
</span></span><span style="display:flex;"><span>    clear_bss();
</span></span><span style="display:flex;"><span>    exit(main());
</span></span><span style="display:flex;"><span>    panic!(<span style="color:#e6db74">&#34;unreachable after sys_exit!&#34;</span>);
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></td></tr></table>
</div>
</div><p>第3行使用Rust宏，将<code>_start</code>这段代码编译后的汇编代码放在一个名为<code>.text.entry</code>的代码段中，方便我们在后续链接的时候调整它的位置使得它能够作为用户库的入口。</p>
<p>从第4行开始，进入用户库入口之后，与上一篇一样，手动清空需要零初始化的<code>.bss</code>段；然后调用<code>main</code>函数得到一个类型为<code>i32</code>的返回值，最后调用用户库提供的<code>exit</code>接口退出应用程序，并将<code>main</code>函数的返回值告知批处理系统。</p>
<p>在<code>lib.rs</code>中可以看到另一个<code>main</code>：</p>
<div class="highlight"><div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">
<table style="border-spacing:0;padding:0;margin:0;border:0;"><tr><td style="vertical-align:top;padding:0;margin:0;border:0;">
<pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">4
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">5
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">6
</span></code></pre></td>
<td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
<pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-rust" data-lang="rust"><span style="display:flex;"><span><span style="color:#75715e">// user/src/lib.rs
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#75715e">#[linkage = </span><span style="color:#e6db74">&#34;weak&#34;</span><span style="color:#75715e">]</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#[no_mangle]</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">fn</span> <span style="color:#a6e22e">main</span>() -&gt; <span style="color:#66d9ef">i32</span> {
</span></span><span style="display:flex;"><span>    panic!(<span style="color:#e6db74">&#34;Cannot find main!&#34;</span>);
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></td></tr></table>
</div>
</div><p>第2行，我们使用Rust的宏将其函数<code>main</code>标志为弱链接。这样最后链接的时候，虽然在<code>lib.rs</code>和应用程序的文件中都会有<code>main</code>符号，但由于<code>lib.rs</code>中的<code>main</code>符号是弱链接，链接器会使用应用程序的<code>main</code>。这里主要是进行某种程度上的保护，如果应用程序的文件中找不到任何<code>main</code>，那么编译也能够通过，但在运行时会报错。</p>
<p>为了支持上述的链接操作，需要引入:</p>
<div class="highlight"><div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">
<table style="border-spacing:0;padding:0;margin:0;border:0;"><tr><td style="vertical-align:top;padding:0;margin:0;border:0;">
<pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
</span></code></pre></td>
<td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
<pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-rust" data-lang="rust"><span style="display:flex;"><span><span style="color:#75715e">// user/src/lib.rs
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#75715e">#![feature(linkage)]</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h4 id="内存布局">内存布局</h4>
<p>在<code>user/.cargo/config</code>中，我们和第一章一样设置链接时使用链接脚本<code>user/src/linker.ld</code>。</p>
<p>在<code>linker.ld</code>中，我们做的重要的事情是：</p>
<ul>
<li>将程序起始物理地址调整为<code>0x80400000</code>，上述五个应用程序都会被加载到这个物理地址上运行</li>
<li>将<code>_start</code>所在的<code>.text.entry</code>放在整个程序的开头，也就是说批处理系统只要在加载之后跳转到<code>0x80400000</code>就已经进入了用户库的入口点，并会在初始化之后跳转到应用程序主逻辑</li>
<li>提供了最终生成可执行文件的<code>.bss</code>段的起始和终止地址，方便<code>clear_bss</code>函数调用</li>
</ul>
<div class="highlight"><div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">
<table style="border-spacing:0;padding:0;margin:0;border:0;"><tr><td style="vertical-align:top;padding:0;margin:0;border:0;">
<pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">12
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">13
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">14
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">15
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">16
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">17
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">18
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">19
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">20
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">21
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">22
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">23
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">24
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">25
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">26
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">27
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">28
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">29
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">30
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">31
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">32
</span></code></pre></td>
<td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
<pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-rust" data-lang="rust"><span style="display:flex;"><span><span style="color:#75715e">// user/src/linker.ld
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>OUTPUT_ARCH(riscv)
</span></span><span style="display:flex;"><span>ENTRY(_start)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>BASE_ADDRESS <span style="color:#f92672">=</span> <span style="color:#ae81ff">0x80400000</span>;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>SECTIONS
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>    . <span style="color:#f92672">=</span> BASE_ADDRESS;
</span></span><span style="display:flex;"><span>    .text : {
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">*</span>(.text.entry)
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">*</span>(.text .text.<span style="color:#f92672">*</span>)
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>    .rodata : {
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">*</span>(.rodata .rodata.<span style="color:#f92672">*</span>)
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">*</span>(.srodata .srodata.<span style="color:#f92672">*</span>)
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>    .data : {
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">*</span>(.data .data.<span style="color:#f92672">*</span>)
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">*</span>(.sdata .sdata.<span style="color:#f92672">*</span>)
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>    .bss : {
</span></span><span style="display:flex;"><span>        start_bss <span style="color:#f92672">=</span> .;
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">*</span>(.bss .bss.<span style="color:#f92672">*</span>)
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">*</span>(.sbss .sbss.<span style="color:#f92672">*</span>)
</span></span><span style="display:flex;"><span>        end_bss <span style="color:#f92672">=</span> .;
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">/</span>DISCARD<span style="color:#f92672">/</span> : {
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">*</span>(.eh_frame)
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">*</span>(.debug<span style="color:#f92672">*</span>)
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></td></tr></table>
</div>
</div><h4 id="系统调用">系统调用</h4>
<p>在子模块<code>syscall</code>中，应用通过<code>ecall</code>调用批处理系统提供的接口，由于应用程序运行在用户态，<code>ecall</code>指令会触发执行环境调用异常，并Trap进入S模式执行批处理系统针对这个异常特别提供的服务代码。由于这个接口处于S模式的批处理系统和U模式的应用程序之间，这个接口可以被称为ABI或者系统调用。</p>
<p>在本篇中，应用程序和批处理系统之间按照API的结构，约定如下两个系统调用：</p>
<div class="highlight"><div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">
<table style="border-spacing:0;padding:0;margin:0;border:0;"><tr><td style="vertical-align:top;padding:0;margin:0;border:0;">
<pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">12
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">13
</span></code></pre></td>
<td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
<pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-rust" data-lang="rust"><span style="display:flex;"><span><span style="color:#75715e">// 功能：将内存中缓冲区中的数据写入文件
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">// 参数： fd表示待写入文件的文件描述符
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">//		 buf表示内存中缓冲区的起始地址
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">//		 len表示内存中缓冲区的长度
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">// 返回值：返回成功写入的长度
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">// syscall ID：64
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#66d9ef">pub</span> <span style="color:#66d9ef">fn</span> <span style="color:#a6e22e">sys_write</span>(fd: <span style="color:#66d9ef">usize</span>, buffer: <span style="color:#66d9ef">&amp;</span>[<span style="color:#66d9ef">u8</span>]) -&gt; <span style="color:#66d9ef">isize</span>;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">// 功能：退出应用程序并返回值告知批处理系统
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">// 参数： xstate表示应用程序的返回值
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">// 返回值：该系统调用无需返回
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">// syscall ID：93
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#66d9ef">pub</span> <span style="color:#66d9ef">fn</span> <span style="color:#a6e22e">sys_exit</span>(exit_code: <span style="color:#66d9ef">i32</span>) -&gt; <span style="color:#66d9ef">isize</span>;
</span></span></code></pre></td></tr></table>
</div>
</div><p>系统调用实际上是汇编指令级的二进制接口，在实际调用的时候，我们需要按照RISC-V调用规范(即ABI格式)在合适的寄存器中放置系统调用的参数，然后执行<code>ecall</code>指令出发Trap。在Trap回到U模式的应用程序代码之后，会从<code>ecall</code>的下一条指令继续执行，同时我们能够按照调用规范在合适的寄存器中读取返回值。</p>
<p>RISC-V寄存器编号从<code>0~31</code>，表示为<code>x0~x31</code>。其中</p>
<ul>
<li><code>x10~x17</code>：对应<code>a0~a7</code></li>
<li><code>x1</code>：对应<code>ra</code></li>
</ul>
<p>在RISC-V调用规范中，和函数调用的ABI情形类似，约定寄存器<code>a0~a6</code>保存系统调用的参数，<code>a0</code>保存系统调用的返回值。有些许不同的是寄存器<code>a7</code>用来传递<code>syscall ID</code>，这是因为所有的syscall都是通过<code>ecall</code>指令触发的，除了各输入参数之外我们还额外需要一个寄存器来保存要请求那个系统调用。由于这超出了Rust语言的表达能力，我们需要在代码中使用内嵌汇编来完成参数/返回值绑定和<code>ecall</code>指令的插入：</p>
<div class="highlight"><div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">
<table style="border-spacing:0;padding:0;margin:0;border:0;"><tr><td style="vertical-align:top;padding:0;margin:0;border:0;">
<pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">12
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">13
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">14
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">15
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">16
</span></code></pre></td>
<td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
<pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-rust" data-lang="rust"><span style="display:flex;"><span><span style="color:#75715e">// user/src/syscall.rs
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#66d9ef">use</span> core::arch::asm;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">fn</span> <span style="color:#a6e22e">syscall</span>(id: <span style="color:#66d9ef">usize</span>, args: [<span style="color:#66d9ef">usize</span>; <span style="color:#ae81ff">3</span>]) -&gt; <span style="color:#66d9ef">isize</span> {
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">let</span> <span style="color:#66d9ef">mut</span> ret: <span style="color:#66d9ef">isize</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">unsafe</span> {
</span></span><span style="display:flex;"><span>        asm!(
</span></span><span style="display:flex;"><span>            <span style="color:#e6db74">&#34;ecall&#34;</span>,
</span></span><span style="display:flex;"><span>            inlateout(<span style="color:#e6db74">&#34;x10&#34;</span>) args[<span style="color:#ae81ff">0</span>] <span style="color:#f92672">=&gt;</span> ret,
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">in</span>(<span style="color:#e6db74">&#34;x11&#34;</span>) args[<span style="color:#ae81ff">1</span>],
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">in</span>(<span style="color:#e6db74">&#34;x12&#34;</span>) args[<span style="color:#ae81ff">2</span>],
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">in</span>(<span style="color:#e6db74">&#34;x17&#34;</span>) id
</span></span><span style="display:flex;"><span>        );
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>    ret
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></td></tr></table>
</div>
</div><p>我们将所有的系统调用都封装成了<code>syscall</code>函数，可以看到它支持传入syscall ID和3个参数。在 <code>syscall</code>中，从第6行开始的<code>asm!</code>宏嵌入<code>ecall</code>指令来触发系统调用。</p>
<p>从RISC-V调用规范来看，就像函数有着输入参数和返回值一样，<code>ecall</code>指令同样有着输入和输出寄存器：<code>a0~a2</code>和<code>a7</code>作为输入寄存器分别表示系统调用参数和系统调用ID，而当系统调用返回后，<code>a0</code>作为输出寄存器保存系统调用的返回值。在函数上下文中，输入参数数组<code>args</code>和变量<code>id</code>保存系统输调用参数和系统调用ID，而变量<code>ret</code>保存系统调用返回值，它也是函数<code>syscall</code>的输出/返回值。</p>
<p>那么如何将变量绑定到寄存器则成了一个难题：比如，在<code>ecall</code>指令被执行之前，我们需要将寄存器<code>a7</code>的值设置为变量<code>id</code>的值，那么我们首先需要知道目前变量<code>id</code>的值保存在哪里，它可能在栈上也有可能在某个寄存器中。作为程序员我们并不知道这些只有编译器才知道的信息，因此我们只能在编译器的帮助下完成变量到寄存器的绑定。</p>
<p>现在来看<code>asm!</code>宏的格式：首先在第8行是我们要插入的汇编代码段本身，这里我们只插入一行<code>ecall</code>指令，不过它可以支持同时插入多条指令。从第9行开始我们在编译器的帮助下将输入/输出变量绑定到寄存器。例如第10行的<code>in(&quot;x11&quot;) args[1]</code>表示将输入参数<code>args[1]</code>绑定到<code>ecall</code>的输入寄存器<code>x11</code>即<code>a1</code>中，编译器自动插入相关指令并保证在<code>ecall</code>指令被执行之前寄存器<code>a1</code>的值与<code>args[1]</code>的值相同。输入参数<code>arg[2]</code>与<code>id</code>到输入寄存器的绑定也是同样的方式，但是这里比较特殊的是<code>a0</code>寄存器，它同时作为输入和输出，因此我们将<code>in</code>改成<code>inlateout</code>，并在行末到变量部分使用<code>{in_var} =&gt; {out_var}</code>的格式，其中<code>{in_var}</code>和<code>{out_var}</code>分别表示上下文中的输入变量和输出变量。</p>
<p>有些时候不必将变量绑定到固定的寄存器，此时<code>asm!</code>宏可以自动完成寄存器分配。某些汇编代码段还会带来一些编译器无法预知的副作用，这种情况下需要<code>asm!</code>中通过<code>options</code>告知寄存器这些可能的副作用，这样可以帮助编译器在避免出错的情况下更高效的分配寄存器。</p>
<p>对于<code>sys_write</code>和<code>sys_exit</code>只需将<code>syscall</code>进行封装：</p>
<div class="highlight"><div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">
<table style="border-spacing:0;padding:0;margin:0;border:0;"><tr><td style="vertical-align:top;padding:0;margin:0;border:0;">
<pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11
</span></code></pre></td>
<td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
<pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-rust" data-lang="rust"><span style="display:flex;"><span><span style="color:#75715e">// user/src/syscall.rs
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#66d9ef">const</span> SYSCALL_WRITE: <span style="color:#66d9ef">usize</span> <span style="color:#f92672">=</span> <span style="color:#ae81ff">64</span>;
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">const</span> SYSCALL_EXIT: <span style="color:#66d9ef">usize</span> <span style="color:#f92672">=</span> <span style="color:#ae81ff">93</span>;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">pub</span> <span style="color:#66d9ef">fn</span> <span style="color:#a6e22e">sys_write</span>(fd: <span style="color:#66d9ef">usize</span>, buffer: <span style="color:#66d9ef">&amp;</span>[<span style="color:#66d9ef">u8</span>]) -&gt; <span style="color:#66d9ef">isize</span> {
</span></span><span style="display:flex;"><span>    syscall(SYSCALL_WRITE, [fd, buffer.as_ptr() <span style="color:#66d9ef">as</span> <span style="color:#66d9ef">usize</span>, buffer.len()])
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">pub</span> <span style="color:#66d9ef">fn</span> <span style="color:#a6e22e">sys_exit</span>(exit_code: <span style="color:#66d9ef">i32</span>) -&gt; <span style="color:#66d9ef">isize</span> {
</span></span><span style="display:flex;"><span>    syscall(SYSCALL_EXIT, [exit_code <span style="color:#66d9ef">as</span> <span style="color:#66d9ef">usize</span>, <span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">0</span>])
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></td></tr></table>
</div>
</div><p>注意<code>sys_write</code>使用一个<code>&amp;[u8]</code>切片类型来描述缓冲区，这是一个<strong>胖指针</strong>(Fat Pointer)，里面既包含缓冲区的起始地址，还包含缓冲区的长度。</p>
<p>我们将上述两个系统调用在用户库<code>user_lib</code>中进一步封装，从而更加接近在Linux等平台下的实际系统调用接口：</p>
<div class="highlight"><div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">
<table style="border-spacing:0;padding:0;margin:0;border:0;"><tr><td style="vertical-align:top;padding:0;margin:0;border:0;">
<pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">4
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">5
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">6
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">7
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">8
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">9
</span></code></pre></td>
<td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
<pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-rust" data-lang="rust"><span style="display:flex;"><span><span style="color:#75715e">// user/src/lib.rs
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#66d9ef">use</span> syscall::<span style="color:#f92672">*</span>;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">pub</span> <span style="color:#66d9ef">fn</span> <span style="color:#a6e22e">write</span>(fd: <span style="color:#66d9ef">usize</span>, buf: <span style="color:#66d9ef">&amp;</span>[<span style="color:#66d9ef">u8</span>]) -&gt; <span style="color:#66d9ef">isize</span> {
</span></span><span style="display:flex;"><span>    sys_write(fd, buf)
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">pub</span> <span style="color:#66d9ef">fn</span> <span style="color:#a6e22e">exit</span>(exit_code: <span style="color:#66d9ef">i32</span>) -&gt; <span style="color:#66d9ef">isize</span> {
</span></span><span style="display:flex;"><span>    sys_exit(exit_code)
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></td></tr></table>
</div>
</div><p>我们将<code>console</code>子模块中的<code>Stdout::write_str</code>改成基于<code>write</code>的实现，且传入的<code>fd</code>参数设置为1，它代表标准输出，也就是输出到屏幕。目前不需要考虑其他的<code>fd</code>选取情况。这样，应用程序的<code>println!</code>宏借助系统调用变得可以用了。</p>
<div class="highlight"><div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">
<table style="border-spacing:0;padding:0;margin:0;border:0;"><tr><td style="vertical-align:top;padding:0;margin:0;border:0;">
<pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">12
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">13
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">14
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">15
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">16
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">17
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">18
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">19
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">20
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">21
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">22
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">23
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">24
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">25
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">26
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">27
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">28
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">29
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">30
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">31
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">32
</span></code></pre></td>
<td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
<pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-rust" data-lang="rust"><span style="display:flex;"><span><span style="color:#75715e">// user/src/console.rs
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#66d9ef">use</span> <span style="color:#66d9ef">super</span>::write;
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">use</span> core::fmt::{self, Write};
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">struct</span> <span style="color:#a6e22e">Stdout</span>;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">const</span> STDOUT: <span style="color:#66d9ef">usize</span> <span style="color:#f92672">=</span> <span style="color:#ae81ff">1</span>;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">impl</span> Write <span style="color:#66d9ef">for</span> Stdout {
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">fn</span> <span style="color:#a6e22e">write_str</span>(<span style="color:#f92672">&amp;</span><span style="color:#66d9ef">mut</span> self, s: <span style="color:#66d9ef">&amp;</span><span style="color:#66d9ef">str</span>) -&gt; <span style="color:#a6e22e">fmt</span>::Result {
</span></span><span style="display:flex;"><span>        write(STDOUT, s.as_bytes());
</span></span><span style="display:flex;"><span>        Ok(())
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">pub</span> <span style="color:#66d9ef">fn</span> <span style="color:#a6e22e">print</span>(args: <span style="color:#a6e22e">fmt</span>::Arguments) {
</span></span><span style="display:flex;"><span>    Stdout.write_fmt(args).unwrap();
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#[macro_export]</span>
</span></span><span style="display:flex;"><span>macro_rules! print {
</span></span><span style="display:flex;"><span>    (<span style="color:#75715e">$fmt</span>: <span style="color:#a6e22e">literal</span> <span style="color:#75715e">$(,</span> <span style="color:#75715e">$($arg</span>: <span style="color:#a6e22e">tt</span>)<span style="color:#f92672">+</span>)<span style="color:#f92672">?</span>) <span style="color:#f92672">=&gt;</span> {
</span></span><span style="display:flex;"><span>        <span style="color:#75715e">$crate</span>::console::print(format_args!(<span style="color:#75715e">$fmt</span> <span style="color:#75715e">$(,</span> <span style="color:#75715e">$($arg</span>)<span style="color:#f92672">+</span>)<span style="color:#f92672">?</span>));
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#[macro_export]</span>
</span></span><span style="display:flex;"><span>macro_rules! println {
</span></span><span style="display:flex;"><span>    (<span style="color:#75715e">$fmt</span>: <span style="color:#a6e22e">literal</span> <span style="color:#75715e">$(,</span> <span style="color:#75715e">$($arg</span>: <span style="color:#a6e22e">tt</span>)<span style="color:#f92672">+</span>)<span style="color:#f92672">?</span>) <span style="color:#f92672">=&gt;</span> {
</span></span><span style="display:flex;"><span>        <span style="color:#75715e">$crate</span>::console::print(format_args!(concat!(<span style="color:#75715e">$fmt</span>, <span style="color:#e6db74">&#34;\n&#34;</span>) <span style="color:#75715e">$(,</span> <span style="color:#75715e">$($arg</span>)<span style="color:#f92672">+</span>)<span style="color:#f92672">?</span>));
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></td></tr></table>
</div>
</div><p><code>exit</code>接口则在用户库中的<code>_start</code>内使用，当应用程序主逻辑<code>main</code>返回之后，使用它退出应用并将返回值告知底层的批处理系统。</p>
<h3 id="编译生成应用程序二进制码">编译生成应用程序二进制码</h3>
<p>简单介绍一下<code>user/Makefile</code>：</p>
<ul>
<li>对于<code>src/bin</code>下的每个应用程序，在<code>target/riscv64gc-unknown-none-elf/release</code>目录下生成一个同名的ELF可执行文件</li>
<li>使用objcopy二进制工具，将上一步生成的ELF文件删除所有ELF header和符号得到<code>.bin</code>后缀的纯二进制镜像文件。它们将被链接进内核并由内核在合适的时机加载到内存</li>
</ul>
<h2 id="实现批处理操作系统">实现批处理操作系统</h2>
<p>在批处理操作系统中，每当一个应用执行完毕，我们需要将下一个要执行的应用的代码和数据加载到内存。</p>
<h3 id="将应用程序链接到内核">将应用程序链接到内核</h3>
<p>我们需要将应用程序的二进制镜像文件作为内核的数据段链接到内核里面，因此内核需要知道包含的应用程序的数量和他们的位置，这样才能够在运行时对他们进行管理并能够加载到物理内存：</p>
<div class="highlight"><div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">
<table style="border-spacing:0;padding:0;margin:0;border:0;"><tr><td style="vertical-align:top;padding:0;margin:0;border:0;">
<pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
</span></code></pre></td>
<td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
<pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-rust" data-lang="rust"><span style="display:flex;"><span><span style="color:#75715e">// os/src/main.rs
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>global_asm!(include_str!(<span style="color:#e6db74">&#34;link_app.S&#34;</span>));
</span></span></code></pre></td></tr></table>
</div>
</div><p>这里我们引入了一段汇编代码<code>link_app.S</code>，它一开始并不存在，而是在构建操作系统时自动生成的。这里我们需要增加一个构建脚本，在项目根目录添加一个<code>build.rs</code>文件：</p>
<div class="highlight"><div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">
<table style="border-spacing:0;padding:0;margin:0;border:0;"><tr><td style="vertical-align:top;padding:0;margin:0;border:0;">
<pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">12
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">13
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">14
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">15
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">16
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">17
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">18
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">19
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">20
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">21
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">22
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">23
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">24
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">25
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">26
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">27
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">28
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">29
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">30
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">31
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">32
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">33
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">34
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">35
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">36
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">37
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">38
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">39
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">40
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">41
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">42
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">43
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">44
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">45
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">46
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">47
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">48
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">49
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">50
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">51
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">52
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">53
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">54
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">55
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">56
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">57
</span></code></pre></td>
<td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
<pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-rust" data-lang="rust"><span style="display:flex;"><span><span style="color:#75715e">// os/build.rs
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#66d9ef">use</span> std::fs::{read_dir, File};
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">use</span> std::io::{Result, Write};
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">fn</span> <span style="color:#a6e22e">main</span>() {
</span></span><span style="display:flex;"><span>    println!(<span style="color:#e6db74">&#34;cargo:rerun-if-changed=../user/src/&#34;</span>);
</span></span><span style="display:flex;"><span>    println!(<span style="color:#e6db74">&#34;cargo:rerun-if-changed={}&#34;</span>, TARGET_PATH);
</span></span><span style="display:flex;"><span>    insert_app_data().unwrap();
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">static</span> TARGET_PATH: <span style="color:#66d9ef">&amp;</span><span style="color:#66d9ef">str</span> <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;../user/target/riscv64gc-unknown-none-elf/release/&#34;</span>;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">fn</span> <span style="color:#a6e22e">insert_app_data</span>() -&gt; Result<span style="color:#f92672">&lt;</span>()<span style="color:#f92672">&gt;</span> {
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">let</span> <span style="color:#66d9ef">mut</span> f <span style="color:#f92672">=</span> File::create(<span style="color:#e6db74">&#34;src/link_app.S&#34;</span>).unwrap();
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">let</span> <span style="color:#66d9ef">mut</span> apps: Vec<span style="color:#f92672">&lt;</span>_<span style="color:#f92672">&gt;</span> <span style="color:#f92672">=</span> read_dir(<span style="color:#e6db74">&#34;../user/src/bin&#34;</span>)
</span></span><span style="display:flex;"><span>        .unwrap()
</span></span><span style="display:flex;"><span>        .into_iter()
</span></span><span style="display:flex;"><span>        .map(<span style="color:#f92672">|</span>dir_entry<span style="color:#f92672">|</span> {
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">let</span> <span style="color:#66d9ef">mut</span> name_with_ext <span style="color:#f92672">=</span> dir_entry.unwrap().file_name().into_string().unwrap();
</span></span><span style="display:flex;"><span>            name_with_ext.drain(name_with_ext.find(<span style="color:#e6db74">&#39;.&#39;</span>).unwrap()<span style="color:#f92672">..</span>name_with_ext.len());
</span></span><span style="display:flex;"><span>            name_with_ext
</span></span><span style="display:flex;"><span>        })
</span></span><span style="display:flex;"><span>        .collect();
</span></span><span style="display:flex;"><span>    apps.sort();
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    writeln!(
</span></span><span style="display:flex;"><span>        f,
</span></span><span style="display:flex;"><span>        <span style="color:#e6db74">r#&#34;
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    .align 3
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    .section .data
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    .global _num_app
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">_num_app:
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    .quad {}&#34;#</span>,
</span></span><span style="display:flex;"><span>        apps.len()
</span></span><span style="display:flex;"><span>    )<span style="color:#f92672">?</span>;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">for</span> i <span style="color:#66d9ef">in</span> <span style="color:#ae81ff">0</span><span style="color:#f92672">..</span>apps.len() {
</span></span><span style="display:flex;"><span>        writeln!(f, <span style="color:#e6db74">r#&#34;    .quad app_{}_start&#34;#</span>, i)<span style="color:#f92672">?</span>;
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>    writeln!(f, <span style="color:#e6db74">r#&#34;    .quad app_{}_end&#34;#</span>, apps.len() <span style="color:#f92672">-</span> <span style="color:#ae81ff">1</span>)<span style="color:#f92672">?</span>;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">for</span> (idx, app) <span style="color:#66d9ef">in</span> apps.iter().enumerate() {
</span></span><span style="display:flex;"><span>        println!(<span style="color:#e6db74">&#34;app_{}: {}&#34;</span>, idx, app);
</span></span><span style="display:flex;"><span>        writeln!(
</span></span><span style="display:flex;"><span>            f,
</span></span><span style="display:flex;"><span>            <span style="color:#e6db74">r#&#34;
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    .section .data
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    .global app_{0}_start
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    .global app_{0}_end
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">app_{0}_start:
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    .incbin &#34;{2}{1}.bin&#34;
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">app_{0}_end:&#34;#</span>,
</span></span><span style="display:flex;"><span>            idx, app, TARGET_PATH
</span></span><span style="display:flex;"><span>        )<span style="color:#f92672">?</span>;
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>    Ok(())
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></td></tr></table>
</div>
</div><p>Cargo会先编译和执行该构建脚本，然后再去构建整个项目。使用<code>make build</code>构建内核时，上述的汇编代码<code>link_app.S</code>就生成了：</p>
<div class="highlight"><div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">
<table style="border-spacing:0;padding:0;margin:0;border:0;"><tr><td style="vertical-align:top;padding:0;margin:0;border:0;">
<pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">12
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">13
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">14
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">15
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">16
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">17
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">18
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">19
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">20
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">21
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">22
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">23
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">24
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">25
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">26
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">27
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">28
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">29
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">30
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">31
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">32
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">33
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">34
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">35
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">36
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">37
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">38
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">39
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">40
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">41
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">42
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">43
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">44
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">45
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">46
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">47
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">48
</span></code></pre></td>
<td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
<pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-fallback" data-lang="fallback"><span style="display:flex;"><span>// os/src/link_app.S
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    .align 3
</span></span><span style="display:flex;"><span>    .section .data
</span></span><span style="display:flex;"><span>    .global _num_app
</span></span><span style="display:flex;"><span>_num_app:
</span></span><span style="display:flex;"><span>    .quad 5
</span></span><span style="display:flex;"><span>    .quad app_0_start
</span></span><span style="display:flex;"><span>    .quad app_1_start
</span></span><span style="display:flex;"><span>    .quad app_2_start
</span></span><span style="display:flex;"><span>    .quad app_3_start
</span></span><span style="display:flex;"><span>    .quad app_4_start
</span></span><span style="display:flex;"><span>    .quad app_4_end
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    .section .data
</span></span><span style="display:flex;"><span>    .global app_0_start
</span></span><span style="display:flex;"><span>    .global app_0_end
</span></span><span style="display:flex;"><span>app_0_start:
</span></span><span style="display:flex;"><span>    .incbin &#34;../user/target/riscv64gc-unknown-none-elf/release/00hello_world.bin&#34;
</span></span><span style="display:flex;"><span>app_0_end:
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    .section .data
</span></span><span style="display:flex;"><span>    .global app_1_start
</span></span><span style="display:flex;"><span>    .global app_1_end
</span></span><span style="display:flex;"><span>app_1_start:
</span></span><span style="display:flex;"><span>    .incbin &#34;../user/target/riscv64gc-unknown-none-elf/release/01store_fault.bin&#34;
</span></span><span style="display:flex;"><span>app_1_end:
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    .section .data
</span></span><span style="display:flex;"><span>    .global app_2_start
</span></span><span style="display:flex;"><span>    .global app_2_end
</span></span><span style="display:flex;"><span>app_2_start:
</span></span><span style="display:flex;"><span>    .incbin &#34;../user/target/riscv64gc-unknown-none-elf/release/02power.bin&#34;
</span></span><span style="display:flex;"><span>app_2_end:
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    .section .data
</span></span><span style="display:flex;"><span>    .global app_3_start
</span></span><span style="display:flex;"><span>    .global app_3_end
</span></span><span style="display:flex;"><span>app_3_start:
</span></span><span style="display:flex;"><span>    .incbin &#34;../user/target/riscv64gc-unknown-none-elf/release/03priv_inst.bin&#34;
</span></span><span style="display:flex;"><span>app_3_end:
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    .section .data
</span></span><span style="display:flex;"><span>    .global app_4_start
</span></span><span style="display:flex;"><span>    .global app_4_end
</span></span><span style="display:flex;"><span>app_4_start:
</span></span><span style="display:flex;"><span>    .incbin &#34;../user/target/riscv64gc-unknown-none-elf/release/04priv_csr.bin&#34;
</span></span><span style="display:flex;"><span>a
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="找到并加载应用程序二进制码">找到并加载应用程序二进制码</h3>
<p>我们在<code>os</code>的<code>batch</code>子模块中实现一个应用管理器，它的主要功能是：</p>
<ul>
<li>保存应用数量和各自的位置信息，以及当前执行到第几个应用</li>
<li>根据应用程序位置信息，初始化好应用所需内存空间，并加载应用执行</li>
</ul>
<p>应用管理器<code>AppManager</code>结构体定义如下：</p>
<div class="highlight"><div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">
<table style="border-spacing:0;padding:0;margin:0;border:0;"><tr><td style="vertical-align:top;padding:0;margin:0;border:0;">
<pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">4
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">5
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">6
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">7
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">8
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">9
</span></code></pre></td>
<td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
<pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-rust" data-lang="rust"><span style="display:flex;"><span><span style="color:#75715e">// os/src/batch.rs
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">const</span> MAX_APP_NUM: <span style="color:#66d9ef">usize</span> <span style="color:#f92672">=</span> <span style="color:#ae81ff">16</span>;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">struct</span> <span style="color:#a6e22e">AppManeger</span> {
</span></span><span style="display:flex;"><span>    num_app: <span style="color:#66d9ef">usize</span>,
</span></span><span style="display:flex;"><span>    current_app: <span style="color:#66d9ef">usize</span>,
</span></span><span style="display:flex;"><span>    app_start: [<span style="color:#66d9ef">usize</span>; MAX_APP_NUM <span style="color:#f92672">+</span> <span style="color:#ae81ff">1</span>],
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></td></tr></table>
</div>
</div><p>在这里，应用管理器需要保存和维护的信息都在<code>AppManager</code>里面。这样设计的原因在于：我们希望将<code>AppManager</code>实例化为一个全局变量，使得任何函数都可以访问。然后<code>AppManager</code>中的<code>current_app</code>字段表示当前执行的第几个应用，它是一个可修改的变量，会在系统运行期间发生变。因此在声明全局变量时，采用<code>static mut</code>是一种比较自然的方法，但是在Rust中，任何对于<code>static mut</code>变量的访问控制都是unsafe的，而我们要在编程中尽量避免使用unsafe，这样才能让编译器负责更多的安全性检查。</p>
<p>因此我们需要考虑如何在尽量避免触及unsafe的情况下仍能声明并使用可变的全局变量。如果单独使用<code>static</code>而去掉<code>mut</code>的话，我们可以声明一个初始化之后就不可变的全局变量，但是我们需要<code>AppManager</code>里面的内容在运行时发生变化。这就涉及到了Rust中</p>
<p>的<strong>内部可变性</strong>(Interior Mutability)，即在变量自身不可变或仅在不可变借用的情况下仍能修改绑定到变量上的值。</p>
<p>我们可以使用<code>RefCell</code>包裹<code>AppManager</code>，这样<code>RefCell</code>无需被声明为<code>mut</code>，同时被包裹的<code>AppManager</code>也可变。但是<code>RefCell</code>并未被标记为<code>Sync</code>，因此Rust编译器认为它不能被安全的在线程间共享，也就不能作为全局变量使用。所以我们需要在<code>RefCell</code>的基础上，再封装一个<code>UPSafeCell</code>，它名字的含义是：允许我们在单核上安全使用可变全局变量。</p>
<div class="highlight"><div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">
<table style="border-spacing:0;padding:0;margin:0;border:0;"><tr><td style="vertical-align:top;padding:0;margin:0;border:0;">
<pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">12
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">13
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">14
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">15
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">16
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">17
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">18
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">19
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">20
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">21
</span></code></pre></td>
<td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
<pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-rust" data-lang="rust"><span style="display:flex;"><span><span style="color:#75715e">// os/src/sync/up.rs
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">use</span> core::cell::{RefCell, RefMut};
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">pub</span> <span style="color:#66d9ef">struct</span> <span style="color:#a6e22e">UPSafeCell</span><span style="color:#f92672">&lt;</span>T<span style="color:#f92672">&gt;</span> {
</span></span><span style="display:flex;"><span>    inner: <span style="color:#a6e22e">RefCell</span><span style="color:#f92672">&lt;</span>T<span style="color:#f92672">&gt;</span>,
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">unsafe</span> <span style="color:#66d9ef">impl</span><span style="color:#f92672">&lt;</span>T<span style="color:#f92672">&gt;</span> Sync <span style="color:#66d9ef">for</span> UPSafeCell<span style="color:#f92672">&lt;</span>T<span style="color:#f92672">&gt;</span> {}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">impl</span><span style="color:#f92672">&lt;</span>T<span style="color:#f92672">&gt;</span> UPSafeCell<span style="color:#f92672">&lt;</span>T<span style="color:#f92672">&gt;</span> {
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">pub</span> <span style="color:#66d9ef">unsafe</span> <span style="color:#66d9ef">fn</span> <span style="color:#a6e22e">new</span>(value: <span style="color:#a6e22e">T</span>) -&gt; <span style="color:#a6e22e">Self</span> {
</span></span><span style="display:flex;"><span>        Self {
</span></span><span style="display:flex;"><span>            inner: <span style="color:#a6e22e">RefCell</span>::new(value),
</span></span><span style="display:flex;"><span>        }
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">pub</span> <span style="color:#66d9ef">fn</span> <span style="color:#a6e22e">exclusive_access</span>(<span style="color:#f92672">&amp;</span>self) -&gt; <span style="color:#a6e22e">RefMut</span><span style="color:#f92672">&lt;&#39;</span>_, T<span style="color:#f92672">&gt;</span> {
</span></span><span style="display:flex;"><span>        self.inner.borrow_mut()
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></td></tr></table>
</div>
</div><div class="highlight"><div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">
<table style="border-spacing:0;padding:0;margin:0;border:0;"><tr><td style="vertical-align:top;padding:0;margin:0;border:0;">
<pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">4
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">5
</span></code></pre></td>
<td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
<pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-rust" data-lang="rust"><span style="display:flex;"><span><span style="color:#75715e">// os/src/sync/mod.rs
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">mod</span> up;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">pub</span> <span style="color:#66d9ef">use</span> up::UPSafeCell;
</span></span></code></pre></td></tr></table>
</div>
</div><p><code>UPSafeCel</code>对于<code>RefCell</code>简单进行封装，它和<code>RefCell</code>一样提供内部可变性和运行时借用检查，只是更加严格：调用<code>exclusive_access</code>可以得到它包裹的数据的独占访问权。因此当我们要访问数据时，需要首先调用<code>exclusive_access</code>获得数据的可变借用标记，通过它可以完成数据的读写，在操作完成之后我们需要销毁这个标记，此后才能开始对该数据的下一次访问。相比<code>RefCell</code>它不再允许多个读操作同时存在。</p>
<p><code>up.rs</code>的这段代码出现了两个<code>unsafe</code>：</p>
<ul>
<li>首先<code>new</code>被声明为一个<code>unsafe</code>函数，是因为我们希望使用者在创建一个<code>UPSafeCell</code>时保证在访问<code>UPSafeell</code>内包裹的数据时始终不违背上述模式：即访问之前调用<code>exclusive_access</code>，访问之后销毁借用标记再进行下一次访问。</li>
<li>另外，将<code>UPSafeCell</code>标记为<code>Sync</code>使得它可以作为一个全局变量。这是unsafe行为，因为编译器无法确定我们的<code>UPSafeCell</code>能否安全的再多线程共享。</li>
</ul>
<p>接下来，初始化<code>AppManager</code>的全局实例<code>APP_MANAGER</code>：</p>
<div class="highlight"><div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">
<table style="border-spacing:0;padding:0;margin:0;border:0;"><tr><td style="vertical-align:top;padding:0;margin:0;border:0;">
<pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">12
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">13
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">14
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">15
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">16
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">17
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">18
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">19
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">20
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">21
</span></code></pre></td>
<td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
<pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-rust" data-lang="rust"><span style="display:flex;"><span><span style="color:#75715e">// os/src/batch.rs
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>lazy_static<span style="color:#f92672">!</span> {
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">static</span> <span style="color:#66d9ef">ref</span> APP_MANAGER: <span style="color:#a6e22e">UPSafeCell</span><span style="color:#f92672">&lt;</span>AppManager<span style="color:#f92672">&gt;</span> <span style="color:#f92672">=</span> <span style="color:#66d9ef">unsafe</span> {
</span></span><span style="display:flex;"><span>        UPSafeCell::new({
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">extern</span> <span style="color:#e6db74">&#34;C&#34;</span> {
</span></span><span style="display:flex;"><span>                <span style="color:#66d9ef">fn</span> <span style="color:#a6e22e">_num_app</span>();
</span></span><span style="display:flex;"><span>            }
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">let</span> num_app_ptr <span style="color:#f92672">=</span> _num_app <span style="color:#66d9ef">as</span> <span style="color:#66d9ef">usize</span> <span style="color:#66d9ef">as</span> <span style="color:#f92672">*</span><span style="color:#66d9ef">const</span> <span style="color:#66d9ef">usize</span>;
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">let</span> num_app <span style="color:#f92672">=</span> num_app_ptr.read_volatile();
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">let</span> <span style="color:#66d9ef">mut</span> app_start: [<span style="color:#66d9ef">usize</span>; MAX_APP_NUM <span style="color:#f92672">+</span> <span style="color:#ae81ff">1</span>] <span style="color:#f92672">=</span> [<span style="color:#ae81ff">0</span>; MAX_APP_NUM <span style="color:#f92672">+</span> <span style="color:#ae81ff">1</span>];
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">let</span> app_start_raw: <span style="color:#66d9ef">&amp;</span>[<span style="color:#66d9ef">usize</span>] <span style="color:#f92672">=</span>
</span></span><span style="display:flex;"><span>                core::slice::from_raw_parts(num_app_ptr.add(<span style="color:#ae81ff">1</span>), num_app <span style="color:#f92672">+</span> <span style="color:#ae81ff">1</span>);
</span></span><span style="display:flex;"><span>            app_start[<span style="color:#f92672">..=</span>num_app].copy_from_slice(app_start_raw);
</span></span><span style="display:flex;"><span>            AppManager {
</span></span><span style="display:flex;"><span>                num_app,
</span></span><span style="display:flex;"><span>                current_app: <span style="color:#ae81ff">0</span>,
</span></span><span style="display:flex;"><span>                app_start,
</span></span><span style="display:flex;"><span>            }
</span></span><span style="display:flex;"><span>        })
</span></span><span style="display:flex;"><span>    };
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></td></tr></table>
</div>
</div><p>初始化的逻辑很简单，就是找到<code>link_app.S</code>中提供的符号<code>_num_app</code>，并从这里解析出应用数量以及各个应用的起始地址。</p>
<p>这里使用了外部库<code>lazy_static</code>提供的<code>lazy_static!</code>宏。引入这个外部库，需要加入依赖：</p>
<div class="highlight"><div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">
<table style="border-spacing:0;padding:0;margin:0;border:0;"><tr><td style="vertical-align:top;padding:0;margin:0;border:0;">
<pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">4
</span></code></pre></td>
<td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
<pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-rust" data-lang="rust"><span style="display:flex;"><span><span style="color:#75715e">// os/Cargo.toml
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>
</span></span><span style="display:flex;"><span>[dependencies]
</span></span><span style="display:flex;"><span>lazy_static <span style="color:#f92672">=</span> { version <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;1.4.0&#34;</span>, features <span style="color:#f92672">=</span> [<span style="color:#e6db74">&#34;spin_no_std&#34;</span>] }
</span></span></code></pre></td></tr></table>
</div>
</div><p><code>lazy_static!</code>宏提供了全局变量的运行时初始化功能。一般情况下，全局变量必须在编译时设置一个初始值，但是有些全局变量依赖与运行期间才能得到的数据作为初始值。这导致这些全局变量需要在运行时发生变化，即需要重新设置初始值之后才能使用。如果我们手动实现，需要把这种全局变量声明为<code>static mut</code>并衍生出很多unsafe代码。这里借助<code>lazy_static!</code>声明一个<code>AppManager</code>结构的名为<code>APP_NAMAGER</code>的全局实例，且只有在它第一次被使用到的时候，才会进行实际的初始化工作。</p>
<p>为了满足我们的需求，我们要实现一些<code>AppManager</code>的方法：</p>
<div class="highlight"><div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">
<table style="border-spacing:0;padding:0;margin:0;border:0;"><tr><td style="vertical-align:top;padding:0;margin:0;border:0;">
<pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">12
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">13
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">14
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">15
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">16
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">17
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">18
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">19
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">20
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">21
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">22
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">23
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">24
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">25
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">26
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">27
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">28
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">29
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">30
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">31
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">32
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">33
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">34
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">35
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">36
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">37
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">38
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">39
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">40
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">41
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">42
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">43
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">44
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">45
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">46
</span></code></pre></td>
<td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
<pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-rust" data-lang="rust"><span style="display:flex;"><span><span style="color:#75715e">// os/src/batch.rs
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">const</span> APP_BASE_ADDRESS: <span style="color:#66d9ef">usize</span> <span style="color:#f92672">=</span> <span style="color:#ae81ff">0x80400000</span>;
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">const</span> APP_SIZE_LIMIT: <span style="color:#66d9ef">usize</span> <span style="color:#f92672">=</span> <span style="color:#ae81ff">0x20000</span>;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">impl</span> AppManager {
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">pub</span> <span style="color:#66d9ef">fn</span> <span style="color:#a6e22e">print_app_info</span>(<span style="color:#f92672">&amp;</span>self) {
</span></span><span style="display:flex;"><span>        println!(<span style="color:#e6db74">&#34;[kernel] num_app = {}&#34;</span>, self.num_app);
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">for</span> i <span style="color:#66d9ef">in</span> <span style="color:#ae81ff">0</span><span style="color:#f92672">..</span>self.num_app {
</span></span><span style="display:flex;"><span>            println!(
</span></span><span style="display:flex;"><span>                <span style="color:#e6db74">&#34;[kernel] app_{} [{:#x}, {:#x})&#34;</span>,
</span></span><span style="display:flex;"><span>                i,
</span></span><span style="display:flex;"><span>                self.app_start[i],
</span></span><span style="display:flex;"><span>                self.app_start[i <span style="color:#f92672">+</span> <span style="color:#ae81ff">1</span>]
</span></span><span style="display:flex;"><span>            );
</span></span><span style="display:flex;"><span>        }
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">pub</span> <span style="color:#66d9ef">fn</span> <span style="color:#a6e22e">get_current_app</span>(<span style="color:#f92672">&amp;</span>self) -&gt; <span style="color:#66d9ef">usize</span> {
</span></span><span style="display:flex;"><span>        self.current_app
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">pub</span> <span style="color:#66d9ef">fn</span> <span style="color:#a6e22e">move_to_next_app</span>(<span style="color:#f92672">&amp;</span><span style="color:#66d9ef">mut</span> self) {
</span></span><span style="display:flex;"><span>        self.current_app <span style="color:#f92672">+=</span> <span style="color:#ae81ff">1</span>;
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">unsafe</span> <span style="color:#66d9ef">fn</span> <span style="color:#a6e22e">load_app</span>(<span style="color:#f92672">&amp;</span>self, app_id: <span style="color:#66d9ef">usize</span>) {
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">if</span> app_id <span style="color:#f92672">&gt;=</span> self.num_app {
</span></span><span style="display:flex;"><span>            panic!(<span style="color:#e6db74">&#34;All applications completed!&#34;</span>)
</span></span><span style="display:flex;"><span>        }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        println!(<span style="color:#e6db74">&#34;[kernel] Loading app_{}&#34;</span>, app_id);
</span></span><span style="display:flex;"><span>        <span style="color:#75715e">// clear icache
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>        asm!(<span style="color:#e6db74">&#34;fence.i&#34;</span>);
</span></span><span style="display:flex;"><span>        <span style="color:#75715e">//clear app area
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>        core::slice::from_raw_parts_mut(APP_BASE_ADDRESS <span style="color:#66d9ef">as</span> <span style="color:#f92672">*</span><span style="color:#66d9ef">mut</span> <span style="color:#66d9ef">u8</span>, APP_SIZE_LIMIT).fill(<span style="color:#ae81ff">0</span>);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">let</span> app_src <span style="color:#f92672">=</span> core::slice::from_raw_parts(
</span></span><span style="display:flex;"><span>            self.app_start[app_id] <span style="color:#66d9ef">as</span> <span style="color:#f92672">*</span><span style="color:#66d9ef">const</span> <span style="color:#66d9ef">u8</span>,
</span></span><span style="display:flex;"><span>            self.app_start[app_id <span style="color:#f92672">+</span> <span style="color:#ae81ff">1</span>] <span style="color:#f92672">-</span> self.app_start[app_id],
</span></span><span style="display:flex;"><span>        );
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">let</span> app_dst <span style="color:#f92672">=</span> core::slice::from_raw_parts_mut(APP_BASE_ADDRESS <span style="color:#66d9ef">as</span> <span style="color:#f92672">*</span><span style="color:#66d9ef">mut</span> <span style="color:#66d9ef">u8</span>, app_src.len());
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        app_dst.copy_from_slice(app_src);
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></td></tr></table>
</div>
</div><p><code>load_app</code>方法，负责将参数<code>app_id</code>对应的应用程序的二进制镜像加载到物理内存以<code>0x80400000</code>起始的位置，这个位置是批处理操作系统和应用程序之间约定的常数地址，在之前我们也调整应用程序的内存布局以同一个地址开头。第36行开始，我们首先将一块内存清空，然后找到待加载应用二进制镜像的位置，并将它复制到正确的位置。它的本质就是将数据从一块内存复制到另一块内存，而从批处理操作系统的角度来看，是将操作系统数据段的一部分数据复制到了一个可以执行代码的内存区域。体现了冯诺伊曼计算机的<em>代码即数据</em>的特征。</p>
<p>第34行插入了一条汇编指令<code>fence.i</code>，它是用来清除<code>i-cache</code>的。我们知道缓存是存储级结构中提高访存速度很重要的一环。而CPU对物理内存所做的缓存有分为<strong>数据缓存</strong>(d-cache)和<strong>指令缓存</strong>(i-cache)两部分，分别在CPU访存和取指时使用。在取指时，对于一个指令地址，CPU会先去i-cache里面查看它是否在某个已缓存的缓存行内，如果在的话它就会直接从高速缓存中拿到指令而不是通过总线访问内存。通常情况下，CPU 会认为程序的代码段不会发生变化，因此 i-cache 是一种只读缓存。但在这里，OS将修改会被 CPU 取指的内存区域，这会使得 i-cache 中含有与内存中不一致的内容。因此OS在这里必须使用<code>fence.i</code>指令手动清空i-cache，让里面所有的内容全部失效，才能够保证CPU访问内存数据和代码的正确性。</p>
<h2 id="实现特权级的切换">实现特权级的切换</h2>
<p>由于处理器具有硬件级的特权级机制，应用程序在用户态特权级运行时，是无法直接通过函数调用访问处于内核态特权级的批处理操作系统内核中的函数。但应用程序又需要得到操作系统提供的服务，所以应用程序和操作系统需要通过某种合作机制完成特权级之间的切换，使得用户态应用程序可以得到内核态操作系统函数的服务。接下来将在RISC-V64处理器提供的U/S特权级下，解决批处理操作系统和应用程序的相互配合，完成特权级切换。</p>
<h3 id="risc-v特权级切换">RISC-V特权级切换</h3>
<h4 id="特权级切换的起因">特权级切换的起因</h4>
<p>批处理操作系统被设计为运行在内核态特权级，这是作为SEE的RustSBI保证的。而应用程序被设计为运行在用户态特权级，被操作系统为核心的执行环境监督起来。在本篇中，应用程序的执行环境则是批处理系统提供的AEE(Application Execution Environment)。批处理操作系统为了建立好应用程序的执行环境，需要在执行应用之前进行一些初始化工作，并监控应用程序的执行，具体体现在：</p>
<ul>
<li>当应用程序被启动时，需要初始化应用程序的用户态上下文，并能切换到用户态执行应用程序</li>
<li>当应用程序发起系统调用之后，需要到批处理操作系统中进行处理</li>
<li>当应用程序执行出错时，需要到批处理系统中杀死该应用并加载运行下一个应用</li>
<li>当应用程序执行结束时，需要到批处理操作系统中加载运行下一个应用</li>
</ul>
<p>这些处理都涉及到特权级切换，因此需要应用程序、操作系统和硬件一起协同，完成特权级切换机制。</p>
<h4 id="特权级切换相关的控制状态寄存器">特权级切换相关的控制状态寄存器</h4>
<p>当从一般意义上讨论RISC-V架构的Trap机制时，通常需要注意两点：</p>
<ul>
<li>在触发Trap之前CPU运行在哪个特权级</li>
<li>CPU需要切换到哪个特权级来处理该Trap，并在处理完成之后返回原特权级</li>
</ul>
<p>在本篇中，我们仅考虑如下流程：当CPU在用户态特权级运行应用程序，执行到Trap，切换到内核态特权级，批处理操作系统的对应代码相应Trap，并执行系统调用服务，处理完毕后，从内核态返回到用户态应用程序继续执行后续指令。</p>
<p>在RISC-V架构中，关于Trap有一条重要规则：在Trap前的特权级不会高于Trap后的特权级。因此如果触发Trap之后切换到S特权级，说明Trap发生之前CPU只能运行在S/U特权级。但无论如何，只要Trap到S特权级，操作系统就会使用S特权级中与Trap相关的<strong>控制状态寄存器</strong>(CSR)来辅助Trap处理。进入S特权级Trap的相关CSR：</p>
<table>
<thead>
<tr>
<th style="text-align:center">CSR名</th>
<th style="text-align:center">该CSR与Trap相关的功能</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">sstatus</td>
<td style="text-align:center"><code>spp</code>等字段给出Trap发生之前CPU处在哪个特权级等信息</td>
</tr>
<tr>
<td style="text-align:center">sepc</td>
<td style="text-align:center">当Trap是一个异常时，记录Trap发生之前执行的最后一条指令的地址</td>
</tr>
<tr>
<td style="text-align:center">scause</td>
<td style="text-align:center">描述Trap的原因</td>
</tr>
<tr>
<td style="text-align:center">stval</td>
<td style="text-align:center">给出Trap附加信息</td>
</tr>
<tr>
<td style="text-align:center">stvec</td>
<td style="text-align:center">控制Trap处理代码的入口地址</td>
</tr>
</tbody>
</table>
<h4 id="特权级切换">特权级切换</h4>
<p>当执行一条Trap类指令，如<code>ecall</code>时，CPU发现触发了一个异常并需要进行特殊处理，这涉及到执行环境切换。应用程序被切换回来之后需要从发出系统调用请求的执行位置恢复应用程序上下文并继续执行，这需要在切换前后维持应用程序的上下文保持不变。应用程序的上下文包括通用寄存器和栈两个主要部分。由于CPU在不同特权级下共享一套通用寄存器，所以在运行操作系统的Trap操作过程中，操作系统也会用到这些寄存器，这会改变应用程序的上下文。因此，与函数调用需要保存函数调用上下文/活动记录一样，在执行操作系统的Trap处理过程之前，我们需要在某个地方保存这些寄存器并在Trap处理结束后恢复这些寄存器。</p>
<p>除了通用寄存器之外还有一些可能在处理Trap过程中会被修改的CSR，比如CPU所在的特权级。我们要保证它们的变化在我们的预期之内。比如，对特权级转换而言，应该是Trap之前在U特权级，处理Trap的时候在S特权级，返回之后又需要回到U特权级。而对于栈问题则相对简单，只要两个应用程序执行过程中用来记录执行历史的栈所对应的内存区域不想交，就不会产生令我们头痛的覆盖问题和数据破坏问题，也就无需进行保存/恢复。</p>
<p>特权级切换的具体过程一部分由硬件直接完成，另一部分则需要由操作系统来实现。</p>
<h3 id="特权级切换的硬件控制机制">特权级切换的硬件控制机制</h3>
<p>当CPU执行完一条指令(例如:<code>ecall</code>)并准备从用户特权级Trap到S特权级时，硬件会自动完成以下事情：</p>
<ul>
<li><code>sstatus</code>的<code>SPP</code>字段会被修改为CPU当前特权级</li>
<li><code>spec</code>会被修改为Trap处理完成后默认会执行的下一条指令的地址</li>
<li><code>scause/stval</code>分别会被修改成这次Trap的原因以及相关附加信息</li>
<li>CPU会跳转到<code>stvec</code>所设置的Trap处理入口地址，并将当前特权级设置为S，然后从Trap处理入口地址开始执行</li>
</ul>
<p>而当CPU完成Trap处理准备返回的时候，需要通过一条S特权级的特权指令<code>sret</code>来完成，这一条指令具体完成以下功能：</p>
<ul>
<li>CPU会将当前的特权级按照<code>sstatus</code>的<code>SPP</code>字段设置为U或者S</li>
<li>CPU会跳转到<code>spec</code>寄存器指向那条指令，然后继续执行</li>
</ul>
<h3 id="用户栈与内存栈">用户栈与内存栈</h3>
<p>在Trap触发的一瞬间，CPU就会切换到S特权级并跳转到<code>stvec	</code>所指示的位置。但是在正式进入S特权级的Trap之前，上面提到过我们必须保存原控制流的寄存器转台，这一般通过内核栈来保存。注意，我们需要用专门为操作系统准备的内核栈，而非应用程序运行时用到的用户栈。</p>
<p>使用两个不同的栈主要是为了安全性：如果两个控制流使用同一个栈，在返回之后应用程序就能读到Trap控制流的历史信息，比如内核一些函数的地址，这样会带来安全隐患。于是，我们要做的事，在批处理操作系统中添加一段汇编代码，实现从用户栈切换到内核栈，并在内核栈上保存应用程序控制流的寄存器状态。</p>
<div class="highlight"><div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">
<table style="border-spacing:0;padding:0;margin:0;border:0;"><tr><td style="vertical-align:top;padding:0;margin:0;border:0;">
<pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">12
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">13
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">14
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">15
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">16
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">17
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">18
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">19
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">20
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">21
</span></code></pre></td>
<td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
<pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-rust" data-lang="rust"><span style="display:flex;"><span><span style="color:#75715e">// os/src/batch.rs
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#66d9ef">const</span> KERNEL_STACK_SIZE: <span style="color:#66d9ef">usize</span> <span style="color:#f92672">=</span> <span style="color:#ae81ff">4096</span> <span style="color:#f92672">*</span> <span style="color:#ae81ff">2</span>;
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">const</span> USER_STACK_SIZE: <span style="color:#66d9ef">usize</span> <span style="color:#f92672">=</span> <span style="color:#ae81ff">4096</span> <span style="color:#f92672">*</span> <span style="color:#ae81ff">2</span>;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">static</span> KERNEL_STACK: <span style="color:#a6e22e">KernelStack</span> <span style="color:#f92672">=</span> KernelStack {
</span></span><span style="display:flex;"><span>    data: [<span style="color:#ae81ff">0</span>; KERNEL_STACK_SIZE],
</span></span><span style="display:flex;"><span>};
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">static</span> USER_STACK: <span style="color:#a6e22e">UserStack</span> <span style="color:#f92672">=</span> UserStack {
</span></span><span style="display:flex;"><span>    data: [<span style="color:#ae81ff">0</span>; USER_STACK_SIZE],
</span></span><span style="display:flex;"><span>};
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#[repr(align(4096))]</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">struct</span> <span style="color:#a6e22e">KernelStack</span> {
</span></span><span style="display:flex;"><span>    data: [<span style="color:#66d9ef">u8</span>; KERNEL_STACK_SIZE],
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#[repr(align(4096))]</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">struct</span> <span style="color:#a6e22e">UserStack</span> {
</span></span><span style="display:flex;"><span>    data: [<span style="color:#66d9ef">u8</span>; USER_STACK_SIZE],
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></td></tr></table>
</div>
</div><p><code>KERNEL_STACK_SIZE</code>和<code>USER_STACK_SIZE</code>指出内核栈和用户栈道大小分别为$8KiB$。两个类型是以全局变量的形式实例化在批处理操作系统的<code>.bss</code>段中的。</p>
<p>我们为两个类型实现了<code>get_sp</code>方法来获取栈顶地址。由于RISC-V中栈是向下增长的，我们只需返回包裹的数组的结尾地址：</p>
<div class="highlight"><div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">
<table style="border-spacing:0;padding:0;margin:0;border:0;"><tr><td style="vertical-align:top;padding:0;margin:0;border:0;">
<pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">12
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">13
</span></code></pre></td>
<td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
<pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-rust" data-lang="rust"><span style="display:flex;"><span><span style="color:#75715e">// os/src/batch.rs
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#66d9ef">impl</span> KernelStack {
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">fn</span> <span style="color:#a6e22e">get_sp</span>(<span style="color:#f92672">&amp;</span>self) -&gt; <span style="color:#66d9ef">usize</span> {
</span></span><span style="display:flex;"><span>        self.data.as_ptr() <span style="color:#66d9ef">as</span> <span style="color:#66d9ef">usize</span> <span style="color:#f92672">+</span> KERNEL_STACK_SIZE
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">impl</span> UserStack {
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">fn</span> <span style="color:#a6e22e">get_sp</span>(<span style="color:#f92672">&amp;</span>self) -&gt; <span style="color:#66d9ef">usize</span> {
</span></span><span style="display:flex;"><span>        self.data.as_ptr() <span style="color:#66d9ef">as</span> <span style="color:#66d9ef">usize</span> <span style="color:#f92672">+</span> USER_STACK_SIZE
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></td></tr></table>
</div>
</div><p>于是换栈是非常简单的，只需将<code>sp</code>寄存器的值修改为<code>get_sp</code>的返回值即可。</p>
<p>接下来是Trap上下文，类似前面提到的函数调用上下文，即在Trap发生时需要保存的物力资源内容，并将其放在一个名为<code>TrapContext</code>的类型中，定义如下：</p>
<div class="highlight"><div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">
<table style="border-spacing:0;padding:0;margin:0;border:0;"><tr><td style="vertical-align:top;padding:0;margin:0;border:0;">
<pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10
</span></code></pre></td>
<td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
<pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-rust" data-lang="rust"><span style="display:flex;"><span><span style="color:#75715e">// os/src/trap/context.rs
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">use</span> riscv::register::sstatus::Sstatus;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#[repr(C)]</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">pub</span> <span style="color:#66d9ef">struct</span> <span style="color:#a6e22e">TrapContext</span> {
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">pub</span> x: [<span style="color:#66d9ef">usize</span>; <span style="color:#ae81ff">32</span>],
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">pub</span> sstatus: <span style="color:#a6e22e">Sstatus</span>,
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">pub</span> sepc: <span style="color:#66d9ef">usize</span>,
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></td></tr></table>
</div>
</div><p>可以看到里面包含所有的通用寄存器<code>x0~x31</code>，还有<code>sstatuc</code>和<code>spec</code>。为什么保存它们呢？</p>
<ul>
<li>对于通用寄存器而言，两条控制流运行在不同的特权级，所属的软件也可能由不同的编程语言编写，虽然在Trap控制流中只是会执行Trap处理相关的代码，但依然可以直接或间接调用很多模块，因此很难甚至不可能找出哪些寄存器无需保存，既然如此只能全部保存。但也有一些例外，<code>x0</code>被硬编码成0，它自然不会有变化，还有<code>tp(x4)</code>寄存器，除非我们手动处于一些特殊用途使用它，否则一般也不会被用到。它们虽然无需被保存，但我们仍然为其预留空间，主要是为了后续的实现方便。</li>
<li>对于CSR而言，我们知道进入Trap的时候，硬件会立即覆盖掉<code>scause/stval/sstatus/sepc</code>的全部或是其中一部分。<code>scause/stval</code>的情况是：它总是被Trap处理的第一时间就被使用或者在其他地方保存下来了，因此它没有被修改并造成不良影响的风险。而对于<code>sstatus/sepc</code>而言，它们会在Trap处理的全程有意义（在Trap控制流最后<code>sret</code>的时候还用到了它们），而且确实会出现Trap嵌套的情况使得它们的值被覆盖掉。所以我们需要将它们保存下来，并在<code>sret</code>之前恢复原样。</li>
</ul>
<h3 id="trap管理">Trap管理</h3>
<p>特权级切换的核心是对Trap的管理。主要涉及如下一些内容：</p>
<ul>
<li>应用程序通过<code>ecall</code>进入到内核状态时，操作系统保存被打断的应用程序的Trap上下文</li>
<li>操作系统根据Trap相关的CSR寄存器内容，完成系统调用服务的分发与处理</li>
<li>操作系统完成系统调用服务后，需要恢复被打断的应用程序的Trap上下文，并通过<code>sret</code>让应用程序继续执行</li>
</ul>
<h4 id="trap上下文的保存与恢复">Trap上下文的保存与恢复</h4>
<p>首先是具体实现Trap上下文保存和恢复的汇编代码，在批处理操作系统初始化的时候，我们需要修改<code>stvec</code>寄存器来指向正确的Trap处理入口点：</p>
<div class="highlight"><div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">
<table style="border-spacing:0;padding:0;margin:0;border:0;"><tr><td style="vertical-align:top;padding:0;margin:0;border:0;">
<pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">12
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">13
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">14
</span></code></pre></td>
<td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
<pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-rust" data-lang="rust"><span style="display:flex;"><span><span style="color:#75715e">// os/src/trap/mod.rs
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#66d9ef">use</span> core::arch::global_asm;
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">use</span> riscv::register::{mtvec::TrapMode, stvec};
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>global_asm!(include_str!(<span style="color:#e6db74">&#34;trap.S&#34;</span>));
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">pub</span> <span style="color:#66d9ef">fn</span> <span style="color:#a6e22e">init</span>() {
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">extern</span> <span style="color:#e6db74">&#34;C&#34;</span> {
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">fn</span> <span style="color:#a6e22e">__alltraps</span>();
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">unsafe</span> {
</span></span><span style="display:flex;"><span>        stvec::write(__alltraps <span style="color:#66d9ef">as</span> <span style="color:#66d9ef">usize</span>, TrapMode::Direct);
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></td></tr></table>
</div>
</div><p>这里我们引入了一个外部符号<code>__alltraps</code>，并将<code>stvec</code>设置为Direct模式指向它的地址。我们在<code>os/src/trap/trap.S</code>中实现Trap上下文保存/恢复的汇编代码，分别用外部符号<code>__alltraps</code>和<code>__restore</code>标记为函数，并通过<code>global_asm!</code>宏将这段汇编代码插入进来。</p>
<p>Trap处理的总体流程如下：首先通过<code>__alltraps</code>将Trap上下文保存在内核栈上，然后跳转到使用Rust编写的<code>trap_handler</code>函数完成Trap分发及处理。当<code>trap_handler</code>返回之后，使用<code>__restore</code>从保存在内核栈上的Trap上下文恢复寄存器。最后通过<code>sret</code>指令回到应用程序执行。</p>
<p>首先是保存Trap上下文的<code>__alltraps</code>的实现：</p>
<div class="highlight"><div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">
<table style="border-spacing:0;padding:0;margin:0;border:0;"><tr><td style="vertical-align:top;padding:0;margin:0;border:0;">
<pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">12
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">13
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">14
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">15
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">16
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">17
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">18
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">19
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">20
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">21
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">22
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">23
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">24
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">25
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">26
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">27
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">28
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">29
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">30
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">31
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">32
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">33
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">34
</span></code></pre></td>
<td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
<pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-fallback" data-lang="fallback"><span style="display:flex;"><span># os/src/trap/trap.S
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>.macro SAVE_GP n
</span></span><span style="display:flex;"><span>    ld x\n, \n*8(sp)
</span></span><span style="display:flex;"><span>.endm
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>.align 2
</span></span><span style="display:flex;"><span>__alltraps:
</span></span><span style="display:flex;"><span>    csrrw sp, sscratch, sp
</span></span><span style="display:flex;"><span>    # now sp-&gt;kernel stack, sscratch-&gt;user stack
</span></span><span style="display:flex;"><span>    # allocate a TrapContext on kernel stack
</span></span><span style="display:flex;"><span>    addi sp, sp, -34*8
</span></span><span style="display:flex;"><span>    # save general-purpose registers
</span></span><span style="display:flex;"><span>    sd x1, 1*8(sp)
</span></span><span style="display:flex;"><span>    # skip sp(x2), we will save it later
</span></span><span style="display:flex;"><span>    sd x3, 3*8(sp)
</span></span><span style="display:flex;"><span>    # skip tp(x4), application does not use it
</span></span><span style="display:flex;"><span>    # save x5~x31
</span></span><span style="display:flex;"><span>    .set n, 5
</span></span><span style="display:flex;"><span>    .rept 27
</span></span><span style="display:flex;"><span>        SAVE_GP %n
</span></span><span style="display:flex;"><span>        .set n, n+1
</span></span><span style="display:flex;"><span>    .endr
</span></span><span style="display:flex;"><span>    # we can use t0/t1/t2 freely, because they were saved on kernel stack
</span></span><span style="display:flex;"><span>    csrr t0, sstatus
</span></span><span style="display:flex;"><span>    csrr t1, sepc
</span></span><span style="display:flex;"><span>    sd t0, 32*8(sp)
</span></span><span style="display:flex;"><span>    sd t1, 33*8(sp)
</span></span><span style="display:flex;"><span>    # read user stack from sscratch and save it on the kernel stack
</span></span><span style="display:flex;"><span>    csrr t2, sscratch
</span></span><span style="display:flex;"><span>    sd t2, 2*8(sp)
</span></span><span style="display:flex;"><span>    # set input argument of trap_handler(cx: &amp;mut TrapContext)
</span></span><span style="display:flex;"><span>    mv a0, sp
</span></span><span style="display:flex;"><span>    call trap_handler
</span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>第7行我们使用<code>.align</code>将<code>__alltraps</code>的地址4字节对齐，这是RISC-V特权级规范的要求</li>
<li>第9行的<code>csrrw</code>原型是<code>csrrw rd, csr, rs</code>，可以将CSR当前的值读到通用寄存器<code>rd</code>中，然后将通用寄存器<code>rs</code>的值写入该CSR。因此这里起到的是交换<code>sscratch</code>和<code>sp</code>的效果。在这一行之前<code>sp</code>指向用户栈，<code>sscratch</code>指向内核栈，之后<code>sp</code>指向内核栈，<code>sscratch</code>指向用户栈</li>
<li>第12行，我们准备在内核栈上保存Trap上下文，于是预先分配$34 \times 8$字节的栈帧，这里改动的是<code>sp</code>，说明确实是在内核栈上</li>
<li>第13～24行，保存Trap上下文的通用寄存器<code>x0~x31</code>，跳过<code>x0</code>和<code>tp(x4)</code>，原因之前已经说明。在这里也无需保存<code>sp(x2)</code>，因为我们要基于它来找到每个寄存器应该被保存到的正确的位置。实际上，在栈帧分配之后，我们可用于保存Trap上下文的地址区间为$[sp, sp+8 \times 34)$，按照<code>TrapContext</code>结构体的内存布局，基于内核栈道位置(sp所指向的地址)来从低地址到高地址分别按顺序放置<code>x0~x31</code>这些通用寄存器，最后是<code>sstatus</code>和<code>sepc</code>。因此通用寄存器<code>xn</code>应该被保存在地址区间$[sp+8n,sp+8(n+1))$。为了简化代码，<code>x5~x31</code>这27个通用寄存器我们通过类似循环的<code>.rept</code>每次使用<code>SAVE_GP</code>宏来保存，其实质是相同的。注意我们需要在<code>trap.S</code>开头加上<code>.altmacro</code>才能正确使用<code>.rept</code>命令</li>
<li>第25～28行，将CSR <code>sstatus</code>和<code>sepc</code>的值分别读到寄存器<code>t0</code>和<code>t1</code>中然后保存到内核栈对应的位置上。指令<code>csrr rd, csr</code>功能就是将CSR的值读到寄存器<code>rd</code>中</li>
<li>第30～31行专门处理sp的问题。首先将<code>sscratch</code>的值读取到寄存器<code>t2</code>并保存到内核栈上。注意：此时<code>sscratch</code>指向用户栈，<code>sp</code>指向内核栈</li>
<li>第33行令<code>a0&lt;-sp</code>，让寄存器<code>a0</code>指向内核栈的栈指针也就是我们刚刚保存的Trap上下文的地址，这是由于我们接下来调用<code>trap_handler</code>进行Trap处理，它的第一个参数<code>cx</code>由调用规范要从<code>a0</code>中获取。而Trap处理函数<code>trap_handler</code>需要Trap上下文的原因在于：它需要知道其中某些寄存器的值，比如在系统调用的时候应用程序传过来的syscall ID和对应参数。</li>
</ul>
<p>当<code>trap_handler</code>返回之后会从调用<code>trap_handler</code>的下一条指令开始执行，也就是从栈上的Trap上下文恢复的<code>__restore</code>：</p>
<div class="highlight"><div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">
<table style="border-spacing:0;padding:0;margin:0;border:0;"><tr><td style="vertical-align:top;padding:0;margin:0;border:0;">
<pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">12
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">13
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">14
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">15
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">16
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">17
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">18
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">19
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">20
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">21
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">22
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">23
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">24
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">25
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">26
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">27
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">28
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">29
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">30
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">31
</span></code></pre></td>
<td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
<pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-fallback" data-lang="fallback"><span style="display:flex;"><span># os/src/trap/trap.S
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>.macro LOAD_GP n
</span></span><span style="display:flex;"><span>    ld x\n, \n*8(sp)
</span></span><span style="display:flex;"><span>.endm
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>__restore:
</span></span><span style="display:flex;"><span>    # case1: start running app by __restore
</span></span><span style="display:flex;"><span>    # case2: back to U after handling trap
</span></span><span style="display:flex;"><span>    mv sp, a0
</span></span><span style="display:flex;"><span>    # now sp-&gt;kernel stack(after allocated), sscratch-&gt;user stack
</span></span><span style="display:flex;"><span>    # restore sstatus/sepc
</span></span><span style="display:flex;"><span>    ld t0, 32*8(sp)
</span></span><span style="display:flex;"><span>    ld t1, 33*8(sp)
</span></span><span style="display:flex;"><span>    ld t2, 2*8(sp)
</span></span><span style="display:flex;"><span>    csrw sstatus, t0
</span></span><span style="display:flex;"><span>    csrw sepc, t1
</span></span><span style="display:flex;"><span>    csrw sscratch, t2
</span></span><span style="display:flex;"><span>    # restore general-purpuse registers except sp/tp
</span></span><span style="display:flex;"><span>    ld x1, 1*8(sp)
</span></span><span style="display:flex;"><span>    ld x3, 3*8(sp)
</span></span><span style="display:flex;"><span>    .set n, 5
</span></span><span style="display:flex;"><span>    .rept 27
</span></span><span style="display:flex;"><span>        LOAD_GP %n
</span></span><span style="display:flex;"><span>        .set n, n+1
</span></span><span style="display:flex;"><span>    .endr
</span></span><span style="display:flex;"><span>    # release TrapContext on kernel stack
</span></span><span style="display:flex;"><span>    addi sp, sp, 34*8
</span></span><span style="display:flex;"><span>    # now sp-&gt;kernel stack, sscratch-&gt;user stack
</span></span><span style="display:flex;"><span>    csrrw sp, sscratch, sp
</span></span><span style="display:flex;"><span>    sret
</span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>第13～26行负责从内核栈顶的Trap上下文恢复通用寄存器和CSR。我们要先恢复CSR再恢复通用寄存器，这样我们使用的三个临时寄存器才能被正确恢复</li>
<li>在第28行之前，<code>sp</code>指向保存了Trap上下文之后的内核栈栈顶，<code>sscratch</code>指向用户栈栈顶。在第28行内核栈上回收Trap上下文所占用的内存，回归进入Trap之前的内核栈栈顶。第30行，再次交换<code>sscratch</code>和<code>sp</code>，现在<code>sp</code>重新只想用户栈栈顶，<code>sscratch</code>也依然保存进入Trap之前的状态并指向内核栈栈顶</li>
<li>在应用程序控制流状态会还原之后，第31行使用<code>sret</code>指令回到U特权级继续运行应用程序控制流</li>
</ul>
<h4 id="trap分发与处理">Trap分发与处理</h4>
<p>Trap在使用Rust实现的<code>trap_handler</code>函数中完成分发和处理：</p>
<div class="highlight"><div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">
<table style="border-spacing:0;padding:0;margin:0;border:0;"><tr><td style="vertical-align:top;padding:0;margin:0;border:0;">
<pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">12
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">13
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">14
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">15
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">16
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">17
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">18
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">19
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">20
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">21
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">22
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">23
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">24
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">25
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">26
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">27
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">28
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">29
</span></code></pre></td>
<td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
<pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-rust" data-lang="rust"><span style="display:flex;"><span><span style="color:#75715e">// os/src/trap/mod.rs
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#[no_mangle]</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">pub</span> <span style="color:#66d9ef">fn</span> <span style="color:#a6e22e">trap_handler</span>(cx: <span style="color:#66d9ef">&amp;</span><span style="color:#a6e22e">mut</span> TrapContext) -&gt; <span style="color:#66d9ef">&amp;</span><span style="color:#a6e22e">mut</span> TrapContext {
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">let</span> scause <span style="color:#f92672">=</span> scause::read();
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">let</span> stval <span style="color:#f92672">=</span> stval::read();
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">match</span> scause.cause() {
</span></span><span style="display:flex;"><span>        Trap::Exception(Exception::UserEnvCall) <span style="color:#f92672">=&gt;</span> {
</span></span><span style="display:flex;"><span>            cx.sepc <span style="color:#f92672">+=</span> <span style="color:#ae81ff">4</span>;
</span></span><span style="display:flex;"><span>            cx.x[<span style="color:#ae81ff">10</span>] <span style="color:#f92672">=</span> syscall(cx.x[<span style="color:#ae81ff">17</span>], [cx.x[<span style="color:#ae81ff">10</span>], cx.x[<span style="color:#ae81ff">11</span>], cx.x[<span style="color:#ae81ff">12</span>]]) <span style="color:#66d9ef">as</span> <span style="color:#66d9ef">usize</span>;
</span></span><span style="display:flex;"><span>        }
</span></span><span style="display:flex;"><span>        Trap::Exception(Exception::StoreFault) <span style="color:#f92672">|</span> Trap::Exception(Exception::StorePageFault) <span style="color:#f92672">=&gt;</span> {
</span></span><span style="display:flex;"><span>            println!(<span style="color:#e6db74">&#34;[kernel] PageFault in application, kernel killed it.&#34;</span>);
</span></span><span style="display:flex;"><span>            run_next_app();
</span></span><span style="display:flex;"><span>        }
</span></span><span style="display:flex;"><span>        Trap::Exception(Exception::IllegalInstruction) <span style="color:#f92672">=&gt;</span> {
</span></span><span style="display:flex;"><span>            println!(<span style="color:#e6db74">&#34;[kernel] IllegalInstruction in application, kernel killed it.&#34;</span>);
</span></span><span style="display:flex;"><span>            run_next_app();
</span></span><span style="display:flex;"><span>        }
</span></span><span style="display:flex;"><span>        _ <span style="color:#f92672">=&gt;</span> {
</span></span><span style="display:flex;"><span>            panic!(
</span></span><span style="display:flex;"><span>                <span style="color:#e6db74">&#34;Unsupported trap {:?}, stval = {:#x}&#34;</span>,
</span></span><span style="display:flex;"><span>                scause.cause(),
</span></span><span style="display:flex;"><span>                stval
</span></span><span style="display:flex;"><span>            );
</span></span><span style="display:flex;"><span>        }
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>    cx
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>
<p>第4行声明返回值为<code>&amp;mut TrapContext</code>并在第28行将传入的Trap上下文<code>cx</code>原样返回，因此在<code>__restore</code>的时候<code>a0</code>寄存器在调用<code>trap_handler</code>前后并没有发生变化，仍然指向分配Trap上下文之后的内核栈栈顶，和此时<code>sp</code>的值相同，这里的<code>sp&lt;-a0</code>并不会有问题</p>
</li>
<li>
<p>第7行根据<code>scause</code>寄存器所保存的Trap的原因进行分发处理。这里我们无须手动操作这些CSR，而是使用Rust的riscv库来更加方便的操作。引入riscv库，需要在<code>os/Cargo.toml</code>中添加：</p>
<div class="highlight"><div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">
<table style="border-spacing:0;padding:0;margin:0;border:0;"><tr><td style="vertical-align:top;padding:0;margin:0;border:0;">
<pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">4
</span></code></pre></td>
<td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
<pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-toml" data-lang="toml"><span style="display:flex;"><span><span style="color:#75715e"># os/Cargo.toml</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>[<span style="color:#a6e22e">dependencies</span>]
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">riscv</span> = { <span style="color:#a6e22e">git</span> = <span style="color:#e6db74">&#34;https://github.com/rcore-os/riscv&#34;</span>, <span style="color:#a6e22e">features</span> = [<span style="color:#e6db74">&#34;inline-asm&#34;</span>] }
</span></span></code></pre></td></tr></table>
</div>
</div></li>
<li>
<p>第8～11行，发现触发Trap的原因是来自于U特权级的Environment Call，也就是系统调用。这里我们首先修改保存在内核栈上的Trap上下文里面<code>sepc</code>，让其增加4。这是因为我们知道这是一个由<code>ecall</code>指令触发的系统调用，在进入Trap的时候，硬件会将<code>sepc</code>设置为这条<code>ecall</code>指令所在的地址。而在Trap返回之后，我们希望应用程序控制流从<code>ecall</code>的下一条指令开始执行。因此我们只需修改Trap上下文里面的<code>sepc</code>，让他增加<code>ecall</code>指令的码长，即4字节。这样在<code>__restore</code>的时候<code>sepc</code>在恢复之后就会指向<code>ecall</code>的下一条指令，并在<code>sret</code>之后从这里开始执行。</p>
<p>用来保存系统调用返回值的<code>a0</code>寄存器也会同样发生变化。我们从Trap上下文取出作为syscall ID的<code>a7</code>和系统调用的三个参数`</p>
</li>
<li>
<p>第12～19行，分别处理应用程序出现访存错误和非法指令错误的情况。此时需要打印错误信息并调用<code>run_next_app</code>直接切换并运行下一个应用程序。</p>
</li>
<li>
<p>第20行开始，当遇到目前还不支持的Trap类型的时候，批处理操作系统整个panic报错退出。</p>
</li>
</ul>
<h3 id="实现系统调用功能">实现系统调用功能</h3>
<p>对于系统调用而言，<code>syscall</code>函数并不会实际处理系统调用，而只是根据syscall ID分发到具体的处理函数：</p>
<div class="highlight"><div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">
<table style="border-spacing:0;padding:0;margin:0;border:0;"><tr><td style="vertical-align:top;padding:0;margin:0;border:0;">
<pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">12
</span></code></pre></td>
<td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
<pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-rust" data-lang="rust"><span style="display:flex;"><span><span style="color:#75715e">// os/src/syscall/mod.rs
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">const</span> SYSCALL_WRITE: <span style="color:#66d9ef">usize</span> <span style="color:#f92672">=</span> <span style="color:#ae81ff">64</span>;
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">const</span> SYSCALL_EXIT: <span style="color:#66d9ef">usize</span> <span style="color:#f92672">=</span> <span style="color:#ae81ff">93</span>;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">pub</span> <span style="color:#66d9ef">fn</span> <span style="color:#a6e22e">syscall</span>(syscall_id: <span style="color:#66d9ef">usize</span>, args: [<span style="color:#66d9ef">usize</span>; <span style="color:#ae81ff">3</span>]) -&gt; <span style="color:#66d9ef">isize</span> {
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">match</span> syscall_id {
</span></span><span style="display:flex;"><span>        SYSCALL_WRITE <span style="color:#f92672">=&gt;</span> sys_write(args[<span style="color:#ae81ff">0</span>], args[<span style="color:#ae81ff">1</span>] <span style="color:#66d9ef">as</span> <span style="color:#f92672">*</span><span style="color:#66d9ef">const</span> <span style="color:#66d9ef">u8</span>, args[<span style="color:#ae81ff">2</span>]),
</span></span><span style="display:flex;"><span>        SYSCALL_EXIT <span style="color:#f92672">=&gt;</span> sys_exit(args[<span style="color:#ae81ff">0</span>] <span style="color:#66d9ef">as</span> <span style="color:#66d9ef">i32</span>),
</span></span><span style="display:flex;"><span>        _ <span style="color:#f92672">=&gt;</span> panic!(<span style="color:#e6db74">&#34;Unsupported syscall_id: {}&#34;</span>, syscall_id),
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></td></tr></table>
</div>
</div><p>这里我们会将传进来的参数<code>args</code>转化成能够被具体的系统调用处理函数接受的类型：</p>
<div class="highlight"><div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">
<table style="border-spacing:0;padding:0;margin:0;border:0;"><tr><td style="vertical-align:top;padding:0;margin:0;border:0;">
<pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">12
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">13
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">14
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">15
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">16
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">17
</span></code></pre></td>
<td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
<pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-rust" data-lang="rust"><span style="display:flex;"><span><span style="color:#75715e">// os/src/syscall/fs.rs
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">const</span> FD_STDOUT: <span style="color:#66d9ef">usize</span> <span style="color:#f92672">=</span> <span style="color:#ae81ff">1</span>;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">pub</span> <span style="color:#66d9ef">fn</span> <span style="color:#a6e22e">sys_write</span>(fd: <span style="color:#66d9ef">usize</span>, buf: <span style="color:#f92672">*</span><span style="color:#66d9ef">const</span> <span style="color:#66d9ef">u8</span>, len: <span style="color:#66d9ef">usize</span>) -&gt; <span style="color:#66d9ef">isize</span> {
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">match</span> fd {
</span></span><span style="display:flex;"><span>        FD_STDOUT <span style="color:#f92672">=&gt;</span> {
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">let</span> slice <span style="color:#f92672">=</span> <span style="color:#66d9ef">unsafe</span> { core::slice::from_raw_parts(buf, len) };
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">let</span> <span style="color:#66d9ef">str</span> <span style="color:#f92672">=</span> core::<span style="color:#66d9ef">str</span>::from_utf8(slice).unwrap();
</span></span><span style="display:flex;"><span>            print!(<span style="color:#e6db74">&#34;{}&#34;</span>, <span style="color:#66d9ef">str</span>);
</span></span><span style="display:flex;"><span>            len <span style="color:#66d9ef">as</span> <span style="color:#66d9ef">isize</span>
</span></span><span style="display:flex;"><span>        }
</span></span><span style="display:flex;"><span>        _ <span style="color:#f92672">=&gt;</span> {
</span></span><span style="display:flex;"><span>            panic!(<span style="color:#e6db74">&#34;Unsupported fd in sys_write!&#34;</span>);
</span></span><span style="display:flex;"><span>        }
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></td></tr></table>
</div>
</div><div class="highlight"><div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">
<table style="border-spacing:0;padding:0;margin:0;border:0;"><tr><td style="vertical-align:top;padding:0;margin:0;border:0;">
<pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">4
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">5
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">6
</span></code></pre></td>
<td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
<pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-rust" data-lang="rust"><span style="display:flex;"><span><span style="color:#75715e">// os/src/syscall/process/rs
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">pub</span> <span style="color:#66d9ef">fn</span> <span style="color:#a6e22e">sys_exit</span>(exit_code: <span style="color:#66d9ef">i32</span>) -&gt; <span style="color:#f92672">!</span> {
</span></span><span style="display:flex;"><span>    println!(<span style="color:#e6db74">&#34;[kernel] Application exited with code {}&#34;</span>, exit_code);
</span></span><span style="display:flex;"><span>    run_next_app()
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li><code>sys_write</code>我们将传入的位于应用程序内的缓冲区的开始地址和长度转化成一个字符串<code>&amp;str</code>，然后使用批处理操作系统已经实现的<code>print!</code>宏打印出来。</li>
<li><code>sys_exit</code>打印退出的应用程序的返回值并同样调用<code>run_next_app</code>切换到下一个应用程序。</li>
</ul>
<h3 id="执行应用程序">执行应用程序</h3>
<p>当批处理操作系统初始化完成，或者是某个应用运行结束或出错的时候，我们要调用<code>run_next_app</code>函数切换到下一个应用程序。此时CPU运行在S特权级，而它希望能切换到U特权级。在RISC-V架构中，唯一一种使得CPU特权级下降的方法就是执行Trap返回到特权指令，如<code>sret</code>、<code>mret</code>等。事实上，在从操作系统内核返回到运行应用程序之前，要完成如下这些工作：</p>
<ul>
<li>构造应用程序开始执行所需要的Trap上下文</li>
<li>通过<code>__restore</code>函数，从刚构造的Trap上下文中，恢复应用程序执行的部分寄存器</li>
<li>设置<code>sepc</code>CSR的内容为应用程序入口点<code>0x80400000</code></li>
<li>切换<code>scratch</code>和<code>sp</code>寄存器，设置<code>sp</code>指向应用程序用户栈</li>
<li>执行<code>sret</code>从S特权级切换到U特权级</li>
</ul>
<p>它们可以通过复用<code>__restore</code>的代码来更容易的实现上述工作。我们只需要在内核栈上压入一个为启动应用程序而特殊构造的Trap上下文，在通过<code>__restore</code>函数，就能让这些寄存器到达启动应用程序所需要的上下文状态。</p>
<div class="highlight"><div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">
<table style="border-spacing:0;padding:0;margin:0;border:0;"><tr><td style="vertical-align:top;padding:0;margin:0;border:0;">
<pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">12
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">13
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">14
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">15
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">16
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">17
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">18
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">19
</span></code></pre></td>
<td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
<pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-rust" data-lang="rust"><span style="display:flex;"><span><span style="color:#75715e">// os/src/trap/context.rs
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">impl</span> TrapContext {
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">pub</span> <span style="color:#66d9ef">fn</span> <span style="color:#a6e22e">set_sp</span>(<span style="color:#f92672">&amp;</span><span style="color:#66d9ef">mut</span> self, sp: <span style="color:#66d9ef">usize</span>) {
</span></span><span style="display:flex;"><span>        self.x[<span style="color:#ae81ff">2</span>] <span style="color:#f92672">=</span> sp;
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">pub</span> <span style="color:#66d9ef">fn</span> <span style="color:#a6e22e">app_init_context</span>(entry: <span style="color:#66d9ef">usize</span>, sp: <span style="color:#66d9ef">usize</span>) -&gt; <span style="color:#a6e22e">Self</span> {
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">let</span> <span style="color:#66d9ef">mut</span> sstatus <span style="color:#f92672">=</span> sstatus::read();
</span></span><span style="display:flex;"><span>        sstatus.set_spp(SPP::User);
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">let</span> <span style="color:#66d9ef">mut</span> cx <span style="color:#f92672">=</span> Self {
</span></span><span style="display:flex;"><span>            x: [<span style="color:#ae81ff">0</span>; <span style="color:#ae81ff">32</span>],
</span></span><span style="display:flex;"><span>            sstatus,
</span></span><span style="display:flex;"><span>            sepc: <span style="color:#a6e22e">entry</span>,
</span></span><span style="display:flex;"><span>        };
</span></span><span style="display:flex;"><span>        cx.set_sp(sp);
</span></span><span style="display:flex;"><span>        cx
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></td></tr></table>
</div>
</div><p>为<code>TrapContext</code>实现<code>app_init_context</code>方法，修改其中的<code>sepc</code>寄存器为应用程序入口点<code>entry</code>，<code>sp</code>寄存器为我们设定的一个栈指针，并将<code>sstatus</code>寄存器的<code>SPP</code>字段设置为User。</p>
<p>在<code>run_next_app</code>函数中我们能够看到：</p>
<div class="highlight"><div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">
<table style="border-spacing:0;padding:0;margin:0;border:0;"><tr><td style="vertical-align:top;padding:0;margin:0;border:0;">
<pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">12
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">13
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">14
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">15
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">16
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">17
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">18
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">19
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">20
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">21
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">22
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">23
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">24
</span></code></pre></td>
<td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
<pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-rust" data-lang="rust"><span style="display:flex;"><span><span style="color:#75715e">// os/src/batch.rs
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">pub</span> <span style="color:#66d9ef">fn</span> <span style="color:#a6e22e">run_next_app</span>() -&gt; <span style="color:#f92672">!</span> {
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">let</span> <span style="color:#66d9ef">mut</span> app_manager <span style="color:#f92672">=</span> APP_MANAGER.exclusive_access();
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">let</span> current_app <span style="color:#f92672">=</span> app_manager.get_current_app();
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">unsafe</span> {
</span></span><span style="display:flex;"><span>        app_manager.load_app(current_app);
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    app_manager.move_to_next_app();
</span></span><span style="display:flex;"><span>    drop(app_manager);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">extern</span> <span style="color:#e6db74">&#34;C&#34;</span> {
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">fn</span> <span style="color:#a6e22e">__restore</span>(cx_addr: <span style="color:#66d9ef">usize</span>);
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">unsafe</span> {
</span></span><span style="display:flex;"><span>        __restore(KERNEL_STACK.push_context(TrapContext::app_init_context(
</span></span><span style="display:flex;"><span>            APP_BASE_ADDRESS,
</span></span><span style="display:flex;"><span>            USER_STACK.get_sp(),
</span></span><span style="display:flex;"><span>        )) <span style="color:#66d9ef">as</span> <span style="color:#f92672">*</span><span style="color:#66d9ef">const</span> _ <span style="color:#66d9ef">as</span> <span style="color:#66d9ef">usize</span>);
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>    panic!(<span style="color:#e6db74">&#34;Unreachable in batch::run_current_app!&#34;</span>);
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></td></tr></table>
</div>
</div><p>在17～22行所做的事情就是在内核栈上压入一个Trap上下文，其<code>sepc</code>是应用程序入口<code>0x80400000</code> ，其<code>sp</code>寄存器指向用户栈，其<code>sstatus</code>的<code>SPP</code>字段被设置为User。<code>push_context</code>的返回值是内核栈压入Trap上下文之后的栈顶，它会被作为<code>__restore</code>的参数，这使得在<code>__restore</code>函数中<code>sp</code>仍然可以指向内核栈道栈顶。这之后，就和执行一次普通的<code>__restore</code>函数调用一样了。</p>]]></content:encoded>
    </item>
    
    <item>
      <title>rCore-os1-应用程序与基本执行环境</title>
      <link>https://www.niuwx.cn/posts/rcore/os1/</link>
      <pubDate>Sun, 09 Oct 2022 10:00:00 +0800</pubDate>
      
      <guid>https://www.niuwx.cn/posts/rcore/os1/</guid>
      <description>Desc Text.</description>
      <content:encoded><![CDATA[<p>从零开始使用Rust写一个基于<code>RISC-V</code>架构的类Unix内核.</p>
<p>前置知识:</p>
<ul>
<li>Rust基础语法和一些进阶语法（Trait、函数式编程，Unsafe）</li>
<li>Git</li>
<li>简单汇编</li>
</ul>
<p>参考文档:</p>
<ul>
<li><a href="https://github.com/rcore-os/rCore">rCore</a></li>
<li><a href="https://github.com/rcore-os/rCore-Tutorial-v3">rCore-Tutorial-v3</a></li>
</ul>
<h2 id="构建应用程序">构建应用程序</h2>
<div class="highlight"><div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">
<table style="border-spacing:0;padding:0;margin:0;border:0;"><tr><td style="vertical-align:top;padding:0;margin:0;border:0;">
<pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
</span></code></pre></td>
<td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
<pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>cargo new os
</span></span></code></pre></td></tr></table>
</div>
</div><p>执行此命令创建一个名为os的项目。</p>
<div class="highlight"><div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">
<table style="border-spacing:0;padding:0;margin:0;border:0;"><tr><td style="vertical-align:top;padding:0;margin:0;border:0;">
<pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3
</span></code></pre></td>
<td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
<pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-rust" data-lang="rust"><span style="display:flex;"><span><span style="color:#66d9ef">fn</span> <span style="color:#a6e22e">main</span>() {
</span></span><span style="display:flex;"><span>    println!(<span style="color:#e6db74">&#34;Hello, world!&#34;</span>);
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></td></tr></table>
</div>
</div><p>创建项目后<code>os/src/main.rs</code>中已经有了“Hello, world!”的代码。</p>
<div class="highlight"><div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">
<table style="border-spacing:0;padding:0;margin:0;border:0;"><tr><td style="vertical-align:top;padding:0;margin:0;border:0;">
<pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
</span></code></pre></td>
<td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
<pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>cargo run
</span></span></code></pre></td></tr></table>
</div>
</div><p>打开os文件夹后，执行此命令后可以看到控制台输出<code>Hello, world!</code>。</p>
<p>但是，我们享受到的编程和执行程序如此方便背后有着从硬件到软件的多种机制的支持。尤其是对于应用程序的运行，需要有一个强大的执行环境来帮助。</p>
<h2 id="应用程序执行环境">应用程序执行环境</h2>
<p>现代通用操作系统上的应用程序运行需要下面多层次的执行环境栈的支持:</p>
<p><img loading="lazy" src="/rCore/app-software-stack.png" alt="app-software-stack"  />
</p>
<p>我们的应用位于最上层，可以通过调用不同编程语言提供的标准库或者其他第三方库对外提供的功能强大的函数接口，使得仅需少量的代码就能完成复杂的功能。实际上这些库属于应用程序的<code>执行环境(Execution Environment)</code>，在我们通常不会注意到的地方，它们还会在执行应用之前完成一些初始化工作，并在应用程序执行的时候对它进行监控。</p>
<p>从<code>内核/操作系统</code>的角度来看，它上面的一切都属于用户态，而它自身属于内核态。无论用户态应用如何编写，某些功能总要直接或者间接的通过<code>内核/操作系统</code>提供的<code>系统调用(System Call)</code>来实现。因此<code>系统调用</code>充当了用户和内核之间的边界。</p>
<p><strong>内核作为用户态的执行环境，它不仅要提供系统调用接口，还需要对用户态应用的执行进行监控的管理。</strong></p>
<h2 id="平台与目标三元组">平台与目标三元组</h2>
<p>现代编译器工具集以C编译器为例，主要工作流程如下：</p>
<div class="highlight"><div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">
<table style="border-spacing:0;padding:0;margin:0;border:0;"><tr><td style="vertical-align:top;padding:0;margin:0;border:0;">
<pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">4
</span></code></pre></td>
<td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
<pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>1. 预处理: 源代码<span style="color:#f92672">(</span>source code<span style="color:#f92672">)</span> -&gt; 预处理器<span style="color:#f92672">(</span>preprocessor<span style="color:#f92672">)</span> -&gt; 宏展开的源代码
</span></span><span style="display:flex;"><span>2. 编译: 宏展开的源代码 -&gt; 编译器<span style="color:#f92672">(</span>compiler<span style="color:#f92672">)</span> -&gt; 汇编程序
</span></span><span style="display:flex;"><span>3. 汇编: 汇编程序 -&gt; 汇编器<span style="color:#f92672">(</span>assembler<span style="color:#f92672">)</span> -&gt; 目标代码<span style="color:#f92672">(</span>object code<span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span>4. 链接: 目标代码 -&gt; 链接器<span style="color:#f92672">(</span>linker<span style="color:#f92672">)</span> -&gt; 可执行文件<span style="color:#f92672">(</span>executables<span style="color:#f92672">)</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>编译应用程序时，编译器将其源代码通过编译、链接得到的可执行文件时需要知道程序要在哪个平台运行。这些平台主要指CPU类型、操作系统类型和标准运行时库的组合。</p>
<p>我们通过``目标三元组(Target triple)`来描述一个目标平台。它一般包括CPU架构、CPU厂商、操作系统和运行时库。</p>
<p>我们可以通过rustc来输出rust的默认配置信息：</p>
<div class="highlight"><div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">
<table style="border-spacing:0;padding:0;margin:0;border:0;"><tr><td style="vertical-align:top;padding:0;margin:0;border:0;">
<pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">4
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">5
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">6
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">7
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">8
</span></code></pre></td>
<td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
<pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>$ rustc --version --verbose
</span></span><span style="display:flex;"><span>rustc 1.63.0 <span style="color:#f92672">(</span>4b91a6ea7 2022-08-08<span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span>binary: rustc
</span></span><span style="display:flex;"><span>commit-hash: 4b91a6ea7258a947e59c6522cd5898e7c0a6a88f
</span></span><span style="display:flex;"><span>commit-date: 2022-08-08
</span></span><span style="display:flex;"><span>host: aarch64-apple-darwin
</span></span><span style="display:flex;"><span>release: 1.63.0
</span></span><span style="display:flex;"><span>LLVM version: 14.0.5
</span></span></code></pre></td></tr></table>
</div>
</div><p>执行结果中，<code>host</code>表明默认目标平台是<code>aarch64-apple-darwin</code>,CPU架构是<code>aarch64</code>,供应商是<code>apple</code>,操作系统是<code>darwin</code>。</p>
<p>我们想要在另一个硬件平台上运行<code>Hello, world!</code>，这与之前的默认平台不同，CPU架构需要从<code>aarch64</code>换到<code>risc-v</code>。</p>
<p>通过rustc来输出Rust编译器支持那些基于risc-v的平台:</p>
<div class="highlight"><div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">
<table style="border-spacing:0;padding:0;margin:0;border:0;"><tr><td style="vertical-align:top;padding:0;margin:0;border:0;">
<pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">12
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">13
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">14
</span></code></pre></td>
<td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
<pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>$ rustc --print target-list | grep riscv
</span></span><span style="display:flex;"><span>riscv32gc-unknown-linux-gnu
</span></span><span style="display:flex;"><span>riscv32gc-unknown-linux-musl
</span></span><span style="display:flex;"><span>riscv32i-unknown-none-elf
</span></span><span style="display:flex;"><span>riscv32im-unknown-none-elf
</span></span><span style="display:flex;"><span>riscv32imac-unknown-none-elf
</span></span><span style="display:flex;"><span>riscv32imac-unknown-xous-elf
</span></span><span style="display:flex;"><span>riscv32imc-esp-espidf
</span></span><span style="display:flex;"><span>riscv32imc-unknown-none-elf
</span></span><span style="display:flex;"><span>riscv64gc-unknown-freebsd
</span></span><span style="display:flex;"><span>riscv64gc-unknown-linux-gnu
</span></span><span style="display:flex;"><span>riscv64gc-unknown-linux-musl
</span></span><span style="display:flex;"><span>riscv64gc-unknown-none-elf
</span></span><span style="display:flex;"><span>riscv64imac-unknown-none-elf
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="修改目标平台">修改目标平台</h2>
<p>我们希望将程序一直到RICV目标平台<code>riscv64gc-unknown-none-elf</code>上运行。</p>
<ul>
<li><strong>PS</strong>: <code>riscv64gc-unknown-none-elf</code> 的CPU架构是<code>riscv64gc</code>，厂商是<code>unknown</code>，操作系统是<code>none</code>， elf表示没有标准的运行时库。没有任何系统调用的封装支持，但可以生成ELF格式的执行程序。我们不选择有linux-gnu支持的<code>riscv64gc-unknown-linux-gnu</code>，是因为我们的目标是开发操作系统内核，而非在linux系统上运行的应用程序。</li>
</ul>
<p>使用<code>cargo</code>编译或编译运行时，可以使用 <code>--target &lt;target triple&gt;</code>来支持不同平台。</p>
<div class="highlight"><div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">
<table style="border-spacing:0;padding:0;margin:0;border:0;"><tr><td style="vertical-align:top;padding:0;margin:0;border:0;">
<pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
</span></code></pre></td>
<td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
<pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>cargo run --target riscv64gc-unknown-none-elf
</span></span></code></pre></td></tr></table>
</div>
</div><p>执行此命令后报错，是由于目标平台上没有Rust标准库std，也不存在任何受OS支持的系统调用，这样的平台我们称为<code>裸机平台(bare-metal)</code>。</p>
<p>既然不支持rust的<code>std</code>标准库，那为什么要使用rust呢？
除了<code>std</code>之外，rust还有一个不需要任何操作系统支持的核心库<code>core</code>，它包含了rust相当一部分的核心机制。</p>
<h2 id="移除标准库依赖">移除标准库依赖</h2>
<p>接下来将移植上述的<code>Hello, world!</code>程序到RV64GC平台，所以我们要移除程序对<code>Rust std标准库</code>的依赖 ，</p>
<p>因为<code>Rust std标准库</code>需要操作系统内核的支持。我们需要添加能够支持应用的裸机级别的<code>库操作系统(LibOS)</code>。</p>
<p>由于后续需要<code>rustc</code>编译器缺省生成RISC-V 64 的目标代码，首先需要给rustc添加一个target: <code>riscv64gc-unknown-none-elf</code></p>
<div class="highlight"><div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">
<table style="border-spacing:0;padding:0;margin:0;border:0;"><tr><td style="vertical-align:top;padding:0;margin:0;border:0;">
<pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
</span></code></pre></td>
<td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
<pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>$ rustup target add riscv64gc-unknown-none-elf
</span></span></code></pre></td></tr></table>
</div>
</div><p>然后在<code>os</code>目录下新建<code>.cargo</code>目录，再次目录下创建<code>config</code>文件</p>
<div class="highlight"><div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">
<table style="border-spacing:0;padding:0;margin:0;border:0;"><tr><td style="vertical-align:top;padding:0;margin:0;border:0;">
<pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3
</span></code></pre></td>
<td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
<pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span><span style="color:#75715e"># os/.cargo/config</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">[</span>build<span style="color:#f92672">]</span>
</span></span><span style="display:flex;"><span>target <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;riscv64gc-unknown-none-elf&#34;</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>做此调整之后，Cargo默认会使用<code>riscv64gc</code>作为目标平台。</p>
<hr>
<p>之后执行<code>cargo build</code>输出如下:</p>
<div class="highlight"><div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">
<table style="border-spacing:0;padding:0;margin:0;border:0;"><tr><td style="vertical-align:top;padding:0;margin:0;border:0;">
<pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">12
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">13
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">14
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">15
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">16
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">17
</span></code></pre></td>
<td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
<pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>$ cargo build         
</span></span><span style="display:flex;"><span>   Compiling os v0.1.0 <span style="color:#f92672">(</span>/Users/ther/WorkSpace/rCore/os<span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span>error<span style="color:#f92672">[</span>E0463<span style="color:#f92672">]</span>: can<span style="color:#960050;background-color:#1e0010">&#39;</span>t find crate <span style="color:#66d9ef">for</span> <span style="color:#e6db74">`</span>std<span style="color:#e6db74">`</span>
</span></span><span style="display:flex;"><span>  |
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">=</span> note: the <span style="color:#e6db74">`</span>riscv64gc-unknown-none-elf<span style="color:#e6db74">`</span> target may not support the standard library
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">=</span> note: <span style="color:#e6db74">`</span>std<span style="color:#e6db74">`</span> is required by <span style="color:#e6db74">`</span>os<span style="color:#e6db74">`</span> because it does not declare <span style="color:#e6db74">`</span><span style="color:#75715e">#![no_std]`</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>error: cannot find macro <span style="color:#e6db74">`</span>println<span style="color:#e6db74">`</span> in this scope
</span></span><span style="display:flex;"><span> --&gt; src/main.rs:2:5
</span></span><span style="display:flex;"><span>  |
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">2</span> |     println!<span style="color:#f92672">(</span><span style="color:#e6db74">&#34;Hello, world!&#34;</span><span style="color:#f92672">)</span>;
</span></span><span style="display:flex;"><span>  |     ^^^^^^^
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>error: <span style="color:#e6db74">`</span><span style="color:#75715e">#[panic_handler]` function required, but not found</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>For more information about this error, try <span style="color:#e6db74">`</span>rustc --explain E0463<span style="color:#e6db74">`</span>.
</span></span><span style="display:flex;"><span>error: could not compile <span style="color:#e6db74">`</span>os<span style="color:#e6db74">`</span> due to <span style="color:#ae81ff">3</span> previous errors
</span></span></code></pre></td></tr></table>
</div>
</div><p>我们来解释报错信息:</p>
<ul>
<li>第一个error表示没有找到标准库std。具体原因报错信息也做了解释，<code>riscv64gc-unknown-none-elf</code>作为目标平台，并不支持标准库std。可以使用<code>#![no_std]</code>来告诉Rust编译器不使用<code>std标准库</code>而是使用``core`。</li>
<li>第二个error表示没有找到<code>println!</code>宏。这是由于之前<code>println!</code>宏由<code>std标准库</code>提供，此时并不能支持std标准库，而我们也没能自己实现。</li>
<li>第三个error是由于没能找到<code>panic!</code>宏的具体实现，这个原因有点类似于第二个error的原因。使用Rust编写程序时，我们常常会遇到一些无法恢复的致命错误，导致程序无法继续运行，这时会手动或自动调用<code>panic!</code>宏来打印错误的位置。所以Rust编译器在编译程序时，从安全性考虑，需要有<code>panic!</code>宏的具体实现。在<code>std标准库</code>中提供了<code>panic!</code>的具体实现，但是在更底层的<code>核心库core</code>中只有一个<code>panic!</code>宏的空壳，所以我们需要先自行实现一个简陋的panic处理函数。报错信息中也给出了提示，使用<code>#[panic_handler]</code>。</li>
</ul>
<div class="highlight"><div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">
<table style="border-spacing:0;padding:0;margin:0;border:0;"><tr><td style="vertical-align:top;padding:0;margin:0;border:0;">
<pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">4
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">5
</span></code></pre></td>
<td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
<pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-rust" data-lang="rust"><span style="display:flex;"><span><span style="color:#75715e">// os/src/main.rs
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#75715e">#![no_std]</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">mod</span> lang_items;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">fn</span> <span style="color:#a6e22e">main</span>() {}
</span></span></code></pre></td></tr></table>
</div>
</div><div class="highlight"><div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">
<table style="border-spacing:0;padding:0;margin:0;border:0;"><tr><td style="vertical-align:top;padding:0;margin:0;border:0;">
<pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">4
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">5
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">6
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">7
</span></code></pre></td>
<td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
<pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-rust" data-lang="rust"><span style="display:flex;"><span><span style="color:#75715e">// os/src/lang_items.rs
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#66d9ef">use</span> core::panic::PanicInfo;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#[panic_handler]</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">fn</span> <span style="color:#a6e22e">panic</span>(_info: <span style="color:#66d9ef">&amp;</span><span style="color:#a6e22e">PanicInfo</span>) -&gt; <span style="color:#f92672">!</span> {
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">loop</span> {}
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></td></tr></table>
</div>
</div><p>执行<code>cargo build</code>后依旧会报错:</p>
<div class="highlight"><div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">
<table style="border-spacing:0;padding:0;margin:0;border:0;"><tr><td style="vertical-align:top;padding:0;margin:0;border:0;">
<pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">4
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">5
</span></code></pre></td>
<td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
<pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>$ cargo build
</span></span><span style="display:flex;"><span>   Compiling os v0.1.0 <span style="color:#f92672">(</span>/Users/ther/WorkSpace/rCore/os<span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span>error: requires <span style="color:#e6db74">`</span>start<span style="color:#e6db74">`</span> lang_item
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>error: could not compile <span style="color:#e6db74">`</span>rCore<span style="color:#e6db74">`</span> due to previous error
</span></span></code></pre></td></tr></table>
</div>
</div><p>编译器提示我们缺少了一个名为<code>start</code>的语义项。之前提到语言标准哭和三方库作为应用程序的执行环境，需要负责在执行应用程序之前进行一些初始化工作，然后才跳转到应用程序的入口点（跳转到我们编写的main函数）开始执行。实际上<code>start</code>语义项代表了std标准库在执行应用程序之前需要进行的一些初始化工作。由于我们禁用了标准库，编译器也就找不到这项功能的实现了。</p>
<p>最简单的解决方案就是直接不让编译器使用这项功能。</p>
<div class="highlight"><div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">
<table style="border-spacing:0;padding:0;margin:0;border:0;"><tr><td style="vertical-align:top;padding:0;margin:0;border:0;">
<pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">4
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">5
</span></code></pre></td>
<td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
<pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-rust" data-lang="rust"><span style="display:flex;"><span><span style="color:#75715e">// os/src/main.rs
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#75715e">#![no_std]</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#![no_main]</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">mod</span> lang_items;
</span></span><span style="display:flex;"><span><span style="color:#75715e">//在开头加入设置#![no_main]告诉编译器我们没有一般意义上的main函数，并删除原来的main函数。
</span></span></span></code></pre></td></tr></table>
</div>
</div><div class="highlight"><div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">
<table style="border-spacing:0;padding:0;margin:0;border:0;"><tr><td style="vertical-align:top;padding:0;margin:0;border:0;">
<pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3
</span></code></pre></td>
<td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
<pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>$ cargo build 
</span></span><span style="display:flex;"><span>   Compiling os v0.1.0 <span style="color:#f92672">(</span>/Users/ther/WorkSpace/rCore/os<span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span>    Finished dev <span style="color:#f92672">[</span>unoptimized + debuginfo<span style="color:#f92672">]</span> target<span style="color:#f92672">(</span>s<span style="color:#f92672">)</span> in 0.05s
</span></span></code></pre></td></tr></table>
</div>
</div><p>至此，我们成功的移除了标准库依赖，通过了编译器检查并生成执行码。但是原有的功能却被弱化甚至删除，接下来我们会以自己的方式来重塑这些基本功能。</p>
<h2 id="分析被移除标准库的程序">分析被移除标准库的程序</h2>
<p>对于上面这个被移除标准库的应用程序，通过了编译器的检查和编译，形成了二进制代码。但这个二进制代码是怎样的，它能否被正常执行呢？为了分析这些程序，首先需要安装 cargo-binutils 工具集：</p>
<div class="highlight"><div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">
<table style="border-spacing:0;padding:0;margin:0;border:0;"><tr><td style="vertical-align:top;padding:0;margin:0;border:0;">
<pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
</span></code></pre></td>
<td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
<pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>$ cargo install cargo-binutils
</span></span><span style="display:flex;"><span>$ rustup component add llvm-tools-preview
</span></span></code></pre></td></tr></table>
</div>
</div><p>我们可以通过各种工具来分析目前的程序</p>
<div class="highlight"><div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">
<table style="border-spacing:0;padding:0;margin:0;border:0;"><tr><td style="vertical-align:top;padding:0;margin:0;border:0;">
<pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">12
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">13
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">14
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">15
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">16
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">17
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">18
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">19
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">20
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">21
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">22
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">23
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">24
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">25
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">26
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">27
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">28
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">29
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">30
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">31
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">32
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">33
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">34
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">35
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">36
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">37
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">38
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">39
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">40
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">41
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">42
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">43
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">44
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">45
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">46
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">47
</span></code></pre></td>
<td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
<pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span><span style="color:#75715e"># 文件格式</span>
</span></span><span style="display:flex;"><span>$ file target/riscv64gc-unknown-none-elf/debug/os
</span></span><span style="display:flex;"><span>target/riscv64gc-unknown-none-elf/debug/os: ELF 64-bit LSB executable, UCB RISC-V, RVC, double-float ABI, version <span style="color:#ae81ff">1</span> <span style="color:#f92672">(</span>SYSV<span style="color:#f92672">)</span>, statically linked, with debug_info, not stripped
</span></span><span style="display:flex;"><span><span style="color:#75715e"># 对二进制程序os的分析可以看出它好像是一个合法的RISC-V可执行程序</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># 文件头信息</span>
</span></span><span style="display:flex;"><span>$ rust-readobj -h target/riscv64gc-unknown-none-elf/debug/os
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>File: target/riscv64gc-unknown-none-elf/debug/os
</span></span><span style="display:flex;"><span>Format: elf64-littleriscv
</span></span><span style="display:flex;"><span>Arch: riscv64
</span></span><span style="display:flex;"><span>AddressSize: 64bit
</span></span><span style="display:flex;"><span>LoadName: &lt;Not found&gt;
</span></span><span style="display:flex;"><span>ElfHeader <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>  Ident <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>    Magic: <span style="color:#f92672">(</span>7F <span style="color:#ae81ff">45</span> 4C 46<span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span>    Class: 64-bit <span style="color:#f92672">(</span>0x2<span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span>    DataEncoding: LittleEndian <span style="color:#f92672">(</span>0x1<span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span>    FileVersion: <span style="color:#ae81ff">1</span>
</span></span><span style="display:flex;"><span>    OS/ABI: SystemV <span style="color:#f92672">(</span>0x0<span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span>    ABIVersion: <span style="color:#ae81ff">0</span>
</span></span><span style="display:flex;"><span>    Unused: <span style="color:#f92672">(</span><span style="color:#ae81ff">00</span> <span style="color:#ae81ff">00</span> <span style="color:#ae81ff">00</span> <span style="color:#ae81ff">00</span> <span style="color:#ae81ff">00</span> <span style="color:#ae81ff">00</span> 00<span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>  Type: Executable <span style="color:#f92672">(</span>0x2<span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span>  Machine: EM_RISCV <span style="color:#f92672">(</span>0xF3<span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span>  Version: <span style="color:#ae81ff">1</span>
</span></span><span style="display:flex;"><span>  Entry: 0x0
</span></span><span style="display:flex;"><span>  ProgramHeaderOffset: 0x40
</span></span><span style="display:flex;"><span>  SectionHeaderOffset: 0x1B40
</span></span><span style="display:flex;"><span>  Flags <span style="color:#f92672">[</span> <span style="color:#f92672">(</span>0x5<span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span>    EF_RISCV_FLOAT_ABI_DOUBLE <span style="color:#f92672">(</span>0x4<span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span>    EF_RISCV_RVC <span style="color:#f92672">(</span>0x1<span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">]</span>
</span></span><span style="display:flex;"><span>  HeaderSize: <span style="color:#ae81ff">64</span>
</span></span><span style="display:flex;"><span>  ProgramHeaderEntrySize: <span style="color:#ae81ff">56</span>
</span></span><span style="display:flex;"><span>  ProgramHeaderCount: <span style="color:#ae81ff">3</span>
</span></span><span style="display:flex;"><span>  SectionHeaderEntrySize: <span style="color:#ae81ff">64</span>
</span></span><span style="display:flex;"><span>  SectionHeaderCount: <span style="color:#ae81ff">14</span>
</span></span><span style="display:flex;"><span>  StringTableSectionIndex: <span style="color:#ae81ff">12</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># 通过rust-readobj工具进一步分析，发现入口地址Entry是0x0</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># 反汇编导出汇编程序</span>
</span></span><span style="display:flex;"><span>$ rust-objdump -S target/riscv64gc-unknown-none-elf/debug/os
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>target/riscv64gc-unknown-none-elf/debug/os:	file format elf64-littleriscv
</span></span><span style="display:flex;"><span><span style="color:#75715e"># 经过反汇编，并没有生成汇编代码，所以基本可以断定，这个二进制程序虽然合法，但它是一个空程序。</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="qemu模拟器">QEMU模拟器</h2>
<p>我们编写的内核主要在Qemu模拟器上运行来检验其正确性。</p>
<div class="highlight"><div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">
<table style="border-spacing:0;padding:0;margin:0;border:0;"><tr><td style="vertical-align:top;padding:0;margin:0;border:0;">
<pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">4
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">5
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">6
</span></code></pre></td>
<td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
<pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span><span style="color:#75715e"># 此命令用于启动Qemu并运行我们的内核</span>
</span></span><span style="display:flex;"><span>$	qemu-system-riscv64 <span style="color:#ae81ff">\ </span><span style="color:#75715e"># 模拟64位RISC-V架构的计算机</span>
</span></span><span style="display:flex;"><span>    -machine virt <span style="color:#ae81ff">\ </span><span style="color:#75715e"># 将模拟的64位RISC-V计算机设置为名为virt的虚拟计算机</span>
</span></span><span style="display:flex;"><span>    -nographic <span style="color:#ae81ff">\ </span><span style="color:#75715e"># 表示不需要提供图形界面</span>
</span></span><span style="display:flex;"><span>    -bios ../bootloader/rustsbi.bin <span style="color:#ae81ff">\ </span><span style="color:#75715e"># Qemu开机时用来初始化的引导加载程序bootloader</span>
</span></span><span style="display:flex;"><span>    -device loader,file<span style="color:#f92672">=</span>target/riscv64gc-unknown-none-elf/release/os.bin,addr<span style="color:#f92672">=</span>0x80200000 <span style="color:#75715e"># loader属性可以在Qemu开机前将宿主机的文件载入到指定物理内存地址。</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p><code>virt</code>平台，物理内存的起始物理地址为<code>0x80000000</code>，物理内存的默认大小为<code>128MiB</code>，物理内存可以通过<code>-m</code>进行调整。</p>
<p>计算机加电之后的启动流程可以分成若干个阶段，每个阶段由一层软件负责，承担相应的初始化工作，并在此之后跳转到下一层软件的入口地址，也就是将计算机的控制权移交给下一层软件。Qemu模拟的启动流程分为三个阶段：</p>
<ul>
<li>由固化在Qemu中的一小段汇编程序负责</li>
<li>由bootloader负责</li>
<li>由内核镜像负责。</li>
</ul>
<p>在使用上述命令启动Qemu后，bootloader将被加载到物理地址以<code>0x80000000</code>开头的区域，同时内核镜像将被加载到物理地址以<code>0x80200000</code>开头的区域。</p>
<h2 id="程序内存布局与编译流程">程序内存布局与编译流程</h2>
<h3 id="程序内存布局">程序内存布局</h3>
<p>将源代码编译为可执行文件后，这些看似杂乱无章的字节可以被分成代码和数据两部分：</p>
<ul>
<li>代码部分由一条条可以被CPU解码并执行的指令组成</li>
<li>数据部分只是被CPU视作可读写的内存空间</li>
</ul>
<p>实际上，我们还可以根据具体功能将这两个部分划分为更小的单位：<code>段(Section)</code>。不同的段被编译器放在内存不同的位置上，这就构成了程序的内存布局。一种典型的程序相对内存布局如下：</p>
<p><img loading="lazy" src="/rCore/MemoryLayout.png" alt="MemoryLayout"  />
</p>
<ul>
<li><code>.text</code>：代码段，存放程序所有的汇编代码</li>
<li><code>.rodata</code>：已初始化数据段，只读全局数据，通常是一些常熟或者是常量字符串</li>
<li><code>.data</code>：已初始化数据段，可修改的全局数据</li>
<li><code>.bss</code>：未初始化数据段，保存程序中为初始化的全局变量，通常由程序的加载者代为进行数据零初始化</li>
<li><code>heap</code>：堆，用于存放程序运行时动态分配的数据，向高地址增长</li>
<li><code>stack</code>：栈，不仅用于函数调用上下文的保存与恢复，每个函数作用域的局部变量也被编译器放在它的栈帧内，向低地址增长</li>
</ul>
<h3 id="编译流程">编译流程</h3>
<p>从源代码到可执行文件的编译流程可以被细化成多个阶段：</p>
<ul>
<li>编译-&gt;汇编-&gt;链接</li>
</ul>
<p>汇编器输出的每个目标文件都有一个独立的内存布局，它描述了目标文件内各段所在的位置。而链接器所做的事情就是将所有输入的目标文件整合成一个整体的内存布局：</p>
<ul>
<li>首先将不同目标文件的段在目标内存布局中重新排布，内存布局存在冲突则合并消除冲突</li>
<li>其次将符号替换为具体地址</li>
</ul>
<h2 id="内核的第一条指令">内核的第一条指令</h2>
<div class="highlight"><div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">
<table style="border-spacing:0;padding:0;margin:0;border:0;"><tr><td style="vertical-align:top;padding:0;margin:0;border:0;">
<pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">4
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">5
</span></code></pre></td>
<td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
<pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-fallback" data-lang="fallback"><span style="display:flex;"><span># os/src/entry.asm
</span></span><span style="display:flex;"><span>	.section .text.entry # 表示将后面的内容放到名为.text.entry 的段中
</span></span><span style="display:flex;"><span>	.global _start # 告知编译器，这是一个全局符号，可以被其他目标文件使用
</span></span><span style="display:flex;"><span>_start:
</span></span><span style="display:flex;"><span>	li x1, 100 # 向寄存器x1中加载一个立即数100
</span></span></code></pre></td></tr></table>
</div>
</div><p>在<code>main.rs</code>中嵌入这段汇编代码</p>
<div class="highlight"><div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">
<table style="border-spacing:0;padding:0;margin:0;border:0;"><tr><td style="vertical-align:top;padding:0;margin:0;border:0;">
<pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">4
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">5
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">6
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">7
</span></code></pre></td>
<td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
<pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-rust" data-lang="rust"><span style="display:flex;"><span><span style="color:#75715e">// os/src/main.rs
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#75715e">#![no_std]</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#![no_main]</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">mod</span> lang_items;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">use</span> core::arch::global_asm;
</span></span><span style="display:flex;"><span>global_asm!(include_str!(<span style="color:#e6db74">&#34;entry.asm&#34;</span>));
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="调整内核的内存布局">调整内核的内存布局</h2>
<p>为了实现与Qemu的正确对接，我们可以通过链接脚本调整链接器的行为。</p>
<div class="highlight"><div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">
<table style="border-spacing:0;padding:0;margin:0;border:0;"><tr><td style="vertical-align:top;padding:0;margin:0;border:0;">
<pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">4
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">5
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">6
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">7
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">8
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">9
</span></code></pre></td>
<td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
<pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-toml" data-lang="toml"><span style="display:flex;"><span><span style="color:#75715e"># os/.cargo/config</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>[<span style="color:#a6e22e">build</span>]
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">target</span> = <span style="color:#e6db74">&#34;riscv64gc-unknown-none-elf&#34;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>[<span style="color:#a6e22e">taaarget</span>.<span style="color:#a6e22e">riscv64gc-unknown-none-elf</span>]
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">rustflags</span> = [
</span></span><span style="display:flex;"><span>	<span style="color:#e6db74">&#34;-Clink-arg=-Tsrc/linker.ld&#34;</span>, <span style="color:#e6db74">&#34;-Cforce-frame-pointers=yes&#34;</span>,
</span></span><span style="display:flex;"><span>]
</span></span></code></pre></td></tr></table>
</div>
</div><div class="highlight"><div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">
<table style="border-spacing:0;padding:0;margin:0;border:0;"><tr><td style="vertical-align:top;padding:0;margin:0;border:0;">
<pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">12
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">13
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">14
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">15
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">16
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">17
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">18
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">19
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">20
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">21
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">22
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">23
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">24
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">25
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">26
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">27
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">28
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">29
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">30
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">31
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">32
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">33
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">34
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">35
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">36
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">37
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">38
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">39
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">40
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">41
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">42
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">43
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">44
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">45
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">46
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">47
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">48
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">49
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">50
</span></code></pre></td>
<td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
<pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-fallback" data-lang="fallback"><span style="display:flex;"><span># os/src/linker.ld
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>OUTPUT_ARCH(riscv) # 设置目标平台
</span></span><span style="display:flex;"><span>ENTRY(_start) # 设置整个程序的入口点，_start为entry.asm中定义的全局符号
</span></span><span style="display:flex;"><span>BASE_ADDRESS = 0x80200000; # 定义常量
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>SECTIONS
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>    . = BASE_ADDRESS;
</span></span><span style="display:flex;"><span>    skernel = .;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    stext = .;
</span></span><span style="display:flex;"><span>    .text : {
</span></span><span style="display:flex;"><span>        *(.text.entry) # *
</span></span><span style="display:flex;"><span>        *(.text .text.*)
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    . = ALIGN(4K);
</span></span><span style="display:flex;"><span>    etext = .;
</span></span><span style="display:flex;"><span>    srodata = .;
</span></span><span style="display:flex;"><span>    .rodata : {
</span></span><span style="display:flex;"><span>        *(.rodata .rodata.*)
</span></span><span style="display:flex;"><span>        *(.srodata .srodata.*)
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    . = ALIGN(4K);
</span></span><span style="display:flex;"><span>    erodata = .;
</span></span><span style="display:flex;"><span>    sdata = .;
</span></span><span style="display:flex;"><span>    .data : {
</span></span><span style="display:flex;"><span>        *(.data .data.*)
</span></span><span style="display:flex;"><span>        *(.sdata .sdata.*)
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    . = ALIGN(4K);
</span></span><span style="display:flex;"><span>    edata = .;
</span></span><span style="display:flex;"><span>    .bss : {
</span></span><span style="display:flex;"><span>        *(.bss.stack)
</span></span><span style="display:flex;"><span>        sbss = .;
</span></span><span style="display:flex;"><span>        *(.bss .bss.*)
</span></span><span style="display:flex;"><span>        *(.sbss .sbss.*)
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    . = ALIGN(4K);
</span></span><span style="display:flex;"><span>    ebss = .;
</span></span><span style="display:flex;"><span>    ekernel = .;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    /DISCARD/ : {
</span></span><span style="display:flex;"><span>        *(.eh_frame)
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></td></tr></table>
</div>
</div><p>之后执行命令:</p>
<div class="highlight"><div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">
<table style="border-spacing:0;padding:0;margin:0;border:0;"><tr><td style="vertical-align:top;padding:0;margin:0;border:0;">
<pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3
</span></code></pre></td>
<td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
<pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>$ cargo build --release
</span></span><span style="display:flex;"><span>   Compiling os v0.1.0 <span style="color:#f92672">(</span>/Users/ther/WorkSpace/rCore/os<span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span>    Finished release <span style="color:#f92672">[</span>optimized<span style="color:#f92672">]</span> target<span style="color:#f92672">(</span>s<span style="color:#f92672">)</span> in 0.40s
</span></span></code></pre></td></tr></table>
</div>
</div><p>上述命令以<code>release</code>模式生成了内核可执行文件，它的位置在<code> target/riscv64gc-unknown-none-elf/release/os</code>。</p>
<h2 id="手动加载内核可执行文件">手动加载内核可执行文件</h2>
<p>上面得到的内核可执行文件完全符合了我们对于内存布局的要求，但是不能将其直接提交给Qemu使用，因为它除了实际会用到的代码和数据段之外，还会有一些多余的元数据，这些元数据无法被Qemu在加载文件时利用，且会使代码和数据段被加载到错误的位置。如下图所示：</p>
<p><img loading="lazy" src="/rCore/load-into-qemu.png" alt="load-into-qemu"  />
</p>
<p>如果直接将内核可执行文件os加载到Qemu内存的<code>0x80200000</code>处，由于内核可执行文件的开头是一段缘数据，这会导致Qemu内存在<code>0x80200000</code>无法找到内核第一条指令，也就意味着RustSBI无法正常将计算机控制权转交给内核。</p>
<p>执行命令可丢弃内核可执行文件中的元数据得到内核镜像:</p>
<div class="highlight"><div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">
<table style="border-spacing:0;padding:0;margin:0;border:0;"><tr><td style="vertical-align:top;padding:0;margin:0;border:0;">
<pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
</span></code></pre></td>
<td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
<pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>$ rust-objcopy --strip-all target/riscv64gc-unknown-none-elf/debug/os -O binary target/riscv64gc-unknown-none-elf/os.bin
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="基于gdb验证启动流程">基于GDB验证启动流程</h2>
<div class="highlight"><div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">
<table style="border-spacing:0;padding:0;margin:0;border:0;"><tr><td style="vertical-align:top;padding:0;margin:0;border:0;">
<pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">4
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">5
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">6
</span></code></pre></td>
<td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
<pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>$ qemu-system-riscv64 <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>    -machine virt <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>    -nographic <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>    -bios ../bootloader/rustsbi.bin <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>    -device loader,file<span style="color:#f92672">=</span>target/riscv64gc-unknown-none-elf/release/os.bin,addr<span style="color:#f92672">=</span>0x80200000 <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>	-s -S
</span></span></code></pre></td></tr></table>
</div>
</div><p>上述命令在之前提到的启动Qemu模拟器的命令的基础上加了<code>-s</code>、<code>-S</code>两个参数：</p>
<ul>
<li><code>-s</code>：使Qemu监听本地TCP端口1234等待GDB客户端连接</li>
<li><code>-S</code>：使Qemu在收到GDB的请求后再开始运行</li>
</ul>
<p>启动GDB客户端连接到Qemu：</p>
<div class="highlight"><div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">
<table style="border-spacing:0;padding:0;margin:0;border:0;"><tr><td style="vertical-align:top;padding:0;margin:0;border:0;">
<pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">4
</span></code></pre></td>
<td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
<pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>$ riscv64-unknown-elf-gdb <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>    -ex <span style="color:#e6db74">&#39;file target/riscv64gc-unknown-none-elf/release/os&#39;</span> <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>    -ex <span style="color:#e6db74">&#39;set arch riscv:rv64&#39;</span> <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>    -ex <span style="color:#e6db74">&#39;target remote localhost:1234&#39;</span>
</span></span></code></pre></td></tr></table>
</div>
</div><div class="highlight"><div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">
<table style="border-spacing:0;padding:0;margin:0;border:0;"><tr><td style="vertical-align:top;padding:0;margin:0;border:0;">
<pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">12
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">13
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">14
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">15
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">16
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">17
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">18
</span></code></pre></td>
<td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
<pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span><span style="color:#f92672">(</span>gdb<span style="color:#f92672">)</span> b *0x80200000 <span style="color:#75715e"># 在0x80200000处打个断点</span>
</span></span><span style="display:flex;"><span>Breakpoint <span style="color:#ae81ff">1</span> at 0x80200000
</span></span><span style="display:flex;"><span><span style="color:#f92672">(</span>gdb<span style="color:#f92672">)</span> c
</span></span><span style="display:flex;"><span>Continuing.
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>Breakpoint 1, 0x0000000080200000 in ?? <span style="color:#f92672">()</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">(</span>gdb<span style="color:#f92672">)</span> x/5i $pc
</span></span><span style="display:flex;"><span><span style="color:#f92672">=</span>&gt; 0x80200000:	li	ra,100 <span style="color:#75715e"># 可以看到我们entry.asm中的 li x1, 100，ra是寄存器x1的别名</span>
</span></span><span style="display:flex;"><span>   0x80200004:	unimp
</span></span><span style="display:flex;"><span>   0x80200006:	unimp
</span></span><span style="display:flex;"><span>   0x80200008:	unimp
</span></span><span style="display:flex;"><span>   0x8020000a:	unimp
</span></span><span style="display:flex;"><span><span style="color:#f92672">(</span>gdb<span style="color:#f92672">)</span> si <span style="color:#75715e"># 继续执行下一条指令</span>
</span></span><span style="display:flex;"><span>0x0000000080200004 in ?? <span style="color:#f92672">()</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">(</span>gdb<span style="color:#f92672">)</span> p/d $x1 <span style="color:#75715e"># 以十进制打印寄存器x1的值</span>
</span></span><span style="display:flex;"><span>$1 <span style="color:#f92672">=</span> <span style="color:#ae81ff">100</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">(</span>gdb<span style="color:#f92672">)</span> p/x $sp <span style="color:#75715e"># 检查此时栈指针sp的值</span>
</span></span><span style="display:flex;"><span>$2 <span style="color:#f92672">=</span> 0x0
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="为内核支持函数调用">为内核支持函数调用</h2>
<p>经过上述流程，我们已经成功的在Qemu上执行了内核的第一条指令，它是我们在<code>entry.asm</code>中手写的汇编代码得到的。但是我们的目的并不是使用汇编来编写内核，绝大部分功能还是要是用Rust来实现。</p>
<p>不过为了将控制权转交给我们使用Rust编写的内核入口，我们还是需要编写部分汇编代码。和之前一样，这些汇编代码还是放在<code>entry.asm</code>中并在控制权被转交给内核后最先被执行，但是它们的功能会较之前更加复杂：</p>
<ul>
<li>首先设置栈，使得在内核中进行函数调用</li>
<li>之后直接调用使用Rust编写的内核入口点，从而控制权便被移交给了Rust代码</li>
</ul>
<h3 id="函数调用与栈">函数调用与栈</h3>
<p>首先从汇编指令的级别分析一段程序的执行，假设CPU一次执行的指令的物理地址序列为${a_n}$。</p>
<p>其中最简单的就是CPU一条一条连续向下执行指令，但执行序列并不总是符合这种模式，当位于物理地址${a_n}$的指令是一条跳转指令时，该模式可能被破坏。跳转指令对应于我们在程序中构造的<code>控制流(Control Flow)</code>的多种不同结构，比如分支结构和循环结构，用来实现这两种结构的跳转指令，只需实现跳转功能，也就是将pc寄存器设置到一个指定地址即可。</p>
<p>另一种控制流结构则显得更加复杂：<code>函数调用(Function Call)</code>。同样使用汇编指令来分析函数调用的过程，在调用函数时，需要有一条指令跳转到被调用函数的位置，但是在被调用函数返回时，我们需要返回到那条掉转过来的指令的下一条继续执行。如果是之前提到的两种结构，执行结束后返回的地址在编译期已确定，但是对于函数调用来说，在对应的函数调用发生之前是不知道的，也就是说函数调用的返回跳转是跳转到一个函数调用发生时才能确定的地址。</p>
<p><img loading="lazy" src="/rCore/function-call.png" alt="function-call"  />
</p>
<p>对此，指令集必须给用于函数调用的跳转指令一些额外的能力，而不只是单纯的跳转。在RISC-V架构上，有两条指令即符合这样的特征：</p>
<table>
<thead>
<tr>
<th style="text-align:center">指令</th>
<th style="text-align:center">指令功能</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">jal rd, imm[20:1]</td>
<td style="text-align:center">rd&lt;-pc+4<!-- raw HTML omitted -->pc&lt;-pc+imm</td>
</tr>
<tr>
<td style="text-align:center">jalr rd, (imm[11:0])rs</td>
<td style="text-align:center">rd&lt;-pc+4<!-- raw HTML omitted -->pc&lt;-rs+imm</td>
</tr>
</tbody>
</table>
<ul>
<li><code>rs</code>：表示<code>源寄存器(Source Register)</code></li>
<li><code>imm</code>：表示<code>立即数(Immediate)</code>，是一个常数，与源寄存器构成了输入部分</li>
<li><code>rd</code>：表示<code>目标寄存器(Destination Register)</code>，它是指令的输出部分</li>
</ul>
<p>从中可以看出，这两条指令在设置pc寄存器完成跳转指令之前，将当前跳转指令的下一条指令地址保存在了rd寄存器中。在RISC-V架构中，通常使用<code>ra</code>寄存器作为<code>rd</code>对应的具体寄存器，因此在函数返回的时候，直接跳转回<code>ra</code>保存的地址即可。</p>
<p>在进行函数调用时，通过<code>jalr</code>指令保存返回地址并实现跳转；在函数调用结束返回时，通过<code>ret</code>伪指令回到跳转之前的下一条指令继续执行。这样，RISC-V的两条指令就实现了函数调用流程的核心机制。</p>
<p>由于我们在<code>ra</code>寄存器中保存返回地址，要保证在函数执行的全程不发生变化，否则<code>ret</code>之后就会跳转到错误的位置。事实上编译器除了函数调用的相关指令外确实是基本不使用<code>ra</code>寄存器，也就是说在函数中没有调用其他函数，那<code>ra</code>的值不会发生变化。但是在实际编写代码的过程中，我们常常有函数多层嵌套调用的场景，如果我们试图在函数F中调用函数G，那么在跳转到函数G的同时，<code>ra</code>会被覆盖成这条指令的下一条地址，而<code>ra</code>之前所保存的函数F的返回地址将永久丢失。</p>
<p>因此，为了能够正确实现嵌套函数调用的控制流，我们必须通过某种方式来保证在一个函数调用子函数的前后，<code>ra</code>寄存器的值不发生变化。但实际上，这并不仅仅局限于<code>ra</code>一个寄存器，而是作用于所有的通用寄存器。由于编译器是独立编译每个函数的， 因此一个函数并不知道它所调用的子函数修改了哪些寄存器。而对于一个函数而言，在调用子函数的过程中某些寄存器的值被覆盖的确会对这个函数的执行产生影响。</p>
<p>我们将由于函数调用，在控制流转移前后需要保持不变的寄存器集合称之为<code>函数调用上下文(Function Call Context)</code>。</p>
<p>由于每个CPU只有一套寄存器，所以我们若想在调用子函数时保持函数上下文不变，就需要物理内存的辅助。确切的说，就是在子函数调用之前，我们需要在物理内存中的一个区域<code>保存(Save)</code>函数调用上下文中的寄存器；而在子函数执行完毕后，我们会从内存中上述同样的区域读取并<code>恢复(Restore)</code>函数调用上下文中的寄存器。实际上，这一工作由子函数的调用者和被调用者共同完成。函数调用上下文中的寄存器被分为如下两类:</p>
<ul>
<li><code>被调用者保存(Callee-Saved)寄存器</code>: 被调用的函数可能会覆盖这些寄存器，需要被调用者函数来保存的寄存器。即由被调用的函数来保证调用前后，这些寄存器保持不变。</li>
<li><code>调用者保存(Caller-Saved)寄存器</code>: 被调用的函数可能会覆盖这些寄存器，需要调用者函数来保存的寄存器。即由发起调用的函数来保证调用前后，这些寄存器保持不变。</li>
</ul>
<p>具体过程如下：</p>
<ul>
<li>调用函数: 首先保存不希望在函数调用过程中发生变化的<code>调用者保存寄存器</code>，然后通过<code>jal/jalr</code>指令调用子函数，返回之后恢复这些寄存器。</li>
<li>被调用函数: 在被调用函数的起始，先保存函数执行过程中被用到的<code>被调用者保存寄存器</code>，然后执行函数，在函数退出之前恢复这些寄存器。</li>
</ul>
<h3 id="调用规范">调用规范</h3>
<p><code>调用规范(Calling Convention)</code>约定在某个指令集架构上，某种编程语言的函数调用如何实现。它包括以下内容：</p>
<ul>
<li>函数的输入参数和返回值参数如何传递</li>
<li>函数调用上下文中调用者/被调用者保存寄存器的划分</li>
<li>其它的在函数调用流程中对于寄存器的使用方法</li>
</ul>
<p><a href="https://riscv.org/wp-content/uploads/2015/01/riscv-calling.pdf">RISC-V架构上的C语言调用规范</a></p>
<h3 id="栈">栈</h3>
<p>之前提到的函数调用时需要在物理内存中保存上下文中的寄存器，实际上，这块物理内存更加确切的名字是<code>栈(Stack)</code>。<code>sp</code>寄存器用来保存<code>栈指针(Stack Pointer)</code>，它指向内存中的栈顶地址。在RISC-V架构中，栈从高地址向低地址增长。在一个函数中，作为起始的开场代码负责分配一块新的栈空间，即将<code>sp</code>的值减小相应的字节数，于是物理地址区间$[新sp, 旧sp)$对应的物理内存的一部分便可以被这个函数用来进行函数调用上下问的保存/恢复，这块物理地址被称为这个函数的<code>栈帧(Stackframe)</code>。同理，函数中的结尾代码负责将开场代码分配的栈帧回收，也就是将<code>sp</code>的值增加相同的字节数以回到分配之前的状态。这同样也解释了为何<code>sp</code>是一个被调用者保存的寄存器。</p>
<p>在合适的编译选项设置之下，一个函数的栈帧内容可能如下所示：</p>
<p><img loading="lazy" src="/rCore/StackFrame.png" alt="StackFrame"  />
</p>
<p>它的开头和结尾分别在<code>sp(x2)</code>和<code>fp(s0)</code>所指向的地址。按照地址从高到低分别由以下内容，它们都是通过<code>sp</code>加上一个偏移量来访问的:</p>
<ul>
<li><code>ra</code>寄存器保存其返回之后的跳转地址，调用者保存寄存器</li>
<li>父亲栈帧的结束地址<code>fp</code>，被调用者保存寄存器</li>
<li>其他被调用者保存寄存器<code>s1</code>～<code>s11</code></li>
<li>函数所使用到的局部变量</li>
</ul>
<p>因此，栈上多个<code>fp</code>信息实际上保存了一条完整的函数调用链，通过适当的方式我们可以实现对函数调用关系的跟踪。</p>
<p>至此，此节基本说明了函数调用如何实现。不过我们暂时可以忽略这些细节，我们只需在初始化阶段完成栈道设置，也就是设置好栈指针<code>sp</code>寄存器，编译器会帮助我们自动完成后面的函数调用相关机制的代码生成。</p>
<h3 id="分配并使用启动栈">分配并使用启动栈</h3>
<div class="highlight"><div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">
<table style="border-spacing:0;padding:0;margin:0;border:0;"><tr><td style="vertical-align:top;padding:0;margin:0;border:0;">
<pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">12
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">13
</span></code></pre></td>
<td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
<pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-fallback" data-lang="fallback"><span style="display:flex;"><span># os/src/entry.asm
</span></span><span style="display:flex;"><span>	.section .text.entry
</span></span><span style="display:flex;"><span>	.global _start
</span></span><span style="display:flex;"><span>_start:
</span></span><span style="display:flex;"><span>	la sp, boot_stack_top # 将指针sp设置为之前分配的启动栈栈顶地址
</span></span><span style="display:flex;"><span>	call rust_main # 调用Rust编写的内核入口点rust_main,将控制权交给Rust代码
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	.section .bss.stack # 将这块空间放置在一个名为.bss.stack的段中
</span></span><span style="display:flex;"><span>	.global boot_stack
</span></span><span style="display:flex;"><span>boot_stack:
</span></span><span style="display:flex;"><span>	.space 4096*16 # 预留4096*16字节64KiB的空间用作程序的栈空间
</span></span><span style="display:flex;"><span>	.global boot_stack_top
</span></span><span style="display:flex;"><span>boot_stack_top:
</span></span></code></pre></td></tr></table>
</div>
</div><div class="highlight"><div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">
<table style="border-spacing:0;padding:0;margin:0;border:0;"><tr><td style="vertical-align:top;padding:0;margin:0;border:0;">
<pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">4
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">5
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">6
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">7
</span></code></pre></td>
<td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
<pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-fallback" data-lang="fallback"><span style="display:flex;"><span># os/src/linker.ld
</span></span><span style="display:flex;"><span>	.bss : {
</span></span><span style="display:flex;"><span>        *(.bss.stack) # .bss.stack段被汇集到.bss段中
</span></span><span style="display:flex;"><span>        sbss = .;
</span></span><span style="display:flex;"><span>        *(.bss .bss.*)
</span></span><span style="display:flex;"><span>        *(.sbss .sbss.*)
</span></span><span style="display:flex;"><span>    }
</span></span></code></pre></td></tr></table>
</div>
</div><div class="highlight"><div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">
<table style="border-spacing:0;padding:0;margin:0;border:0;"><tr><td style="vertical-align:top;padding:0;margin:0;border:0;">
<pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">12
</span></code></pre></td>
<td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
<pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-rust" data-lang="rust"><span style="display:flex;"><span><span style="color:#75715e">// os/src/main.rs
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#75715e">#![no_std]</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#![no_main]</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">mod</span> lang_items;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">use</span> core::arch::global_asm;
</span></span><span style="display:flex;"><span>global_asm!(include_str!(<span style="color:#e6db74">&#34;entry.asm&#34;</span>));
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#[no_mangle]</span> 
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">pub</span> <span style="color:#66d9ef">fn</span> <span style="color:#a6e22e">rust_main</span>() -&gt; <span style="color:#f92672">!</span> {
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">loop</span> {}
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></td></tr></table>
</div>
</div><p>在<code>main.rs</code>中，通过宏对<code>rust_main</code>标记，避免编译器对它的名字进行混淆，否则在链接的时候，<code>entry.asm</code>将找不到<code>main.rs</code>提供的外部符号<code>rust_main</code>，导致链接失败。在<code>rust_main</code>的开场白中，我们将第一次在栈上分配栈帧并保存函数调用上下文，它是内核运行全程最深的栈帧。</p>
<p>我们顺便完成对<code>.bss</code>段的清零，这是内核初始化很重要的一部分，在使用任何被分配到<code>.bss</code>段的全局变量之前我们需要确保<code>.bss</code>段已被清零。</p>
<div class="highlight"><div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">
<table style="border-spacing:0;padding:0;margin:0;border:0;"><tr><td style="vertical-align:top;padding:0;margin:0;border:0;">
<pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">12
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">13
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">14
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">15
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">16
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">17
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">18
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">19
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">20
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">21
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">22
</span></code></pre></td>
<td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
<pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-rust" data-lang="rust"><span style="display:flex;"><span><span style="color:#75715e">// os/src/main.rs
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#75715e">#![no_std]</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#![no_main]</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">mod</span> lang_items;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">use</span> core::arch::global_asm;
</span></span><span style="display:flex;"><span>global_asm!(include_str!(<span style="color:#e6db74">&#34;entry.asm&#34;</span>));
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#[no_mangle]</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">pub</span> <span style="color:#66d9ef">fn</span> <span style="color:#a6e22e">rust_main</span>() -&gt; <span style="color:#f92672">!</span> {
</span></span><span style="display:flex;"><span>    clear_bss();
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">loop</span> {}
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">fn</span> <span style="color:#a6e22e">clear_bss</span>() {
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">extern</span> <span style="color:#e6db74">&#34;C&#34;</span> {
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">fn</span> <span style="color:#a6e22e">sbss</span>();
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">fn</span> <span style="color:#a6e22e">ebss</span>();
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    (sbss <span style="color:#66d9ef">as</span> <span style="color:#66d9ef">usize</span><span style="color:#f92672">..</span>ebss <span style="color:#66d9ef">as</span> <span style="color:#66d9ef">usize</span>).for_each(<span style="color:#f92672">|</span>p<span style="color:#f92672">|</span> <span style="color:#66d9ef">unsafe</span> { (p <span style="color:#66d9ef">as</span> <span style="color:#f92672">*</span><span style="color:#66d9ef">mut</span> <span style="color:#66d9ef">u8</span>).write_volatile(<span style="color:#ae81ff">0</span>) })
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></td></tr></table>
</div>
</div><p>链接脚本<code>linker.ld</code>给出了全局符号<code>sbss</code>和<code>ebss</code>，并指出了需要被清零的<code>.bss</code>段的起始和终止地址。所以只需遍历该地址区间并逐字节清零即可。</p>
<h2 id="基于sbi服务完成输出和关机">基于SBI服务完成输出和关机</h2>
<h3 id="使用rustsbi提供的服务">使用RustSBI提供的服务</h3>
<p>RustSBI介于底层硬件和内核之间，是内核的底层执行环境。RustSBI提供的执行环境除了为上层应用进行环境初始化，并将计算机控制权移交给内核，还有另一项职责：在上层应用运行时提供服务。当内核发出请求时，计算机转由RustSBI控制来响应内核的请求，待请求处理完毕后，计算机控制权会被交还给内核。但是由于内核并没有与RustSBI链接，内核无法通过函数调用请求RustSBI提供的服务，我们仅仅使用RustSBI构建后的可执行文件，因此内核对于RustSBI的符号一无所知。实际上，内核需要通过另一种复杂的方式来“调用”RustSBI服务：</p>
<div class="highlight"><div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">
<table style="border-spacing:0;padding:0;margin:0;border:0;"><tr><td style="vertical-align:top;padding:0;margin:0;border:0;">
<pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">12
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">13
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">14
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">15
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">16
</span></code></pre></td>
<td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
<pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-rust" data-lang="rust"><span style="display:flex;"><span><span style="color:#75715e">// os/src/sbi
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#66d9ef">use</span> core::arch::asm;
</span></span><span style="display:flex;"><span><span style="color:#75715e">#[inline(always)]</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">fn</span> <span style="color:#a6e22e">sbi_call</span>(which: <span style="color:#66d9ef">usize</span>, arg0: <span style="color:#66d9ef">usize</span>, arg1: <span style="color:#66d9ef">usize</span>, arg2: <span style="color:#66d9ef">usize</span>) -&gt; <span style="color:#66d9ef">usize</span> {
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">let</span> <span style="color:#66d9ef">mut</span> ret;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">unsafe</span> {
</span></span><span style="display:flex;"><span>        asm! {
</span></span><span style="display:flex;"><span>            <span style="color:#e6db74">&#34;ecall&#34;</span>,
</span></span><span style="display:flex;"><span>            inlateout(<span style="color:#e6db74">&#34;x10&#34;</span>) arg0<span style="color:#f92672">=&gt;</span>ret,
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">in</span>(<span style="color:#e6db74">&#34;x11&#34;</span>) arg1,
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">in</span>(<span style="color:#e6db74">&#34;x12&#34;</span>) arg2,
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">in</span>(<span style="color:#e6db74">&#34;x17&#34;</span>) which,
</span></span><span style="display:flex;"><span>        }
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>    ret
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></td></tr></table>
</div>
</div><p>我们将内核与RustSBI通信的相关功能在子模块<code>sbi</code>中实现，因此需要在<code>main.rs</code>中加入<code>mod sbi</code>将该子模块加入项目中。</p>
<p>在<code>os/src/sbi.rs</code>中：<code>which</code>表示请求RustSBI的服务类型，<code>arg0</code>~<code>arg2</code>表示传递给RustSBI的三个参数，而RustSBI在将请求处理完毕后，会给内核一个返回值，这个返回值也被<code>sbi_all</code>返回。</p>
<p>我们可以在<code>sbi.rs</code>中定义RustSBI支持的服务类型常量：</p>
<div class="highlight"><div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">
<table style="border-spacing:0;padding:0;margin:0;border:0;"><tr><td style="vertical-align:top;padding:0;margin:0;border:0;">
<pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">12
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">13
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">14
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">15
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">16
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">17
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">18
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">19
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">20
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">21
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">22
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">23
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">24
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">25
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">26
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">27
</span></code></pre></td>
<td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
<pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-rust" data-lang="rust"><span style="display:flex;"><span><span style="color:#75715e">// os/src/sbi.rs
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#75715e">#![allow(unused)]</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">const</span> SBI_SET_TIMER: <span style="color:#66d9ef">usize</span> <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>;
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">const</span> SBI_CONSOLE_PUTCHAR: <span style="color:#66d9ef">usize</span> <span style="color:#f92672">=</span> <span style="color:#ae81ff">1</span>;
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">const</span> SBI_CONSOLE_GETCHAR: <span style="color:#66d9ef">usize</span> <span style="color:#f92672">=</span> <span style="color:#ae81ff">2</span>;
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">const</span> SBI_CLEAR_IPI: <span style="color:#66d9ef">usize</span> <span style="color:#f92672">=</span> <span style="color:#ae81ff">3</span>;
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">const</span> SBI_SEND_IPI: <span style="color:#66d9ef">usize</span> <span style="color:#f92672">=</span> <span style="color:#ae81ff">4</span>;
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">const</span> SBI_REMOTE_FENCE_I: <span style="color:#66d9ef">usize</span> <span style="color:#f92672">=</span> <span style="color:#ae81ff">5</span>;
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">const</span> SBI_REMOTE_SFENCE_VMA: <span style="color:#66d9ef">usize</span> <span style="color:#f92672">=</span> <span style="color:#ae81ff">6</span>;
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">const</span> SBI_REMOTE_SFENCE_VMA_ASID: <span style="color:#66d9ef">usize</span> <span style="color:#f92672">=</span> <span style="color:#ae81ff">7</span>;
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">const</span> SBI_SHUTDOWN: <span style="color:#66d9ef">usize</span> <span style="color:#f92672">=</span> <span style="color:#ae81ff">8</span>;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">use</span> core::arch::asm;
</span></span><span style="display:flex;"><span><span style="color:#75715e">#[inline(always)]</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">fn</span> <span style="color:#a6e22e">sbi_call</span>(which: <span style="color:#66d9ef">usize</span>, arg0: <span style="color:#66d9ef">usize</span>, arg1: <span style="color:#66d9ef">usize</span>, arg2: <span style="color:#66d9ef">usize</span>) -&gt; <span style="color:#66d9ef">usize</span> {
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">let</span> <span style="color:#66d9ef">mut</span> ret;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">unsafe</span> {
</span></span><span style="display:flex;"><span>        asm! {
</span></span><span style="display:flex;"><span>            <span style="color:#e6db74">&#34;ecall&#34;</span>,
</span></span><span style="display:flex;"><span>            inlateout(<span style="color:#e6db74">&#34;x10&#34;</span>) arg0 <span style="color:#f92672">=&gt;</span> ret,
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">in</span>(<span style="color:#e6db74">&#34;x11&#34;</span>) arg1,
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">in</span>(<span style="color:#e6db74">&#34;x12&#34;</span>) arg2,
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">in</span>(<span style="color:#e6db74">&#34;x17&#34;</span>) which,
</span></span><span style="display:flex;"><span>        }
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>    ret
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></td></tr></table>
</div>
</div><p>服务<code>SBI_CONSOLE_PUTCHAR</code>可以用来在屏幕上输出一个字符，我们可以将这个功能使用<code>sbi_call</code>函数来封装：</p>
<div class="highlight"><div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">
<table style="border-spacing:0;padding:0;margin:0;border:0;"><tr><td style="vertical-align:top;padding:0;margin:0;border:0;">
<pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3
</span></code></pre></td>
<td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
<pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-rust" data-lang="rust"><span style="display:flex;"><span><span style="color:#66d9ef">pub</span> <span style="color:#66d9ef">fn</span> <span style="color:#a6e22e">console_putchar</span>(c: <span style="color:#66d9ef">usize</span>) {
</span></span><span style="display:flex;"><span>    sbi_call(SBI_CONSOLE_PUTCHAR, c, <span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">0</span>);
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></td></tr></table>
</div>
</div><p><code>SBI_SHUTDONW</code>提供关机服务，同样可以封装：</p>
<div class="highlight"><div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">
<table style="border-spacing:0;padding:0;margin:0;border:0;"><tr><td style="vertical-align:top;padding:0;margin:0;border:0;">
<pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">4
</span></code></pre></td>
<td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
<pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-rust" data-lang="rust"><span style="display:flex;"><span><span style="color:#66d9ef">pub</span> <span style="color:#66d9ef">fn</span> <span style="color:#a6e22e">shutdown</span>() -&gt; <span style="color:#f92672">!</span> {
</span></span><span style="display:flex;"><span>    sbi_call(SBI_SHUTDOWN, <span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">0</span>);
</span></span><span style="display:flex;"><span>    panic!(<span style="color:#e6db74">&#34;It should shutdown!&#34;</span>)
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="实现格式化输出">实现格式化输出</h3>
<p>上面实现的<code>console_putchar</code>功能过于受限，如果想打印一行<code>Hello,world!</code>则需要多次调用。接下来我们尝试编写基于<code>console_putchar</code>的<code>println!</code>宏。</p>
<div class="highlight"><div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">
<table style="border-spacing:0;padding:0;margin:0;border:0;"><tr><td style="vertical-align:top;padding:0;margin:0;border:0;">
<pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">12
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">13
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">14
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">15
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">16
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">17
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">18
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">19
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">20
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">21
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">22
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">23
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">24
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">25
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">26
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">27
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">28
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">29
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">30
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">31
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">32
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">33
</span></code></pre></td>
<td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
<pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-rust" data-lang="rust"><span style="display:flex;"><span><span style="color:#75715e">// os/src/console.rs
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#75715e">#![allow(unused)]</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">use</span> <span style="color:#66d9ef">crate</span>::sbi::console_putchar;
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">use</span> core::fmt::{self, Result, Write};
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">struct</span> <span style="color:#a6e22e">Stdout</span>;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">impl</span> Write <span style="color:#66d9ef">for</span> Stdout {
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">fn</span> <span style="color:#a6e22e">write_str</span>(<span style="color:#f92672">&amp;</span><span style="color:#66d9ef">mut</span> self, s: <span style="color:#66d9ef">&amp;</span><span style="color:#66d9ef">str</span>) -&gt; Result {
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">for</span> c <span style="color:#66d9ef">in</span> s.chars() {
</span></span><span style="display:flex;"><span>            console_putchar(c <span style="color:#66d9ef">as</span> <span style="color:#66d9ef">usize</span>);
</span></span><span style="display:flex;"><span>        }
</span></span><span style="display:flex;"><span>        Ok(())
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">pub</span> <span style="color:#66d9ef">fn</span> <span style="color:#a6e22e">print</span>(args: <span style="color:#a6e22e">fmt</span>::Arguments) {
</span></span><span style="display:flex;"><span>    Stdout.write_fmt(args).unwrap();
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#[macro_export]</span>
</span></span><span style="display:flex;"><span>macro_rules! print {
</span></span><span style="display:flex;"><span>    (<span style="color:#75715e">$fmt</span>: <span style="color:#a6e22e">literal</span> <span style="color:#75715e">$(,</span> <span style="color:#75715e">$($arg</span>: <span style="color:#a6e22e">tt</span>)<span style="color:#f92672">+</span>)<span style="color:#f92672">?</span>) <span style="color:#f92672">=&gt;</span> {
</span></span><span style="display:flex;"><span>        <span style="color:#75715e">$crate</span>::console::print(format_args!(<span style="color:#75715e">$fmt</span> <span style="color:#75715e">$(,</span> <span style="color:#75715e">$($arg</span>)<span style="color:#f92672">+</span>)<span style="color:#f92672">?</span>));
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#[macro_export]</span>
</span></span><span style="display:flex;"><span>macro_rules! println {
</span></span><span style="display:flex;"><span>    (<span style="color:#75715e">$fmt</span>: <span style="color:#a6e22e">literal</span> <span style="color:#75715e">$(,</span> <span style="color:#75715e">$($arg</span>: <span style="color:#a6e22e">tt</span>)<span style="color:#f92672">+</span>)<span style="color:#f92672">?</span>) <span style="color:#f92672">=&gt;</span> {
</span></span><span style="display:flex;"><span>        <span style="color:#75715e">$crate</span>::console::print(format_args!(concat!(<span style="color:#75715e">$fmt</span>, <span style="color:#e6db74">&#34;\n&#34;</span>) <span style="color:#75715e">$(,</span> <span style="color:#75715e">$($arg</span>)<span style="color:#f92672">+</span>)<span style="color:#f92672">?</span>));
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="处理致命错误">处理致命错误</h3>
<p>错误处理是编程中重要的一环，它能够保证程序的可靠性和可用性。Rust将错误分为可恢复和不可恢复错误两大类，这里我们主要关心不可恢复错误，在遇到不可恢复错误时，Rust程序会直接报错退出，使用<code>panic!</code>宏便会直接出发一个不可恢复错误并使得程序退出。在我们的内核中，目前不可恢复错误的处理机制还不完善：</p>
<div class="highlight"><div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">
<table style="border-spacing:0;padding:0;margin:0;border:0;"><tr><td style="vertical-align:top;padding:0;margin:0;border:0;">
<pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">12
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">13
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">14
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">15
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">16
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">17
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">18
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">19
</span></code></pre></td>
<td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
<pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-rust" data-lang="rust"><span style="display:flex;"><span><span style="color:#75715e">// os/src/lang_items.rss
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#66d9ef">use</span> <span style="color:#66d9ef">crate</span>::println;
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">use</span> <span style="color:#66d9ef">crate</span>::sbi::shutdown;
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">use</span> core::panic::PanicInfo;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#[panic_handler]</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">fn</span> <span style="color:#a6e22e">panic</span>(info: <span style="color:#66d9ef">&amp;</span><span style="color:#a6e22e">PanicInfo</span>) -&gt; <span style="color:#f92672">!</span> {
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> <span style="color:#66d9ef">let</span> Some(location) <span style="color:#f92672">=</span> info.location() {
</span></span><span style="display:flex;"><span>        println!(
</span></span><span style="display:flex;"><span>            <span style="color:#e6db74">&#34;Panicked at {}:{} {}&#34;</span>,
</span></span><span style="display:flex;"><span>            location.file(),
</span></span><span style="display:flex;"><span>            location.line(),
</span></span><span style="display:flex;"><span>            info.message().unwrap()
</span></span><span style="display:flex;"><span>        );
</span></span><span style="display:flex;"><span>    } <span style="color:#66d9ef">else</span> {
</span></span><span style="display:flex;"><span>        println!(<span style="color:#e6db74">&#34;Panicked: {}&#34;</span>, info.message().unwrap());
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>    shutdown()
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></td></tr></table>
</div>
</div><div class="highlight"><div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">
<table style="border-spacing:0;padding:0;margin:0;border:0;"><tr><td style="vertical-align:top;padding:0;margin:0;border:0;">
<pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">12
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">13
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">14
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">15
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">16
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">17
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">18
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">19
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">20
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">21
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">22
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">23
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">24
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">25
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">26
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">27
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">28
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">29
</span></code></pre></td>
<td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
<pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-rust" data-lang="rust"><span style="display:flex;"><span><span style="color:#75715e">// os/src/main.rs
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#75715e">#![no_std]</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#![no_main]</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#![feature(panic_info_message)]</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">mod</span> lang_items;
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">mod</span> sbi;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#[macro_use]</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">mod</span> console;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">use</span> core::arch::global_asm;
</span></span><span style="display:flex;"><span>global_asm!(include_str!(<span style="color:#e6db74">&#34;entry.asm&#34;</span>));
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#[no_mangle]</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">pub</span> <span style="color:#66d9ef">fn</span> <span style="color:#a6e22e">rust_main</span>() -&gt; <span style="color:#f92672">!</span> {
</span></span><span style="display:flex;"><span>    clear_bss();
</span></span><span style="display:flex;"><span>    println!(<span style="color:#e6db74">&#34;Hello, world&#34;</span>);
</span></span><span style="display:flex;"><span>    panic!(<span style="color:#e6db74">&#34;Shutdown machine!&#34;</span>);
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">fn</span> <span style="color:#a6e22e">clear_bss</span>() {
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">extern</span> <span style="color:#e6db74">&#34;C&#34;</span> {
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">fn</span> <span style="color:#a6e22e">sbss</span>();
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">fn</span> <span style="color:#a6e22e">ebss</span>();
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    (sbss <span style="color:#66d9ef">as</span> <span style="color:#66d9ef">usize</span><span style="color:#f92672">..</span>ebss <span style="color:#66d9ef">as</span> <span style="color:#66d9ef">usize</span>).for_each(<span style="color:#f92672">|</span>p<span style="color:#f92672">|</span> <span style="color:#66d9ef">unsafe</span> { (p <span style="color:#66d9ef">as</span> <span style="color:#f92672">*</span><span style="color:#66d9ef">mut</span> <span style="color:#66d9ef">u8</span>).write_volatile(<span style="color:#ae81ff">0</span>) });
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></td></tr></table>
</div>
</div><p>注意：在<code>main.rs</code>中我们需要加入<code>#![feature(panic_info_message)]</code>才能通过<code>PanicInfo::message</code>获取报错信息。</p>
<p>使用Qemu运行内核，可以得到结果：</p>
<div class="highlight"><div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">
<table style="border-spacing:0;padding:0;margin:0;border:0;"><tr><td style="vertical-align:top;padding:0;margin:0;border:0;">
<pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
</span></code></pre></td>
<td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
<pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>Hello, world
</span></span><span style="display:flex;"><span>Panicked at src/main.rs:18 Shutdown machine!
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="实践作业-实现彩色化log">实践作业-实现彩色化LOG</h2>
<p>详细原理：<a href="https://zh.wikipedia.org/wiki/ANSI%E8%BD%AC%E4%B9%89%E5%BA%8F%E5%88%97">ANSI转义序列</a></p>
<div class="highlight"><div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">
<table style="border-spacing:0;padding:0;margin:0;border:0;"><tr><td style="vertical-align:top;padding:0;margin:0;border:0;">
<pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
</span></code></pre></td>
<td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
<pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>echo -e <span style="color:#e6db74">&#34;\x1b[31mhello world\x1b[0m&#34;</span>
</span></span></code></pre></td></tr></table>
</div>
</div><div class="highlight"><div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">
<table style="border-spacing:0;padding:0;margin:0;border:0;"><tr><td style="vertical-align:top;padding:0;margin:0;border:0;">
<pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">4
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">5
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">6
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">7
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">8
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">9
</span></code></pre></td>
<td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
<pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-toml" data-lang="toml"><span style="display:flex;"><span><span style="color:#75715e"># Cargo.toml</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>[<span style="color:#a6e22e">package</span>]
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">name</span> = <span style="color:#e6db74">&#34;os&#34;</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">version</span> = <span style="color:#e6db74">&#34;0.1.0&#34;</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">edition</span> = <span style="color:#e6db74">&#34;2021&#34;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>[<span style="color:#a6e22e">dependencies</span>]
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">log</span> = <span style="color:#e6db74">&#34;0.4&#34;</span> 
</span></span></code></pre></td></tr></table>
</div>
</div><div class="highlight"><div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">
<table style="border-spacing:0;padding:0;margin:0;border:0;"><tr><td style="vertical-align:top;padding:0;margin:0;border:0;">
<pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">12
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">13
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">14
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">15
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">16
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">17
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">18
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">19
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">20
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">21
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">22
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">23
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">24
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">25
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">26
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">27
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">28
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">29
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">30
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">31
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">32
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">33
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">34
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">35
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">36
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">37
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">38
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">39
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">40
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">41
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">42
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">43
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">44
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">45
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">46
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">47
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">48
</span></code></pre></td>
<td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
<pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-rust" data-lang="rust"><span style="display:flex;"><span><span style="color:#75715e">// os/src/logger.rs
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#66d9ef">use</span> log::{self, Level, LevelFilter, Log};
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">use</span> <span style="color:#66d9ef">crate</span>::println;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">struct</span> <span style="color:#a6e22e">Logger</span>;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">impl</span> Log <span style="color:#66d9ef">for</span> Logger {
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">fn</span> <span style="color:#a6e22e">enabled</span>(<span style="color:#f92672">&amp;</span>self, _metadata: <span style="color:#66d9ef">&amp;</span><span style="color:#a6e22e">log</span>::Metadata) -&gt; <span style="color:#66d9ef">bool</span> {
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">true</span>
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">fn</span> <span style="color:#a6e22e">log</span>(<span style="color:#f92672">&amp;</span>self, record: <span style="color:#66d9ef">&amp;</span><span style="color:#a6e22e">log</span>::Record) {
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">if</span> <span style="color:#f92672">!</span>self.enabled(record.metadata()) {
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">return</span>;
</span></span><span style="display:flex;"><span>        }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">let</span> color <span style="color:#f92672">=</span> <span style="color:#66d9ef">match</span> record.level() {
</span></span><span style="display:flex;"><span>            Level::Error <span style="color:#f92672">=&gt;</span> <span style="color:#ae81ff">31</span>,
</span></span><span style="display:flex;"><span>            Level::Debug <span style="color:#f92672">=&gt;</span> <span style="color:#ae81ff">32</span>,
</span></span><span style="display:flex;"><span>            Level::Info <span style="color:#f92672">=&gt;</span> <span style="color:#ae81ff">34</span>,
</span></span><span style="display:flex;"><span>            Level::Trace <span style="color:#f92672">=&gt;</span> <span style="color:#ae81ff">90</span>,
</span></span><span style="display:flex;"><span>            Level::Warn <span style="color:#f92672">=&gt;</span> <span style="color:#ae81ff">93</span>,
</span></span><span style="display:flex;"><span>        };
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        println!(
</span></span><span style="display:flex;"><span>            <span style="color:#e6db74">&#34;\u{1B}[{}m[{:&gt;5}] {}\u{1B}[0m&#34;</span>,
</span></span><span style="display:flex;"><span>            color,
</span></span><span style="display:flex;"><span>            record.level(),
</span></span><span style="display:flex;"><span>            record.args(),
</span></span><span style="display:flex;"><span>        );
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">fn</span> <span style="color:#a6e22e">flush</span>(<span style="color:#f92672">&amp;</span>self) {}
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">pub</span> <span style="color:#66d9ef">fn</span> <span style="color:#a6e22e">init</span>() {
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">static</span> LOGGER: <span style="color:#a6e22e">Logger</span> <span style="color:#f92672">=</span> Logger;
</span></span><span style="display:flex;"><span>    log::set_logger(<span style="color:#f92672">&amp;</span>LOGGER).unwrap();
</span></span><span style="display:flex;"><span>    log::set_max_level(<span style="color:#66d9ef">match</span> option_env!(<span style="color:#e6db74">&#34;LOG&#34;</span>) {
</span></span><span style="display:flex;"><span>        Some(<span style="color:#e6db74">&#34;ERROR&#34;</span>) <span style="color:#f92672">=&gt;</span> LevelFilter::Error,
</span></span><span style="display:flex;"><span>        Some(<span style="color:#e6db74">&#34;WARN&#34;</span>) <span style="color:#f92672">=&gt;</span> LevelFilter::Warn,
</span></span><span style="display:flex;"><span>        Some(<span style="color:#e6db74">&#34;INFO&#34;</span>) <span style="color:#f92672">=&gt;</span> LevelFilter::Info,
</span></span><span style="display:flex;"><span>        Some(<span style="color:#e6db74">&#34;DEBUG&#34;</span>) <span style="color:#f92672">=&gt;</span> LevelFilter::Debug,
</span></span><span style="display:flex;"><span>        Some(<span style="color:#e6db74">&#34;TRACE&#34;</span>) <span style="color:#f92672">=&gt;</span> LevelFilter::Trace,
</span></span><span style="display:flex;"><span>        _ <span style="color:#f92672">=&gt;</span> LevelFilter::Trace,
</span></span><span style="display:flex;"><span>    });
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></td></tr></table>
</div>
</div><div class="highlight"><div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">
<table style="border-spacing:0;padding:0;margin:0;border:0;"><tr><td style="vertical-align:top;padding:0;margin:0;border:0;">
<pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">12
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">13
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">14
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">15
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">16
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">17
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">18
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">19
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">20
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">21
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">22
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">23
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">24
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">25
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">26
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">27
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">28
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">29
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">30
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">31
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">32
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">33
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">34
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">35
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">36
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">37
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">38
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">39
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">40
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">41
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">42
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">43
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">44
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">45
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">46
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">47
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">48
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">49
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">50
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">51
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">52
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">53
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">54
</span></code></pre></td>
<td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
<pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-rust" data-lang="rust"><span style="display:flex;"><span><span style="color:#75715e">// os/src/main.rs
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#75715e">#![no_main]</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#![no_std]</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#![feature(panic_info_message)]</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">mod</span> lang_items;
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">mod</span> sbi;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">mod</span> logger;
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">use</span> log::<span style="color:#f92672">*</span>;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#[macro_use]</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">mod</span> console;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>core::arch::global_asm!(include_str!(<span style="color:#e6db74">&#34;entry.asm&#34;</span>));
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#[no_mangle]</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">pub</span> <span style="color:#66d9ef">fn</span> <span style="color:#a6e22e">rust_main</span>() -&gt; <span style="color:#f92672">!</span> {
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">extern</span> <span style="color:#e6db74">&#34;C&#34;</span> {
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">fn</span> <span style="color:#a6e22e">stext</span>();
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">fn</span> <span style="color:#a6e22e">etext</span>();
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">fn</span> <span style="color:#a6e22e">srodata</span>();
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">fn</span> <span style="color:#a6e22e">erodata</span>();
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">fn</span> <span style="color:#a6e22e">sdata</span>();
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">fn</span> <span style="color:#a6e22e">edata</span>();
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">fn</span> <span style="color:#a6e22e">sbss</span>();
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">fn</span> <span style="color:#a6e22e">ebss</span>();
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">fn</span> <span style="color:#a6e22e">boot_stack</span>();
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">fn</span> <span style="color:#a6e22e">boot_stack_top</span>();
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    clear_bss();
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    logger::init();
</span></span><span style="display:flex;"><span>    error<span style="color:#f92672">!</span>(<span style="color:#e6db74">&#34;Hello, rCore!&#34;</span>);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    info<span style="color:#f92672">!</span>(<span style="color:#e6db74">&#34;.text [{:#x}, {:#x}]&#34;</span>, stext <span style="color:#66d9ef">as</span> <span style="color:#66d9ef">usize</span>, etext <span style="color:#66d9ef">as</span> <span style="color:#66d9ef">usize</span>);
</span></span><span style="display:flex;"><span>    debug<span style="color:#f92672">!</span>(<span style="color:#e6db74">&#34;.rodata [{:#x}, {:#x}]&#34;</span>, srodata <span style="color:#66d9ef">as</span> <span style="color:#66d9ef">usize</span>, erodata <span style="color:#66d9ef">as</span> <span style="color:#66d9ef">usize</span>);
</span></span><span style="display:flex;"><span>    trace<span style="color:#f92672">!</span>(<span style="color:#e6db74">&#34;.data [{:#x}, {:#x}]&#34;</span>, sdata <span style="color:#66d9ef">as</span> <span style="color:#66d9ef">usize</span>, edata <span style="color:#66d9ef">as</span> <span style="color:#66d9ef">usize</span>);
</span></span><span style="display:flex;"><span>    warn<span style="color:#f92672">!</span>(<span style="color:#e6db74">&#34;.bss [{:#x}, {:#x}]&#34;</span>, sbss <span style="color:#66d9ef">as</span> <span style="color:#66d9ef">usize</span>, ebss <span style="color:#66d9ef">as</span> <span style="color:#66d9ef">usize</span>);
</span></span><span style="display:flex;"><span>    error<span style="color:#f92672">!</span>(
</span></span><span style="display:flex;"><span>        <span style="color:#e6db74">&#34;.stack [{:#x}, {:#x}]&#34;</span>,
</span></span><span style="display:flex;"><span>        boot_stack <span style="color:#66d9ef">as</span> <span style="color:#66d9ef">usize</span>, boot_stack_top <span style="color:#66d9ef">as</span> <span style="color:#66d9ef">usize</span>
</span></span><span style="display:flex;"><span>    );
</span></span><span style="display:flex;"><span>    panic!(<span style="color:#e6db74">&#34;Shutdown machine!&#34;</span>);
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">fn</span> <span style="color:#a6e22e">clear_bss</span>() {
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">extern</span> <span style="color:#e6db74">&#34;C&#34;</span> {
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">fn</span> <span style="color:#a6e22e">sbss</span>();
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">fn</span> <span style="color:#a6e22e">ebss</span>();
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>    (sbss <span style="color:#66d9ef">as</span> <span style="color:#66d9ef">usize</span><span style="color:#f92672">..</span>ebss <span style="color:#66d9ef">as</span> <span style="color:#66d9ef">usize</span>).for_each(<span style="color:#f92672">|</span>p<span style="color:#f92672">|</span> <span style="color:#66d9ef">unsafe</span> { (p <span style="color:#66d9ef">as</span> <span style="color:#f92672">*</span><span style="color:#66d9ef">mut</span> <span style="color:#66d9ef">u8</span>).write_volatile(<span style="color:#ae81ff">0</span>) });
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></td></tr></table>
</div>
</div><p>运行结果如下：</p>
<p><img loading="lazy" src="/rCore/os1.png" alt=""  />
</p>]]></content:encoded>
    </item>
    
  </channel>
</rss>
